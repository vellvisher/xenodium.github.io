<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>Alvaro Ramirez's Emacs notes</title>
<description>Alvaro's Emacs notes from a hacked up org HTML export.</description>
<generator>Emacs webfeeder.el</generator>
<link>http://xenodium.com</link>
<atom:link href="http://xenodium.com/emacs/rss.xml" rel="self" type="application/rss+xml"/>
<lastBuildDate>Sun, 22 Mar 2020 17:02:25 +0000</lastBuildDate>
<item>
  <author>Álvaro Ramírez</author>
  <title>Modern Emacs lisp libraries</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgd6884a4" class="outline-2">
 <h2 id="modern-elisp-libraries"> <span class="timestamp-wrapper"> <span class="timestamp">21 March 2020</span></span> Modern Emacs lisp libraries</h2>
 <div class="outline-text-2" id="text-modern-elisp-libraries">
 <p>
Quickly finding related built-in elisp functions (without prefixes) can sometimes take a little poking around.
</p>

 <p>
Some modern and predictable built-in exceptions I now reach out to are:
</p>

 <ul class="org-ul"> <li> <a href="https://nicolas.petton.fr/ressources/emacsconf2015/">map.el</a> for key/values, alists, hash-tables and arrays (built-in as of Emacs 25.1).</li>
 <li> <a href="https://nicolas.petton.fr/ressources/emacsconf2015/">seq.el</a> for alist, hash-tables and array manipulation (built-in as of Emacs 25.1).</li>
 <li> <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/subr-x.el">subr-x.el</a> has a handful of string functions (built-in as of Emacs 24.4).</li>
 <li> <a href="https://endlessparentheses.com/new-on-elpa-and-in-emacs-25-1-let-alist.html">let-alist.el</a> wonderful syntax for alists, great for json (built-in as of Emacs 25.1).</li>
</ul> <p>
If you don't mind reaching out to third-party libs (you likely have some of these already installed), here are some modern, predictable, and well-documented ones that always get me out of trouble:
</p>

 <ul class="org-ul"> <li> <a href="https://github.com/magnars/s.el#functions">s.el</a> string manipulation.</li>
 <li> <a href="https://github.com/rejeep/f.el">f.el</a> file/path handling.</li>
 <li> <a href="https://github.com/magnars/dash.el#functions">dash.el</a> for lists.</li>
 <li> <a href="https://github.com/Wilfred/ht.el">ht.el</a> for hashtables.</li>
 <li> <a href="https://github.com/alphapapa/ts.el">ts.el</a> for date and time.</li>
</ul> <p>
I'm happy with built-ins like map.el, seq.el, and let-alist.el. subr-x.el is also pretty nice, although not as full-featured as third-party s.el.
</p>

 <p>
Am I missing out on other modern built-ins or third-party libraries?
</p>

 <p>
UPDATE: Added a handful of newly discovered libraries plus  <a href="https://twitter.com/dmartincy/status/1241444701754085383?s=20">suggestions by Daniel Martín</a> (thanks!). Not tried any of these myself.
</p>

 <ul class="org-ul"> <li> <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/rtree.el">rtree.el</a> binary tree that stores ranges (Built-in).</li>
 <li> <a href="https://github.com/emacsorphanage/ov">ov.el</a> simple way to manipulate overlay.</li>
 <li>Toby Cubitt's  <a href="http://www.dr-qubit.org/tags/computing-code-emacs.html">libraries</a> (heap, overlays, queue, avl-tree, trie, dict-tree, etc).</li>
 <li> <a href="https://github.com/VincentToups/shadchen-el">shadchen.el</a> pattern-matching.</li>
 <li> <a href="https://phillord.github.io/m-buffer-el">m-buffer.el</a> buffers.</li>
 <li> <a href="https://github.com/tali713/esxml">esxml.el</a> xml and html.</li>
 <li> <a href="https://github.com/plexus/a.el">a.el</a> associative structures.</li>
 <li> <a href="https://github.com/troyp/asoc.el">asoc.el</a> association list library.</li>
 <li> <a href="https://github.com/yurikhan/yk-color">yk-color.el</a> linear RGB color manipulation.</li>
</ul> <p>
comments on  <a href="https://twitter.com/xenodium/status/1241439306511720448">twitter</a>
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/modern-elisp-libraries/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/modern-elisp-libraries/index.html</guid>
  <pubDate>Sat, 21 Mar 2020 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emacs smartparens auto-indent</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org959942f" class="outline-2">
 <h2 id="emacs-smartparens-auto-indent"> <span class="timestamp-wrapper"> <span class="timestamp">20 March 2020</span></span> Emacs smartparens auto-indent</h2>
 <div class="outline-text-2" id="text-emacs-smartparens-auto-indent">
 <p>
While I do most editing in Emacs, I use Xcode every now and then. I like Xcode's pair matching (of brackets) combined with its auto-indent.
</p>


 <div class="figure">
 <p> <img src="../images/emacs-smartparens-auto-indent/xcode_indent.gif" alt="xcode_indent.gif" width="50%" height="50%"></img></p>
</div>

 <p>
While the wonderful  <a href="https://github.com/Fuco1/smartparens">smartparens</a> gives Emacs pair-matching powers, it doesn't automatically indent between pairs (out of the box anyway).
</p>


 <div class="figure">
 <p> <img src="../images/emacs-smartparens-auto-indent/indent_bracket_before.gif" alt="indent_bracket_before.gif" width="50%" height="50%"></img></p>
</div>

 <p>
Luckily, smartparens does provide  <i>sp-local-pair,</i> which enables us to achieve a similar goal.
</p>

 <p>
With a short snippet, we can autoindent between {}, [], and () when pressing return in-between.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">indent-between-pair</span> ( <span style="color: #0086b3;">&rest</span> _ignored)
  (newline)
  (indent-according-to-mode)
  (forward-line -1)
  (indent-according-to-mode))

(sp-local-pair 'prog-mode  <span style="color: #183691;">"{"</span> nil  <span style="color: #a71d5d;">:post-handlers</span> '((indent-between-pair  <span style="color: #183691;">"RET"</span>)))
(sp-local-pair 'prog-mode  <span style="color: #183691;">"["</span> nil  <span style="color: #a71d5d;">:post-handlers</span> '((indent-between-pair  <span style="color: #183691;">"RET"</span>)))
(sp-local-pair 'prog-mode  <span style="color: #183691;">"("</span> nil  <span style="color: #a71d5d;">:post-handlers</span> '((indent-between-pair  <span style="color: #183691;">"RET"</span>)))
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/emacs-smartparens-auto-indent/indent_bracket_after.gif" alt="indent_bracket_after.gif" width="50%" height="50%"></img></p>
</div>

 <p>
comments on  <a href="https://twitter.com/xenodium/status/1241104117264781312">twitter</a>
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-smartparens-auto-indent/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-smartparens-auto-indent/index.html</guid>
  <pubDate>Fri, 20 Mar 2020 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Nix bookmarks</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgb1df9ea" class="outline-2">
 <h2 id="nix-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">15 February 2020</span></span> Nix bookmarks</h2>
 <div class="outline-text-2" id="text-nix-bookmarks">
 <span class="modified-timestamp">   <em>updated: 15 February 2020  </em></span>
 <ul class="org-ul"> <li> <a href="https://github.com/bergey/dotfiles/blob/4807ef9de187018a9cf7e1d571fc530e3ce07bfb/emacs/emacs.nix">Daniel Bergey's dotfiles/emacs.nix</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=22295102">I Was Wrong about Nix | Hacker News</a>.</li>
 <li> <a href="https://christine.website/blog/i-was-wrong-about-nix-2020-02-10">I was wrong about Nix</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/nix-bookmarks/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/nix-bookmarks/index.html</guid>
  <pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>SwiftUI bookmarks</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org0e2e8e9" class="outline-2">
 <h2 id="swiftui-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">29 December 2019</span></span> SwiftUI bookmarks</h2>
 <div class="outline-text-2" id="text-swiftui-bookmarks">
 <span class="modified-timestamp">   <em>updated: 11 March 2020  </em></span>
 <ul class="org-ul"> <li> <a href="https://emacsist.github.io/2020/01/07/swiftui-for-absolute-beginners%E8%AF%BB%E4%B9%A6/"><SwiftUI for Absolute Beginners>读书 - emacsist</a>.</li>
 <li> <a href="https://github.com/Jinxiansen/SwiftUI">`SwiftUI` Framework Learning and Usage Guide</a>.</li>
 <li> <a href="https://swiftui-lab.com/companion/">A Companion for SwiftUI - The SwiftUI Lab</a>.</li>
 <li> <a href="https://swiftui-lab.com/swiftui-animations-part1/">Advanced SwiftUI Animations - Part 1: Paths - The SwiftUI Lab</a>.</li>
 <li> <a href="https://swiftui-lab.com/advanced-transitions/">Advanced SwiftUI Transitions - The SwiftUI Lab</a>.</li>
 <li> <a href="https://www.morningswiftui.com/blog/build-mapview-app-with-swiftui">Building a MapView app with SwiftUI — Morning SwiftUI</a>.</li>
 <li> <a href="https://swiftwithmajid.com/2019/12/25/building-pager-view-in-swiftui/">Building Pager view in SwiftUI | Majid’s blog about Swift development</a>.</li>
 <li> <a href="https://swiftwithmajid.com/2020/02/05/building-viewmodels-with-combine-framework/">Building ViewModels with Combine framework</a>.</li>
 <li> <a href="https://store.raywenderlich.com/products/combine-asynchronous-programming-with-swift">Combine: Asynchronous Programming with Swift</a>.</li>
 <li> <a href="https://github.com/mattgallagher/CwlFitting">CwlFitting: A small SwiftUI package to aid with "shrink-to-fit" + "fill-aligned" VStack and HStack arrangements</a>.</li>
 <li> <a href="https://theswiftdev.com/2018/01/25/deep-dive-into-swift-frameworks/">Deep dive into Swift frameworks - The.Swift.Dev.</a>.</li>
 <li> <a href="https://dev.to/maeganwilson_/default-a-view-in-navigationview-with-swiftui-183p">Default a View in NavigationView with SwiftUI - DEV Community</a>.</li>
 <li> <a href="https://designcode.io/swiftui?promo=learnswiftui">designcode's SwiftUI course</a>.</li>
 <li> <a href="https://swiftui-lab.com/geometryreader-to-the-rescue/">GeometryReader to the Rescue - The SwiftUI Lab</a>.</li>
 <li> <a href="https://medium.com/better-programming/gestures-in-swiftui-e94b784ecc7">Gestures in SwiftUI - Better Programming - Medium</a>.</li>
 <li> <a href="https://github.com/AppPear/ChartView">GitHub - AppPear/ChartView: ChartView made in SwiftUI</a>.</li>
 <li> <a href="https://github.com/Dimillian/MovieSwiftUI">GitHub - Dimillian/MovieSwiftUI: SwiftUI & Combine app using MovieDB API.</a>.</li>
 <li> <a href="https://github.com/Jinxiansen/SwiftUI">GitHub - Jinxiansen/SwiftUI: `SwiftUI` Framework Learning and Usage Guide.</a>.</li>
 <li> <a href="https://github.com/nalexn/EnvironmentOverrides">GitHub - nalexn/EnvironmentOverrides: QA assistant for a SwiftUI app</a>.</li>
 <li> <a href="https://github.com/nalexn/EnvironmentOverrides">GitHub - nalexn/EnvironmentOverrides: QA assistant for a SwiftUI app</a>.</li>
 <li> <a href="https://github.com/paololeonardi/WaterfallGrid">GitHub - paololeonardi/WaterfallGrid: A waterfall grid layout view for SwiftUI.</a>.</li>
 <li> <a href="https://github.com/SimpleBoilerplates/SwiftUI-Cheat-Sheet">GitHub - SimpleBoilerplates/SwiftUI-Cheat-Sheet: SwiftUI Cheat Sheet</a>.</li>
 <li> <a href="https://github.com/siteline/SwiftUI-Introspect">GitHub - siteline/SwiftUI-Introspect: Introspect underlying UIKit components</a>.</li>
 <li> <a href="https://github.com/SwiftUIX/SwiftUIX">GitHub - SwiftUIX/SwiftUIX: An extension to the standard SwiftUI library.</a>.</li>
 <li> <a href="https://www.raywenderlich.com/4503153-how-to-create-a-splash-screen-with-swiftui">How to Create a Splash Screen With SwiftUI | raywenderlich.com</a>.</li>
 <li> <a href="https://stackoverflow.com/questions/56490963/how-to-display-a-search-bar-with-swiftui">how to display a search bar with SwiftUI - Stack Overflow</a>.</li>
 <li> <a href="https://www.hackingwithswift.com/articles/210/how-to-fix-slow-list-updates-in-swiftui">How to fix slow List updates in SwiftUI – Hacking with Swift</a>.</li>
 <li> <a href="https://medium.com/better-programming/implement-searchbar-in-swiftui-556a204e1970">Implement a Search Bar in SwiftUI - Better Programming - Medium</a>.</li>
 <li> <a href="https://swiftui-lab.com/communicating-with-the-view-tree-part-1/">Inspecting the View Tree with PreferenceKey - Part 1 - The SwiftUI Lab</a>.</li>
 <li> <a href="https://swiftwithmajid.com/2019/12/04/must-have-swiftui-extensions/">Must-have SwiftUI extensions | Majid’s blog about Swift development</a>.</li>
 <li> <a href="https://nalexn.github.io/swiftui-deep-linking/">Programmatic navigation in SwiftUI project - Alexey Naumov</a>.</li>
 <li> <a href="https://dev.to/gualtierofr/remote-images-in-swiftui-49jp">Remote images in SwiftUI - DEV Community</a>.</li>
 <li> <a href="https://medium.com/ymedialabs-innovation/resizing-techniques-and-image-quality-that-every-ios-developer-should-know-e061f33f7aba">Resizing Techniques and Image Quality That Every iOS Developer Should Know (Swift)</a>.</li>
 <li> <a href="https://medium.com/flawless-app-stories/reusable-image-cache-in-swift-9b90eb338e8d">Reusable Image Cache in Swift - Flawless iOS - Medium</a>.</li>
 <li> <a href="https://ordinarycoding.com/articles/search-view-in-swiftui/">Search View in SwiftUI | Ordinary Coding</a>.</li>
 <li> <a href="https://twitter.com/icanzilb/status/1235884754576322560">Short video showing you how to debug, learn, or teach Combine operators with Timelane - the approach is always the same, add lanes - analyze the data</a>.</li>
 <li> <a href="https://github.com/alfianlosari/SwiftUIStaggeredNote">StaggeredList Sample App: A Staggered Pinterest Like Layout using SwiftUI</a>.</li>
 <li> <a href="https://stackoverflow.com/questions/56578072/hstack-with-sf-symbols-image-not-aligned-centered">swift - HStack with SF Symbols Image not aligned centered - Stack Overflow</a>.</li>
 <li> <a href="https://stackoverflow.com/questions/59227158/imagepicker-in-swiftui">swift - ImagePicker in SwiftUI - Stack Overflow</a>.</li>
 <li> <a href="https://medium.com/better-programming/swiftui-and-redux-clean-code-and-small-independent-components-6f46a5eb46b3">SwiftUI and Redux — Clean Code and Small, Independent Components</a>.</li>
 <li> <a href="https://sarunw.com/posts/swiftui-animation/">SwiftUI Animation | Sarun</a>.</li>
 <li> <a href="https://medium.com/swlh/learn-master-%EF%B8%8F-swiftui-basic-components-in-10-minutes-dc327e71d245">SwiftUI basic components (form example)</a>.</li>
 <li> <a href="https://www.hackingwithswift.com/books/ios-swiftui/buttons-and-images">SwiftUI Buttons and images (using systemName)</a>.</li>
 <li> <a href="https://designcode.io/courses">SwiftUI courses</a>.</li>
 <li> <a href="https://github.com/Leon12345679/QuickActionCard">SwiftUI displaying customizable quick action card</a>.</li>
 <li> <a href="https://kean.github.io/post/swiftui-layout-system">SwiftUI Layout System | Alexander Grebenyuk</a>.</li>
 <li> <a href="https://www.tomasznazarenko.com/frameworks/SwiftUI-notes/">SwiftUI notes - Tomasz Nazarenko Blog</a>.</li>
 <li> <a href="https://www.appcoda.com/swiftui-form-ui/">SwiftUI Tutorial: How to Build a Form UI for iOS Apps</a>.</li>
 <li> <a href="https://swiftui.gallery/">swiftui.gallery | A gallery of SwiftUI code example snippets</a>.</li>
 <li> <a href="https://swiftui.gallery/uploads/code/SignUpForm">swiftui.gallery: sign up form sample</a>.</li>
 <li> <a href="https://github.com/ygit/swiftui">swiftui: A collaborative list of awesome SwiftUI resources</a>.</li>
 <li> <a href="https://github.com/alfianlosari/SwiftUIStaggeredList">SwiftUIStaggeredList: Staggered Layout List Using SwiftUI</a>.</li>
 <li> <a href="https://www.reddit.com/r/swift/comments/elhakp/so_i_guess_my_journey_begins_now/">SwuiftUI books</a>.</li>
 <li> <a href="https://sarunw.com/tags/swiftui/">Tagged “SwiftUI” | Sarun</a>.</li>
 <li> <a href="https://medium.com/better-programming/the-complete-swiftui-documentation-youve-been-waiting-for-fdfe7241add9">The Complete SwiftUI Documentation You’ve Been Waiting For</a>.</li>
 <li> <a href="https://theswiftdev.com/2019/10/31/the-ultimate-combine-framework-tutorial-in-swift/">The ultimate Combine framework tutorial in Swift - The.Swift.Dev.</a>.</li>
 <li> <a href="https://twitter.com/dbuchanandev/status/1236411023340511233">Tweet on improving List SwiftUI performace (searching)</a>.</li>
 <li> <a href="https://medium.com/@dmytro.anokhin/url-image-view-in-swiftui-f08f85d942d8">URL Image view in SwiftUI</a>.</li>
 <li> <a href="https://swiftwithmajid.com/2019/10/30/view-composition-in-swiftui/">View composition in SwiftUI | Majid’s blog about Swift development</a>.</li>
 <li> <a href="https://netsplit.com/swiftui/views-choose-their-own-sizes/">Views Choose Their Own Sizes – Netsplit.com</a>.</li>
 <li> <a href="https://nalexn.github.io/swiftui-observableobject">Why I quit using the ObservableObject - Alexey Naumov</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/swiftui-bookmarks/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/swiftui-bookmarks/index.html</guid>
  <pubDate>Sun, 29 Dec 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Wizard zines comics in Emacs eshell</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org3ef517c" class="outline-2">
 <h2 id="wizard-zines-comics-eshell-util"> <span class="timestamp-wrapper"> <span class="timestamp">24 November 2019</span></span> Wizard zines comics in Emacs eshell</h2>
 <div class="outline-text-2" id="text-wizard-zines-comics-eshell-util">
 <p>
Over at  <a href="http://wizardzines.com">wizardzines.com</a>,  <a href="https://jvns.ca">Julia Evans</a> authors wonderful zines on topics like git, networking, linux, command-line utilities, and others. Some zines are paid. Some are free. No affiliation here, just a fan.
</p>

 <p>
A little while ago, Julia  <a href="https://twitter.com/b0rk/status/1192304892435738624">tweeted</a> about a utility she's building to view her original comics on similar topics. I instantly thought it'd be a fun tool to implement for Emacs  <a href="https://www.gnu.org/software/emacs/manual/html_mono/eshell.html">eshell</a>.
</p>

 <p>
Since then, I subscribed to  <a href="https://wizardzines.com/saturday-comics/">wizardzines.com/saturday-comics</a> and received a few comics (awk, tar, and bash tricks). I saved them locally (using topic name and dropping file extensions).
</p>

 <div class="org-src-container">
 <pre class="src src-sh">ls -1 ~/Downloads/wizardzines-comics/
</pre>
</div>

 <table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"> <colgroup> <col class="org-left"></col></colgroup> <tbody> <tr> <td class="org-left">awk</td>
</tr> <tr> <td class="org-left">bash</td>
</tr> <tr> <td class="org-left">tar</td>
</tr></tbody></table> <p>
By no means battle-tested, but here's an elisp snippet defining the  <i>ecomic</i> command. It displays inlined comics in the handy eshell.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">eshell</span>)
( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">iimage</span>)

( <span style="color: #a71d5d;">defvar</span>  <span style="color: #333333;">wizardzines-comics-path</span>  <span style="color: #183691;">"~/Downloads/wizardzines-comics"</span>)

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">eshell/ecomic</span> ( <span style="color: #0086b3;">&rest</span> args)
   <span style="color: #183691;">"Display command comic in ARGS.</span>
 <span style="color: #183691;">Note: ensure comic images live in `</span> <span style="color: #0086b3;">wizardzines-comics-path</span> <span style="color: #183691;">', named with</span>
 <span style="color: #183691;">command name and no extension."</span>
  (eshell-eval-using-options
    <span style="color: #183691;">"ecomic"</span> args
   '((?h  <span style="color: #183691;">"help"</span> nil nil  <span style="color: #183691;">"show this usage screen"</span>)
      <span style="color: #a71d5d;">:external</span>  <span style="color: #183691;">"ecomic"</span>
      <span style="color: #a71d5d;">:show-usage</span>
      <span style="color: #a71d5d;">:usage</span>  <span style="color: #183691;">"COMMAND</span>

 <span style="color: #183691;">Show COMMAND comic from Julia Evans' https://wizardzines.com/saturday-comics"</span>)
   ( <span style="color: #a71d5d;">let*</span> ((command (nth 0 (eshell-stringify-list (eshell-flatten-list args))))
          (image-fpath (concat (file-name-as-directory
                                (expand-file-name wizardzines-comics-path))
                               command)))
     ( <span style="color: #a71d5d;">unless</span> (file-exists-p image-fpath)
       ( <span style="color: #333333;">error</span>  <span style="color: #183691;">"comic: \"%s\" not found :-("</span> command))
     (eshell-buffered-print  <span style="color: #183691;">"\n"</span>)
     (add-text-properties 0 (length image-fpath)
                          `(display ,(create-image image-fpath)
                                    modification-hooks
                                    (iimage-modification-hook))
                          image-fpath)
     (eshell-buffered-print image-fpath)
     (eshell-flush))))
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/wizard-zines-comics-eshell-util/ecomic.gif" alt="ecomic.gif" width="75%" height="75%"></img></p>
</div>

 <p>
comments on  <a href="https://twitter.com/xenodium/status/1198542659704504321">twitter</a>
</p>
</div>

 <div id="outline-container-org29b569b" class="outline-3">
 <h3 id="org29b569b">Updates</h3>
 <div class="outline-text-3" id="text-org29b569b">
 <ul class="org-ul"> <li>Tweaked title.</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/wizard-zines-comics-eshell-util/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/wizard-zines-comics-eshell-util/index.html</guid>
  <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emacs counsel default search switches</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org565548b" class="outline-2">
 <h2 id="emacs-counsel-default-search-switches"> <span class="timestamp-wrapper"> <span class="timestamp">21 November 2019</span></span> Emacs counsel default search switches</h2>
 <div class="outline-text-2" id="text-emacs-counsel-default-search-switches">
 <p>
Following up from  <a href="http://xenodium.com/enhanced-emacs-searching-with-counsel-switches">Enhanced Emacs searching with counsel switches</a>, rather than remembering  <a href="https://github.com/ggreer/the_silver_searcher">silver searcher</a> and  <a href="https://github.com/BurntSushi/ripgrep">ripgrep</a> switches, we can use  <a href="https://github.com/abo-abo/swiper">counsel's</a>  <i>ivy-initial-inputs-alist</i> to set these up as default visible switches.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">push</span> '(counsel-ag .  <span style="color: #183691;">"--file-search-regex '' -- "</span>) ivy-initial-inputs-alist)
( <span style="color: #a71d5d;">push</span> '(counsel-rg .  <span style="color: #183691;">"--glob '**' -- "</span>) ivy-initial-inputs-alist)
</pre>
</div>

 <p>
The default switches stay out of the way in typical searches, but can be easily modified to include (or exclude) results matching specific file  <i>names</i>.
</p>


 <div class="figure">
 <p> <img src="../images/emacs-counsel-default-search-switches/default-switches.gif" alt="default-switches.gif" width="75%" height="75%"></img></p>
</div>

 <p>
comments on  <a href="https://twitter.com/xenodium/status/1197673205688864768?s=20">twitter</a></p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-counsel-default-search-switches/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-counsel-default-search-switches/index.html</guid>
  <pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emacs org block company completion</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org78e4401" class="outline-2">
 <h2 id="emacs-org-block-company-completion"> <span class="timestamp-wrapper"> <span class="timestamp">10 November 2019</span></span> Emacs org block company completion</h2>
 <div class="outline-text-2" id="text-emacs-org-block-company-completion">
 <p>
Back in 2015, I bound the "<" key to a hydra for quickly inserting org blocks. The idea came from Oleg's post on  <a href="https://oremacs.com/2015/03/07/hydra-org-templates/">org-mode block templates in Hydra</a>. The suggested binding settled in my muscle memory without much effort.
</p>

 <p>
Fast forward to Febrary 2019. I replaced the hydra with  <i> <a href="https://orgmode.org/manual/Easy-templates.html">org-insert-structure-template</a></i> when  <i>org-try-structure-completion</i> was removed from org mode. No biggie, as I kept the same binding to "<" and hardly noticed the change.
</p>

 <p>
Since my primary use-case for easy templates is inserting  <a href="https://orgmode.org/manual/Working-with-source-code.html">source blocks</a>, I was keen to expedite choosing the source language as well as inserting the source block itself.
</p>

 <p>
Writing a small  <a href="https://company-mode.github.io/">company mode</a> completion backend fits my primary use-case pretty well.
</p>


 <div class="figure">
 <p> <img src="../images/emacs-org-block-company-completion/company-org-block.gif" alt="company-org-block.gif" width="50%" height="50%"></img></p>
</div>

 <p>
The company backend looks as follow ( <b>Warning:</b>  <a href="https://twitter.com/tpanum/status/1197772426072997888">Snippet needs Org v9.2</a>):
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">map</span>)
( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">org</span>)
( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">seq</span>)

( <span style="color: #a71d5d;">defvar</span>  <span style="color: #333333;">company-org-block-bol-p</span> t  <span style="color: #183691;">"If t, detect completion when at</span>
 <span style="color: #183691;">begining of line, otherwise detect completion anywhere."</span>)

( <span style="color: #a71d5d;">defvar</span>  <span style="color: #333333;">company-org--regexp</span>  <span style="color: #183691;">"<</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">[</span> <span style="color: #a71d5d;">^</span> <span style="color: #183691;"> ]*</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">"</span>)

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-org-block</span> (command  <span style="color: #0086b3;">&optional</span> arg  <span style="color: #0086b3;">&rest</span> ignored)
   <span style="color: #183691;">"Complete org babel languages into source blocks."</span>
  ( <span style="color: #a71d5d;">interactive</span> (list 'interactive))
  ( <span style="color: #a71d5d;">cl-case</span> command
    ( <span style="color: #a71d5d;">interactive</span> (company-begin-backend 'company-org-block))
    (prefix ( <span style="color: #a71d5d;">when</span> (derived-mode-p 'org-mode)
              (company-org-block--grab-symbol-cons)))
    (candidates (company-org-block--candidates arg))
    (post-completion
     (company-org-block--expand arg))))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-org-block--candidates</span> (prefix)
   <span style="color: #183691;">"Return a list of org babel languages matching PREFIX."</span>
  (seq-filter ( <span style="color: #a71d5d;">lambda</span> (language)
                (string-prefix-p prefix language))
               <span style="color: #969896;">;; </span> <span style="color: #969896;">Flatten `</span> <span style="color: #0086b3;">org-babel-load-languages</span> <span style="color: #969896;">' and</span>
               <span style="color: #969896;">;; </span> <span style="color: #969896;">`</span> <span style="color: #0086b3;">org-structure-template-alist</span> <span style="color: #969896;">', join, and sort.</span>
              (seq-sort
               #'string-lessp
               (append
                (mapcar #'prin1-to-string
                        (map-keys org-babel-load-languages))
                (map-values org-structure-template-alist)))))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-org-block--template-p</span> (template)
  (seq-contains (map-values org-structure-template-alist)
                template))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-org-block--expand</span> (insertion)
   <span style="color: #183691;">"Replace INSERTION with actual source block."</span>
  (delete-region (point) (- (point) (1+  <span style="color: #969896;">;; </span> <span style="color: #969896;">Include "<" in length.</span>
                                     (length insertion))))
  ( <span style="color: #a71d5d;">if</span> (company-org-block--template-p insertion)
      (company-org-block--wrap-point insertion
                                      <span style="color: #969896;">;; </span> <span style="color: #969896;">May be multiple words.</span>
                                      <span style="color: #969896;">;; </span> <span style="color: #969896;">Take the first one.</span>
                                     (nth 0 (split-string insertion)))
    (company-org-block--wrap-point (format  <span style="color: #183691;">"src %s"</span> insertion)
                                    <span style="color: #183691;">"src"</span>)))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-org-block--wrap-point</span> (begin end)
   <span style="color: #183691;">"Wrap point with block using BEGIN and END.  For example:</span>
 <span style="color: #183691;">#+begin_BEGIN</span>
 <span style="color: #183691;">  |</span>
 <span style="color: #183691;">#+end_END"</span>
  (insert (format  <span style="color: #183691;">"#+begin_%s\n"</span> begin))
  (insert (make-string org-edit-src-content-indentation ?\s))
   <span style="color: #969896;">;; </span> <span style="color: #969896;">Saving excursion restores point to location inside code block.</span>
  ( <span style="color: #a71d5d;">save-excursion</span>
    (insert (format  <span style="color: #183691;">"\n#+end_%s"</span> end))))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-org-block--grab-symbol-cons</span> ()
   <span style="color: #183691;">"Return cons with symbol and t whenever prefix of < is found.</span>
 <span style="color: #183691;">For example: \"<e\" -> (\"e\" . t)"</span>
  ( <span style="color: #a71d5d;">when</span> (looking-back ( <span style="color: #a71d5d;">if</span> company-org-block-bol-p
                          (concat  <span style="color: #183691;">"^"</span> company-org--regexp)
                        company-org--regexp)
                      (line-beginning-position))
    (cons (match-string-no-properties 1) t)))
</pre>
</div>

 <p>
To use, add the backend enable  <i>company-mode</i> in  <i>org-mode</i>:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(add-to-list 'company-backends 'company-org-block)
(company-mode +1)
</pre>
</div>
</div>

 <div id="outline-container-org791115b" class="outline-3">
 <h3 id="org791115b">Updates</h3>
 <div class="outline-text-3" id="text-org791115b">
 <ul class="org-ul"> <li>Removed language-specific header logic (use  <i> <a href="https://www.orgmode.org/worg/org-contrib/babel/header-args.html">org-babel-default-header-args</a></i> instead).</li>
 <li>Also completes non-source block templates from  <a href="https://orgmode.org/manual/Easy-templates.html">org-structure-template-alist</a>.</li>
 <li>Source in my  <a href="https://github.com/xenodium/dotsies/blob/master/emacs/ar/company-org-block.el">dot files</a>.</li>
 <li>Removed unnecessary binding. Just add company backend as usual.</li>
 <li>Thanks to  <a href="https://twitter.com/takaxp">Takaaki Ishikawa</a> for  <a href="https://twitter.com/takaxp/status/1195884481535561729?s=20">suggesting `org-edit-src-content-indentation'</a>.</li>
 <li>Thanks to  <a href="https://twitter.com/tpanum">Thomas Kobber</a> for  <a href="https://twitter.com/xenodium/status/1194224168709083137">highlighting incompatibility</a> with older org versions.</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-org-block-company-completion/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-org-block-company-completion/index.html</guid>
  <pubDate>Sun, 10 Nov 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Enhanced Emacs searching with counsel switches</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org445194e" class="outline-2">
 <h2 id="enhanced-emacs-searching-with-counsel-switches"> <span class="timestamp-wrapper"> <span class="timestamp">10 November 2019</span></span> Enhanced Emacs searching with counsel switches</h2>
 <div class="outline-text-2" id="text-enhanced-emacs-searching-with-counsel-switches">
 <p>
The  <a href="https://github.com/abo-abo/swiper">counsel</a> family of Emacs search commands are great for searching the filesystem. More specifically,  <i>counsel-rg</i>,  <i>counsel-ag</i>, and  <i>counsel-pt</i>, which use the popular  <a href="https://github.com/BurntSushi/ripgrep">ripgrep</a>,  <a href="https://github.com/ggreer/the_silver_searcher">silver searcher</a>, and  <a href="https://github.com/monochromegane/the_platinum_searcher">platinum searcher</a> utilities.
</p>

 <p>
counsel-rg is my default searcher. It returns results quickly, with live updates as I tweak the search query.
</p>

 <p>
Up until recently, my queries typically matched text in files only. This works great, but every so often I wished I could amend the query to include (or exclude) results matching specific file  <i>names</i>. Turns out, you can prepend the search query with additional switches using the "–" separator.
</p>

 <p>
The switches are usually utility-specific, but if we wanted to keep results from file names matching a glob, we can prepend the ripgrep query with something like  <i>"–glob Make* –"</i> or the shorter version  <i>"-g Make* –"</i>.
</p>

 <p>
rg: -g Make* – install
</p>


 <div class="figure">
 <p> <img src="../images/enhanced-emacs-searching-with-counsel-switches/counsel-rg-switch.gif" alt="counsel-rg-switch.gif" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/enhanced-emacs-searching-with-counsel-switches/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/enhanced-emacs-searching-with-counsel-switches/index.html</guid>
  <pubDate>Sun, 10 Nov 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>A more reusable Emacs shell-command history</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org5941dc4" class="outline-2">
 <h2 id="more-reusable-emacs-shell-command-history"> <span class="timestamp-wrapper"> <span class="timestamp">03 November 2019</span></span> A more reusable Emacs shell-command history</h2>
 <div class="outline-text-2" id="text-more-reusable-emacs-shell-command-history">
 <p>
 <a href="https://twitter.com/camdez">Cameron Desautel</a> has a great post on  <a href="https://engineering.collbox.co/post/working-faster-in-emacs-by-reading-the-future/">Working Faster in Emacs by Reading the "Future"</a>, highlighting  <i>M-n</i>'s usefulness for inserting minibuffer default values.
</p>

 <p>
Invoking  <i>M-n</i> in  <i>shell-command</i>'s prompt is handy for quickly getting the current buffer's file name. This works great for one-off shell commands like  <i>"chmod +x script.sh"</i> or  <i>"tidy -xml -i -m data.xml"</i>. Unfortunately, these commands aren't easily reusable from  <i>shell-command</i>'s minibuffer history, since it'll keep hardcoded file names.
</p>

 <p>
There's likely existing built-in functionality or a more elaborate package for this, but advising  <i>read-shell-command</i> enables us to write more reusable commands like  <i>"chmod +x $f"</i> or  <i>"tidy -xml -i -m $f".</i> We merely replace  <i>$f</i> with  <i>(buffer-file-name)</i>, and let everything else continue as usual.
</p>


 <div class="figure">
 <p> <img src="../images/more-reusable-emacs-shell-command-history/expanded-shell-command.png" alt="expanded-shell-command.png" width="50%" height="50%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/adviced-read-shell-command</span> (orig-fun  <span style="color: #0086b3;">&rest</span> r)
   <span style="color: #183691;">"Advice around `</span> <span style="color: #0086b3;">read-shell-command</span> <span style="color: #183691;">' to replace $f with buffer file name."</span>
  ( <span style="color: #a71d5d;">let</span> ((command (apply orig-fun r)))
    ( <span style="color: #a71d5d;">if</span> (string-match-p  <span style="color: #183691;">"\\$f"</span> command)
        (replace-regexp-in-string  <span style="color: #183691;">"\\$f"</span>
                                  ( <span style="color: #a71d5d;">or</span> (buffer-file-name)
                                      ( <span style="color: #333333;">user-error</span>  <span style="color: #183691;">"No file file visited to replace $f"</span>))
                                  command)
      command)))

(advice-add 'read-shell-command
             <span style="color: #a71d5d;">:around</span>
            'ar/adviced-read-shell-command)
</pre>
</div>

 <p>
It's worth mentioning that searching minibuffer history is pretty simple when leveraging  <a href="https://github.com/abo-abo/swiper">counsel</a> to fuzzy search (via  <i>counsel-minibuffer-history</i>, bound to  <i>C-r</i> by default).
</p>


 <div class="figure">
 <p> <img src="../images/more-reusable-emacs-shell-command-history/richer-shell-command-history.gif" alt="richer-shell-command-history.gif" width="50%" height="50%"></img></p>
</div>

 <p>
On a final note, searching minibuffer history for cache hits is way more useful with richer history content. Be sure to save minibuffer history across Emacs sessions and increase  <i>shell-command-history</i> using the built-in  <a href="https://www.emacswiki.org/emacs/SaveHist">savehist-mode</a>.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">savehist</span>
   <span style="color: #a71d5d;">:custom</span>
  (savehist-file  <span style="color: #183691;">"~/.emacs.d/savehist"</span>)
  (savehist-save-minibuffer-history t)
  (history-length 10000)
  (savehist-additional-variables
   '(shell-command-history))
   <span style="color: #a71d5d;">:config</span>
  (savehist-mode +1))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/more-reusable-emacs-shell-command-history/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/more-reusable-emacs-shell-command-history/index.html</guid>
  <pubDate>Sun, 03 Nov 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emacs swiper and multiple cursors</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org50b78cb" class="outline-2">
 <h2 id="emacs-swiper-and-multiple-cursors"> <span class="timestamp-wrapper"> <span class="timestamp">10 October 2019</span></span> Emacs swiper and multiple cursors</h2>
 <div class="outline-text-2" id="text-emacs-swiper-and-multiple-cursors">
 <p>
Emacs  <a href="https://github.com/abo-abo/swiper">swiper</a> is awesome. I bound  <i>swiper-isearch</i> to  <i>C-s</i>. Also a big fan of  <a href="https://github.com/magnars/multiple-cursors.el">multiple cursors</a>. I use it regularly (it's fun).
</p>

 <p>
I had totally missed Ole's post back in 2015:  <a href="https://oremacs.com/2015/10/14/swiper-mc/">A simple multiple-cursors extension to swiper</a>. Turns out, swiper has multiple cursors support out of the box (bound to  <i>C-7</i> by default). Yay!
</p>

 <p>
UPDATE: Thanks to  <a href="https://irreal.org/blog/?p=8370">irreal's post</a>, please remember to add  <i>swiper-mc</i> to  <i>mc/cmds-to-run-once</i> list (or things won't work as expected). This typically happens interactively when you invoke C-7 the first time around. Make sure you answer "n" when you see a prompt like:
</p>


 <div class="figure">
 <p> <img src="../images/emacs-swiper-and-multiple-cursors/swiper-mc-no.png" alt="swiper-mc-no.png" width="50%" height="50%"></img></p>
</div>

 <p>
If you happen to choose "y" by mistake, take a look at  <b>~/.emacs.d/.mc-lists.el</b> to correct it. Remove  <i>swiper-mc</i> from  <i>mc/cmds-to-run-for-all</i>
 and add it to  <i>mc/cmds-to-run-once</i>. Invoke  <i>m-x eval-buffer</i> to reset the values and you're good to go.
</p>


 <div class="figure">
 <p> <img src="../images/emacs-swiper-and-multiple-cursors/swipermc.gif" alt="swipermc.gif" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-swiper-and-multiple-cursors/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-swiper-and-multiple-cursors/index.html</guid>
  <pubDate>Thu, 10 Oct 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Spam blacklisting with Emacs org babel</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org4b80200" class="outline-2">
 <h2 id="spam-blacklisting-with-emacs-org-babel"> <span class="timestamp-wrapper"> <span class="timestamp">08 October 2019</span></span> Spam blacklisting with Emacs org babel</h2>
 <div class="outline-text-2" id="text-spam-blacklisting-with-emacs-org-babel">
 <p>
Some email provider accept regular expressions to blacklist additional spam. My blacklist is long and tedious to update, but hey… Emacs org babel can simplify things here.
</p>

 <p>
It's way easier to maintain a blacklist (with no regex) using an org table.
</p>
</div>

 <div id="outline-container-org60e5e24" class="outline-3">
 <h3 id="org60e5e24">Blacklist</h3>
 <div class="outline-text-3" id="text-org60e5e24">
 <div class="org-src-container">
 <pre class="src src-org">#+name: spam-entries
| .spammy                |
| dodgyfella@hotmail.com |
| henryzeespammer.com    |
| yumspam.com            |
</pre>
</div>

 <p>
and subsequently use org babel (elisp snippet) to generate the regex.
</p>
</div>
</div>

 <div id="outline-container-orgb82e7f6" class="outline-3">
 <h3 id="orgb82e7f6">Regex gen</h3>
 <div class="outline-text-3" id="text-orgb82e7f6">
 <div class="org-src-container">
 <pre class="src src-org">#+begin_src emacs-lisp :var rows=spam-entries
  (require 'dash)
  (require 's)

  (concat "^"
          (s-join "|"
                  (mapcar (lambda (entry)
                            (setq entry (regexp-quote
                                         (s-trim entry)))
                            (assert (s-present? entry))
                            (cond
                             ;; Blacklist email address: joe@spammer.spammy
                             ((s-contains-p "@" entry)
                              (format "(%s)" entry))
                             ;; Blacklist top-level domain: .spammy
                             ((s-starts-with-p "\\." entry)
                              (format "([^.]*%s)" entry))
                             ;; Blacklist domain: @spammer.spammy
                             (t
                              (format "(.*@%s)" entry))))
                          (-sort
                           'string<
                           (-map (lambda (row)
                                   (nth 0 row))
                                 rows))))
          "$")

#+end_src

#+RESULTS:
: ^([^.]*\.spammy)|(dodgyfella@hotmail\.com)|(.*@henryzeespammer\.com)|(.*@yumspam\.com)$
</pre>
</div>

 <p>
UPDATE: Tweaked elisp and regex (but not animation) also found John Bokma's post:  <a href="http://johnbokma.com/blog/2019/05/13/blacklisting-domains-with-postfix.html">Blacklisting domains with Postfix</a>.
</p>


 <div class="figure">
 <p> <img src="../images/spam-blacklisting-with-emacs-org-babel/blacklist.png" alt="blacklist.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/spam-blacklisting-with-emacs-org-babel/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/spam-blacklisting-with-emacs-org-babel/index.html</guid>
  <pubDate>Tue, 08 Oct 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Rewriting dates with Emacs multiple cursors</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgd63e09e" class="outline-2">
 <h2 id="rewriting-dates-with-emacs-multiple-cursors"> <span class="timestamp-wrapper"> <span class="timestamp">06 October 2019</span></span> Rewriting dates with Emacs multiple cursors</h2>
 <div class="outline-text-2" id="text-rewriting-dates-with-emacs-multiple-cursors">
 <p>
Needed to rewrite the date format in a couple of csv columns. Emacs multiple cursors helps here, but needed a function to parse and reformat the dates themselves.
</p>

 <p>
I can likely reformat dates using the built-in  <i>parse-time-string</i> and  <i>format-time-string</i> functions, but hey why not give the  <a href="https://github.com/alphapapa/ts.el">ts.el</a> library a try…
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/region-to-timestamp</span> ()
   <span style="color: #183691;">"Convert date like \"29 Apr 2019\" to \"2019-04-29\"."</span>
  ( <span style="color: #a71d5d;">interactive</span>)
  ( <span style="color: #a71d5d;">let</span> ((date (ts-parse (buffer-substring
                         (region-beginning)
                         (region-end)))))
    (delete-region (region-beginning)
                   (region-end))
    (insert (ts-format  <span style="color: #183691;">"%Y-%m-%d"</span> date))))
</pre>
</div>

 <p>
Bound the new function to a temporary keybinding, so I can invoke from multiple cursors:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">bind-key</span>  <span style="color: #183691;">"M-q"</span> #'ar/region-to-timestamp)
</pre>
</div>

 <p>
and voila!
</p>


 <div class="figure">
 <p> <img src="../images/rewriting-dates-with-emacs-multiple-cursors/ts.gif" alt="ts.gif" width="40%" height="40%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/rewriting-dates-with-emacs-multiple-cursors/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/rewriting-dates-with-emacs-multiple-cursors/index.html</guid>
  <pubDate>Sun, 06 Oct 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Show/hide Emacs dired details in style</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgc150da5" class="outline-2">
 <h2 id="showhide-emacs-dired-details-in-style"> <span class="timestamp-wrapper"> <span class="timestamp">05 October 2019</span></span> Show/hide Emacs dired details in style</h2>
 <div class="outline-text-2" id="text-showhide-emacs-dired-details-in-style">
 <p>
Emacs  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html">dired</a> is a powerful directory browser/editor. By default, it shows lots of handy file and directory details.
</p>


 <div class="figure">
 <p> <img src="../images/showhide-emacs-dired-details-in-style/dired.png" alt="dired.png" width="75%" height="75%"></img></p>
</div>

 <p>
I typically prefer hiding file and directory details until I need them. The built-in  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Misc-Dired-Features.html">dired-hide-details-mode</a> makes this easy with the "(" key toggle. Coupled with  <a href="https://twitter.com/sanityinc">Steve Purcell</a>'s  <a href="https://github.com/purcell/diredfl">diredfl</a> (for coloring), it strikes a great user experience.
</p>


 <div class="figure">
 <p> <img src="../images/showhide-emacs-dired-details-in-style/diredfl.gif" alt="diredfl.gif" width="75%" height="75%"></img></p>
</div>

 <p>
With a short snippet, you can also show/hide dired details in style:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">dired</span>
   <span style="color: #a71d5d;">:hook</span> (dired-mode . dired-hide-details-mode)
   <span style="color: #a71d5d;">:config</span>
   <span style="color: #969896;">;; </span> <span style="color: #969896;">Colourful columns.</span>
  ( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">diredfl</span>
     <span style="color: #a71d5d;">:ensure</span> t
     <span style="color: #a71d5d;">:config</span>
    (diredfl-global-mode 1)))
</pre>
</div>

 <p>
 <b>UPDATE:</b> Thanks to  <a href="https://twitter.com/dmartincy">Daniel Martín</a>, who  <a href="https://twitter.com/dmartincy/status/1180512330288975872">pointed me</a> to  <a href="https://github.com/clemera/dired-git-info">dired-git-info</a>. This package adds git logs to dired file and directory details.
</p>


 <div class="figure">
 <p> <img src="../images/showhide-emacs-dired-details-in-style/dired-git-info.gif" alt="dired-git-info.gif" width="90%" height="90%"></img></p>
</div>

 <p>
Binding  <i>dired-git-info-mode</i> to ")" is a nice complement to  <i>dired-hide-details-mode</i>'s "(" binding.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">dired-git-info</span>
     <span style="color: #a71d5d;">:ensure</span> t
     <span style="color: #a71d5d;">:bind</span> ( <span style="color: #a71d5d;">:map</span> dired-mode-map
                ( <span style="color: #183691;">")"</span> . dired-git-info-mode)))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/showhide-emacs-dired-details-in-style/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/showhide-emacs-dired-details-in-style/index.html</guid>
  <pubDate>Sat, 05 Oct 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Speeding up Emacs tramp via ControlMaster</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org0e13f83" class="outline-2">
 <h2 id="speeding-up-emacs-tramp-via-controlmaster"> <span class="timestamp-wrapper"> <span class="timestamp">01 September 2019</span></span> Speeding up Emacs tramp via ControlMaster</h2>
 <div class="outline-text-2" id="text-speeding-up-emacs-tramp-via-controlmaster">
 <p>
Via  <a href="https://gist.github.com/ralt/a36288cd748ce185b26237e6b85b27bb">Florian Margaine's Eshell config</a>, I discovered ssh's  <a href="https://man.openbsd.org/ssh_config#ControlMaster">ControlMaster</a>. It enables sharing multiple sessions over a single network connection. This has the benefit of speeding up Emacs TRAMP.
</p>

 <p>
In your ~/.ssh/config add:
</p>

 <div class="org-src-container">
 <pre class="src src-fundamental">Host *
    ControlPath ~/.ssh/master-%h:%p
    ControlMaster auto
    ControlPersist 10m
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/speeding-up-emacs-tramp-via-controlmaster/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/speeding-up-emacs-tramp-via-controlmaster/index.html</guid>
  <pubDate>Sun, 01 Sep 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>gnu global, ctags, and Emacs setup</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org0c9d99a" class="outline-2">
 <h2 id="gnu-global-ctags-and-emacs-setup"> <span class="timestamp-wrapper"> <span class="timestamp">04 June 2019</span></span> gnu global, ctags, and Emacs setup</h2>
 <div class="outline-text-2" id="text-gnu-global-ctags-and-emacs-setup">
 <p>
Install gnu global (ensure homebrew uses –with-exuberant-ctags flag).
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew install global
brew install ctags
pip install pygments
</pre>
</div>

 <p>
.ctags
</p>

 <div class="org-src-container">
 <pre class="src src-fundamental">--langdef=swift
--langmap=swift:.swift
--regex-swift=/[[:<:]]class[[:>:]][[:space:]]+([[:alnum:]_]+)/\1/c,class/
--regex-swift=/[[:<:]]enum[[:>:]][[:space:]]+([[:alnum:]_]+)/\1/e,enum/
--regex-swift=/[[:<:]]func[[:>:]][[:space:]]+([[:alnum:]_]+)/\1/f,function/
--regex-swift=/[[:<:]]protocol[[:>:]][[:space:]]+([[:alnum:]_]+)/\1/P,protocol/
--regex-swift=/[[:<:]]struct[[:>:]][[:space:]]+([[:alnum:]_]+)/\1/s,struct/
--regex-swift=/[[:<:]]typealias[[:>:]][[:space:]]+([[:alnum:]_]+)/\1/t,typealias/
</pre>
</div>

 <p>
.globalrc
</p>

 <div class="org-src-container">
 <pre class="src src-fundamental">default:\
    :tc=pygments:

ctags:\
    :tc=exuberant-ctags:

exuberant-ctags|plugin-example|setting to use Exuberant Ctags plug-in parser:\
    :tc=common:\
    :ctagscom=ctags:\
    :ctagslib=$libdir/gtags/exuberant-ctags.la:\
    :langmap=Swift\:.swift:\
    :gtags_parser=Swift\:$ctagslib:

pygments:\
    :tc=pygments-parser:

pygments-parser|Pygments plug-in parser:\
    :langmap=Swift\:.swift:\
    :gtags_parser=Swift\:$pygmentslib:\
    :langmap=Common-Lisp\:.cl.lisp.el:\
    :gtags_parser=Common-Lisp\:$pygmentslib:\
    :langmap=Python\:.py.pyw.sc.tac.sage:\
    :gtags_parser=Python\:$pygmentslib:\
    :langmap=Ruby\:.rb.rbw.rake.gemspec.rbx.duby:\
    :gtags_parser=Ruby\:$pygmentslib:\
    :langmap=Objective-C++\:.mm.hh:\
    :gtags_parser=Objective-C++\:$pygmentslib:\
    :langmap=Objective-C\:.m.h:\
    :gtags_parser=Objective-C\:$pygmentslib:\
    :ctagscom=ctags:\
    :pygmentslib=$libdir/gtags/pygments-parser.la:\
    :tc=common:

common:\
    :skip=build/,HTML/,HTML.pub/,tags,TAGS,ID,y.tab.c,y.tab.h,gtags.files,cscope.files,cscope.out,cscope.po.out,cscope.in.out,SCCS/,RCS/,CVS/,CVSROOT/,{arch}/,autom4te.cache/,*.orig,*.rej,*.bak,*~,#*#,*.swp,*.tmp,*_flymake.*,*_flymake,*.o,*.a,*.so,*.lo,*.zip,*.gz,*.bz2,*.xz,*.lzh,*.Z,*.tgz,*.min.js,*min.css:
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">counsel-gtags</span>
   <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:commands</span> counsel-gtags-mode
   <span style="color: #a71d5d;">:bind</span> ( <span style="color: #a71d5d;">:map</span>
         counsel-gtags-mode-map
         ( <span style="color: #183691;">"M-."</span> . counsel-gtags-dwim)
         ( <span style="color: #183691;">"M-,"</span> . counsel-gtags-go-backward))
   <span style="color: #a71d5d;">:hook</span> ((swift-mode . counsel-gtags-mode)
         (swift-mode . ggtags-mode)))

 <span style="color: #969896;">;; </span> <span style="color: #969896;">Needs .ctags and .globalrc in $HOME.</span>
( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">ggtags</span>
   <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:commands</span> ggtags-mode)
</pre>
</div>

 <p>
Helpful references
</p>

 <p>
 <a href="https://github.com/osdakira/dotfiles/blob/395640726d669674496a8035458840f0742e54a5/gtags.conf">https://github.com/osdakira/dotfiles/blob/395640726d669674496a8035458840f0742e54a5/gtags.conf</a>
 <a href="https://github.com/NicholasTD07/dotfiles/blob/e66eb05b408fbcb0d47994fc8a0a79bf438b9e03/.globalrc">https://github.com/NicholasTD07/dotfiles/blob/e66eb05b408fbcb0d47994fc8a0a79bf438b9e03/.globalrc</a>
 <a href="https://github.com/NicholasTD07/dotfiles/blob/master/.ctags">https://github.com/NicholasTD07/dotfiles/blob/master/.ctags</a>
 <a href="https://github.com/sg2002/gtags.conf-tutorial/blob/master/gtags.conf">https://github.com/sg2002/gtags.conf-tutorial/blob/master/gtags.conf</a>
 <a href="https://aozsky.com/swift/swift_ide">https://aozsky.com/swift/swift_ide</a>
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/gnu-global-ctags-and-emacs-setup/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/gnu-global-ctags-and-emacs-setup/index.html</guid>
  <pubDate>Tue, 04 Jun 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>mu4e as macOS mail composer</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org42858b0" class="outline-2">
 <h2 id="mu4e-as-macos-mail-composer"> <span class="timestamp-wrapper"> <span class="timestamp">29 May 2019</span></span> mu4e as macOS mail composer</h2>
 <div class="outline-text-2" id="text-mu4e-as-macos-mail-composer">
 <p>
Via  <a href="https://www.reddit.com/r/emacs/comments/6lh2pp/using_emacs_as_default_mailer_on_macos">Using Emacs as Default Mailer on macOS</a>, a tiny script to handle mailto: links.
</p>

 <p>
From  <i>/Script Editor</i>, save following script as Application (MailOnEmacs.app). From Mail.app,  <i>Preferences -> Default email reader</i> and chosse MailOnEmacs.app.
</p>

 <div class="org-src-container">
 <pre class="src src-applescript"> <span style="color: #a71d5d;">on</span>  <span style="color: #795da3;">open</span> location myurl
         <span style="color: #a71d5d;">tell</span>  <span style="color: #a71d5d;">application</span>  <span style="color: #183691;">"Emacs"</span>  <span style="color: #a71d5d;">to</span>  <span style="color: #a71d5d;">activate</span>
         <span style="color: #a71d5d;">set</span> text item delimiters  <span style="color: #a71d5d;">to</span> { <span style="color: #183691;">":"</span>}
        do shell script  <span style="color: #183691;">"/path/to/emacsclient --eval '(browse-url-mail \"" & myurl & "</span>\ <span style="color: #183691;">")'"</span>
 <span style="color: #a71d5d;">end</span> open location
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/mu4e-as-macos-mail-composer/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/mu4e-as-macos-mail-composer/index.html</guid>
  <pubDate>Wed, 29 May 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Plotting ledger reports in org</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orge1414c7" class="outline-2">
 <h2 id="plotting-ledger-reports-in-org"> <span class="timestamp-wrapper"> <span class="timestamp">24 May 2019</span></span> Plotting ledger reports in org</h2>
 <div class="outline-text-2" id="text-plotting-ledger-reports-in-org">
</div>
 <div id="outline-container-orgf5130e1" class="outline-3">
 <h3 id="orgf5130e1">My ledger file</h3>
 <div class="outline-text-3" id="text-orgf5130e1">
 <p>
Save path to  <a href="plotting-ledger-reports-in-org/my.ledger">my.ledger</a> in  <i>ledger-file</i> block.
</p>

 <div class="org-src-container">
 <pre class="src src-org">#+name: ledger-file
#+begin_src emacs-lisp
"my.ledger"
#+end_src
</pre>
</div>
</div>
</div>

 <div id="outline-container-orga961997" class="outline-3">
 <h3 id="orga961997">gnuplot terminal (png or qt)</h3>
 <div class="outline-text-3" id="text-orga961997">
 <p>
Select gnuplot terminal. Using png to output images, but qt is handy too for interactive chart inspection.
</p>

 <div class="org-src-container">
 <pre class="src src-org">Use png for inline or qt for interactive
#+name: gnuplot-term
#+begin_src emacs-lisp
"png"
#+end_src
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgad13950" class="outline-3">
 <h3 id="orgad13950">Monthly Income and Expenses</h3>
 <div class="outline-text-3" id="text-orgad13950">
 <p>
Generate income report.
</p>

 <div class="org-src-container">
 <pre class="src src-org">#+name: income-data
#+begin_src bash :results table :noweb yes
  ledger -f <<<ledger-file>>> -j reg ^Income -M --collapse --plot-amount-format="%(format_date(date, \"%Y-%m-%d\")) %(abs(quantity(scrub(display_amount))))\n"
#+end_src
</pre>
</div>

 <p>
Generate expenses report.
</p>

 <div class="org-src-container">
 <pre class="src src-org">#+name: expenses-data
#+begin_src sh :results table :noweb yes
  ledger -f <<<ledger-file>>> -j reg ^Expenses -M --collapse
#+end_src
</pre>
</div>

 <p>
Plot income vs expenses.
</p>

 <div class="org-src-container">
 <pre class="src src-gnuplot"> <span style="color: #0086b3;">set</span> terminal myterm size 3500,1500
 <span style="color: #0086b3;">set</span> style data histogram
 <span style="color: #0086b3;">set</span> style histogram clustered gap 1
 <span style="color: #0086b3;">set</span> style fill transparent solid 0.4 noborder
 <span style="color: #0086b3;">set</span> xtics nomirror scale 0 center
 <span style="color: #0086b3;">set</span> ytics add ( <span style="color: #183691;">''</span> 0) scale 0
 <span style="color: #0086b3;">set</span> border 1
 <span style="color: #0086b3;">set</span> grid ytics
 <span style="color: #0086b3;">set</span>  <span style="color: #0086b3;">title</span>  <span style="color: #183691;">"Monthly Income and Expenses"</span>
 <span style="color: #0086b3;">set</span> ylabel  <span style="color: #183691;">"Amount"</span>
 <span style="color: #a71d5d;">plot</span> income  <span style="color: #0086b3;">using</span> 2:xticlabels( <span style="color: #795da3;">strftime</span>( <span style="color: #183691;">'%b'</span>,  <span style="color: #795da3;">strptime</span>( <span style="color: #183691;">'%Y-%m-%d'</span>, strcol(1))))  <span style="color: #0086b3;">title</span>  <span style="color: #183691;">"Income"</span>  <span style="color: #0086b3;">linecolor</span> rgb  <span style="color: #183691;">"light-salmon"</span>,  <span style="color: #183691;">''</span>  <span style="color: #0086b3;">using</span> 0:2:2  <span style="color: #0086b3;">with</span>  <span style="color: #795da3;">labels</span> left font  <span style="color: #183691;">"Courier,8"</span> rotate by 15 offset -4,0.5 textcolor  <span style="color: #0086b3;">linestyle</span> 0  <span style="color: #0086b3;">notitle</span>, expenses  <span style="color: #0086b3;">using</span> 2  <span style="color: #0086b3;">title</span>  <span style="color: #183691;">"Expenses"</span>  <span style="color: #0086b3;">linecolor</span> rgb  <span style="color: #183691;">"light-green"</span>,  <span style="color: #183691;">''</span>  <span style="color: #0086b3;">using</span> 0:2:2  <span style="color: #0086b3;">with</span>  <span style="color: #795da3;">labels</span> left font  <span style="color: #183691;">"Courier,8"</span> rotate by 15 offset 0,0.5 textcolor  <span style="color: #0086b3;">linestyle</span> 0  <span style="color: #0086b3;">notitle</span>
</pre>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/plotting-ledger-reports-in-org/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/plotting-ledger-reports-in-org/index.html</guid>
  <pubDate>Fri, 24 May 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Batch file renaming with counsel, find-dired, and wdired</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgd5b698f" class="outline-2">
 <h2 id="batch-renaming-with-counsel-find-dired-and-wdired"> <span class="timestamp-wrapper"> <span class="timestamp">04 May 2019</span></span> Batch file renaming with counsel, find-dired, and wdired</h2>
 <div class="outline-text-2" id="text-batch-renaming-with-counsel-find-dired-and-wdired">
 <p>
The first time I saw  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Wdired.html">wdired</a> in action, it blew my mind. wdired makes  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html#Dired">dired</a> (directory editor) buffers writeable, so you can edit them like any other Emacs buffer. You can subsequently use all your favorite file-editing tricks to rename files (amongst other things). You can see it in action at the end of  <a href="http://emacsrocks.com/e16.html">Emacs Rocks episode 16</a>.
</p>

 <p>
When combining  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Dired-and-Find.html">find-dired</a> with wdired, one can easily find matching files and quickly batch rename them using something like  <a href="https://github.com/magnars/multiple-cursors.el">multiple cursors</a> or  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html">keyboard macros</a>. I've been a fan of the  <i>find-dired</i> ->  <i>dired-toggle-read-only</i> ->  <i>mc/mark-all-like-this</i> workflow for quite some time, but I always wished I could adjust  <i>find-dired</i> queries a little quicker by getting immediate feedback.
</p>

 <p>
Completion frontends like  <a href="https://github.com/abo-abo/swiper">ivy</a> and  <a href="https://github.com/emacs-helm/helm">helm</a> are perfect for getting this kind of immediate feedback. Peeking into ivy's  <a href="https://github.com/abo-abo/swiper/blob/master/counsel.el">counsel source</a>, I borrowed some ideas to glue counsel-style narrowing on a find command, which I can easily translate to a writeable dired buffer for all that joyful-mutiple-cursor-editing experience.
</p>


 <div class="figure">
 <p> <img src="../images/batch-renaming-with-counsel-find-dired-and-wdired/counsel-find.gif" alt="counsel-find.gif" width="50%" height="50%"></img></p>
</div>

 <p>
The code for  <i>ar/counsel-find</i> is a little rough but can be found at  <a href="https://github.com/xenodium/dotsies/blob/master/emacs/ar/ar-counsel-find.el">here</a>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/batch-renaming-with-counsel-find-dired-and-wdired/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/batch-renaming-with-counsel-find-dired-and-wdired/index.html</guid>
  <pubDate>Sat, 04 May 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Mark region, indent, restore location</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org1e325f2" class="outline-2">
 <h2 id="mark-region-indent-restore-location"> <span class="timestamp-wrapper"> <span class="timestamp">16 April 2019</span></span> Mark region, indent, restore location</h2>
 <div class="outline-text-2" id="text-mark-region-indent-restore-location">
 <p>
When I'm not using an automatic code formatter (ie. clang-format, gofmt, etc.), I often find myself using Emacs region marking commands like  <i>mark-defun</i>,  <i>er/expand-region</i>, and  <i>mark-whole-buffer</i> prior to pressing <tab>, which is bound to  <i>indent-for-tab-command</i>.
</p>

 <p>
This is all working as expected: the selection gets indented and the point is left in the current location.
</p>

 <p>
Say we have the following snippet we'd like to indent.
</p>


 <div class="figure">
 <p> <img src="../images/mark-region-indent-restore-location/before.png" alt="before.png"></img></p>
</div>

 <p>
Mark region with C-M-h (mark-defun)
</p>


 <div class="figure">
 <p> <img src="../images/mark-region-indent-restore-location/selection.png" alt="selection.png"></img></p>
</div>

 <p>
Indent with <tab> (indent-for-tab-command)
</p>


 <div class="figure">
 <p> <img src="../images/mark-region-indent-restore-location/basic-indent.png" alt="basic-indent.png"></img></p>
</div>

 <p>
We're done. The selected function is now indented as expected.
</p>

 <p>
But… I always wished the point returned to the location prior to initiating the region-marking command, in this case  <i>mark-defun</i>.
</p>

 <p>
In short, I wish the point had ended in the following location.
</p>


 <div class="figure">
 <p> <img src="../images/mark-region-indent-restore-location/smart-indent.png" alt="smart-indent.png"></img></p>
</div>

 <p>
I'm not aware of an existing package that helps with this, so here's a tiny minor mode (divert-mode) to help with restoring point location after indenting a region. The  <i>diverted-events</i> variable can be used to track specific region selecting commands and associate breadcrumb functions to replace the point location as needed.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp"> <span style="color: #969896;">;;; </span> <span style="color: #969896;">diverted.el --- Identify temporary diversions and automatically</span>
 <span style="color: #969896;">;;; </span> <span style="color: #969896;">move point back to original location.</span>

 <span style="color: #969896;">;;; </span> <span style="color: #969896;">Commentary:</span>
 <span style="color: #969896;">;; </span> <span style="color: #969896;">Automatically come back to a original location prior to diversion.</span>


 <span style="color: #969896;">;;; </span> <span style="color: #969896;">Code:</span>

( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">cl</span>)
( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">seq</span>)

( <span style="color: #a71d5d;">defstruct</span> diverted-event
  from  <span style="color: #969896;">;; </span> <span style="color: #969896;">Initial function (eg. 'mark-defun)</span>
  to  <span style="color: #969896;">;; </span> <span style="color: #969896;">Follow-up function (eg. 'indent-for-tab-command)</span>
  breadcrumb)

( <span style="color: #a71d5d;">defvar</span>  <span style="color: #333333;">diverted-events</span>
  (list
   (make-diverted-event  <span style="color: #a71d5d;">:from</span> 'mark-defun
                         <span style="color: #a71d5d;">:to</span> 'indent-for-tab-command
                         <span style="color: #a71d5d;">:breadcrumb</span> ( <span style="color: #a71d5d;">lambda</span> ()
                                      (diverted--pop-to-mark-command 2)))
   (make-diverted-event  <span style="color: #a71d5d;">:from</span> 'er/expand-region
                         <span style="color: #a71d5d;">:to</span> 'indent-for-tab-command
                         <span style="color: #a71d5d;">:breadcrumb</span> ( <span style="color: #a71d5d;">lambda</span> ()
                                      (diverted--pop-to-mark-command 2)))
   (make-diverted-event  <span style="color: #a71d5d;">:from</span> 'mark-whole-buffer
                         <span style="color: #a71d5d;">:to</span> 'indent-for-tab-command
                         <span style="color: #a71d5d;">:breadcrumb</span> ( <span style="color: #a71d5d;">lambda</span> ()
                                      (diverted--pop-to-mark-command 2))))
   <span style="color: #183691;">"Diversion events to look for."</span>)

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">diverted--resolve</span> (symbol)
   <span style="color: #183691;">"Resolve SYMBOL to event."</span>
  (seq-find ( <span style="color: #a71d5d;">lambda</span> (event)
              (equal symbol
                     (diverted-event-from event)))
            diverted-events))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">diverted--pop-to-mark-command</span> (n)
   <span style="color: #183691;">"Invoke `</span> <span style="color: #0086b3;">pop-to-mark-command</span> <span style="color: #183691;">' N number of times."</span>
  ( <span style="color: #a71d5d;">dotimes</span> (_ n)
    (pop-to-mark-command)))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">diverted--advice-fun</span> (orig-fun  <span style="color: #0086b3;">&rest</span> r)
   <span style="color: #183691;">"Get back to location prior to diversion using advice around `</span> <span style="color: #0086b3;">diverted-events</span> <span style="color: #183691;">' (ORIG-FUN and R)."</span>
  ( <span style="color: #a71d5d;">let</span> ((recognized-event (diverted--resolve last-command)))
    ( <span style="color: #a71d5d;">when</span> recognized-event
      (funcall (diverted-event-breadcrumb recognized-event))
      (message  <span style="color: #183691;">"Breadcrumbed prior to `</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">'"</span>
               (diverted-event-from recognized-event)))))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">diverted-mode-enable</span> ()
   <span style="color: #183691;">"Enable diverted-mode."</span>
  ( <span style="color: #a71d5d;">interactive</span>)
  (diverted-mode-disable)
  (mapc ( <span style="color: #a71d5d;">lambda</span> (event)
          (advice-add (diverted-event-to event)
                       <span style="color: #a71d5d;">:after</span>
                      'diverted--advice-fun)
          (message  <span style="color: #183691;">"Looking for `</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">' after `</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">' diversions."</span>
                   (diverted-event-to event)
                   (diverted-event-from event)))
        diverted-events)
  (message  <span style="color: #183691;">"diverted-mode enabled"</span>))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">diverted-mode-disable</span> ()
   <span style="color: #183691;">"Disable diverted-mode."</span>
  ( <span style="color: #a71d5d;">interactive</span>)
  (mapc ( <span style="color: #a71d5d;">lambda</span> (event)
          (advice-remove (diverted-event-to event)
                         'diverted--advice-fun)
          (message  <span style="color: #183691;">"Ignoring `</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">' after `</span> <span style="color: #0086b3;">%s</span> <span style="color: #183691;">' diversions."</span>
                   (diverted-event-to event)
                   (diverted-event-from event)))
        diverted-events)
  (message  <span style="color: #183691;">"diverted-mode disabled"</span>))

( <span style="color: #a71d5d;">define-minor-mode</span>  <span style="color: #795da3;">diverted-mode</span>
   <span style="color: #183691;">"Detect temporary diversions and restore point location."</span>
   <span style="color: #a71d5d;">:init-value</span> nil
   <span style="color: #a71d5d;">:lighter</span>  <span style="color: #183691;">" diverted"</span>
   <span style="color: #a71d5d;">:global</span> t
  ( <span style="color: #a71d5d;">if</span> diverted-mode
      (diverted-mode-enable)
    (diverted-mode-disable)))

( <span style="color: #a71d5d;">provide</span> ' <span style="color: #0086b3;">diverted</span>)

 <span style="color: #969896;">;;; </span> <span style="color: #969896;">diverted.el ends here</span>
</pre>
</div>

 <p>
UPDATE(2019-04-20): Source  <a href="https://github.com/xenodium/dotsies/blob/master/emacs/ar/diverted.el">on github</a>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/mark-region-indent-restore-location/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/mark-region-indent-restore-location/index.html</guid>
  <pubDate>Tue, 16 Apr 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Compound interest calculations</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgbde7c17" class="outline-2">
 <h2 id="compound-interest-calculations"> <span class="timestamp-wrapper"> <span class="timestamp">14 April 2019</span></span> Compound interest calculations</h2>
 <div class="outline-text-2" id="text-compound-interest-calculations">
 <p>
Saving  <a href="https://twitter.com/tonytechwriter">Tony Bedford's</a> python snippets for  <a href="https://coffeeandcode.neocities.org/financial-calculations-1.html">calculating compound interest</a>. Really just an excuse to fire up Emacs and play with org babel.
</p>

 <div class="org-src-container">
 <pre class="src src-python"> <span style="color: #333333;">t</span> = 20  <span style="color: #969896;"># </span> <span style="color: #969896;">years</span>
 <span style="color: #333333;">r</span> = 0.07  <span style="color: #969896;"># </span> <span style="color: #969896;">rate</span>
 <span style="color: #333333;">pv</span> = 200000.00  <span style="color: #969896;"># </span> <span style="color: #969896;">present value</span>
 <span style="color: #333333;">fv</span> = pv * (1+r)**t  <span style="color: #969896;"># </span> <span style="color: #969896;">future value</span>
 <span style="color: #a71d5d;">print</span>( <span style="color: #183691;">"Pension of %.2f at %d%% will be worth %.2f in %d years"</span> % (pv, 100 * r, fv, t))
</pre>
</div>

 <pre class="example">
Pension of 200000.00 at 7% will be worth 773936.89 in 20 years
</pre>



 <div class="org-src-container">
 <pre class="src src-python"> <span style="color: #333333;">t</span> = 20  <span style="color: #969896;"># </span> <span style="color: #969896;">years</span>
 <span style="color: #333333;">r</span> = 0.07  <span style="color: #969896;"># </span> <span style="color: #969896;">rate</span>
 <span style="color: #333333;">pv</span> = 200000.00  <span style="color: #969896;"># </span> <span style="color: #969896;">present value</span>
 <span style="color: #333333;">n</span> = 1
 <span style="color: #333333;">fv</span> = pv * (1 + r/n)**(n*t)  <span style="color: #969896;"># </span> <span style="color: #969896;">future value</span>
 <span style="color: #a71d5d;">print</span> ( <span style="color: #183691;">"First formula calculates final value to: %.2f"</span> % fv)

 <span style="color: #333333;">fv</span> = pv * (1 + r/n)**(n*1)  <span style="color: #969896;"># </span> <span style="color: #969896;">year 1 only</span>
 <span style="color: #a71d5d;">print</span>( <span style="color: #183691;">"Year %d: %.2f"</span> % (1, fv))
 <span style="color: #a71d5d;">for</span> i  <span style="color: #a71d5d;">in</span>  <span style="color: #a71d5d;">range</span> (2, t+1):
     <span style="color: #333333;">fv</span> = fv * (1 + r/n)**(n*1)  <span style="color: #969896;"># </span> <span style="color: #969896;">Calculate one year at a time</span>
     <span style="color: #a71d5d;">print</span>( <span style="color: #183691;">"Year %d: %.2f"</span> % (i, fv))
</pre>
</div>

 <pre class="example">
First formula calculates final value to: 773936.89
Year 1: 214000.00
Year 2: 228980.00
Year 3: 245008.60
Year 4: 262159.20
Year 5: 280510.35
Year 6: 300146.07
Year 7: 321156.30
Year 8: 343637.24
Year 9: 367691.84
Year 10: 393430.27
Year 11: 420970.39
Year 12: 450438.32
Year 13: 481969.00
Year 14: 515706.83
Year 15: 551806.31
Year 16: 590432.75
Year 17: 631763.04
Year 18: 675986.46
Year 19: 723305.51
Year 20: 773936.89
</pre>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/compound-interest-calculations/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/compound-interest-calculations/index.html</guid>
  <pubDate>Sun, 14 Apr 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Building mu/mu4e on macOS</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org8406bad" class="outline-2">
 <h2 id="building-mumu4e-on-macos"> <span class="timestamp-wrapper"> <span class="timestamp">11 April 2019</span></span> Building mu/mu4e on macOS</h2>
 <div class="outline-text-2" id="text-building-mumu4e-on-macos">
 <p>
Recently built Emacs's  <a href="http://www.djcbsoftware.nl/code/mu/">mu/mu4e</a> 1.2.0 from source on macOS. Steps:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew install gmime
 <span style="color: #a71d5d;">export</span>  <span style="color: #333333;">CPPFLAGS</span>=-I$( <span style="color: #183691;">brew</span> --prefix)/Cellar/gmime/3.2.3/include
 <span style="color: #a71d5d;">export</span>  <span style="color: #333333;">LDFLAGS</span>=-L$( <span style="color: #183691;">brew</span> --prefix)/Cellar/gmime/3.2.3/lib
 <span style="color: #a71d5d;">export</span>  <span style="color: #333333;">PKG_CONFIG_PATH</span>=$( <span style="color: #183691;">brew</span> --prefix)/Cellar/gmime/3.2.3/lib/pkgconfig:$( <span style="color: #183691;">brew</span> --prefix)/opt/libffi/lib/pkgconfig
./configure --prefix=$( <span style="color: #183691;">~/local</span>) --disable-dependency-tracking
make install
</pre>
</div>

 <p>
UPDATE(2019-04-16): Another approach at Irreal's  <a href="https://irreal.org/blog/?p=7976">Mu/mu4e 1.2 Available</a>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/building-mumu4e-on-macos/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/building-mumu4e-on-macos/index.html</guid>
  <pubDate>Thu, 11 Apr 2019 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Inserting numbers with Emacs multiple cursors</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgacef5e2" class="outline-2">
 <h2 id="inserting-numbers-with-emacs-multiple-cursors"> <span class="timestamp-wrapper"> <span class="timestamp">17 March 2019</span></span> Inserting numbers with Emacs multiple cursors</h2>
 <div class="outline-text-2" id="text-inserting-numbers-with-emacs-multiple-cursors">
 <p>
TIL that multiple cursor's  <i>mc/insert-numbers</i> enables you to quickly enter increasing numbers for each cursor. I have  <i>mc/insert-numbers</i> bound to # in  <i>region-bindings-mode-map.</i> By default, sequence starts at 0, but invoking  <i>mc/insert-numbers</i> with prefix enables you to quickly change that.
</p>

 <p>
Came in handy when numbering an org table:
</p>


 <div class="figure">
 <p> <img src="../images/inserting-numbers-with-emacs-multiple-cursors/mc-number.gif" alt="mc-number.gif"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/inserting-numbers-with-emacs-multiple-cursors/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/inserting-numbers-with-emacs-multiple-cursors/index.html</guid>
  <pubDate>Sun, 17 Mar 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>No Emacs frame refocus on macOS</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orga14884c" class="outline-2">
 <h2 id="no-emacs-frame-refocus-on-macos"> <span class="timestamp-wrapper"> <span class="timestamp">16 March 2019</span></span> No Emacs frame refocus on macOS</h2>
 <div class="outline-text-2" id="text-no-emacs-frame-refocus-on-macos">
 <p>
This one's been bugging me for a while. On macOS, Emacs automatically focuses (raises) other frames when one is closed.
</p>


 <div class="figure">
 <p> <img src="../images/no-emacs-frame-refocus-on-macos/before.gif" alt="before.gif" width="50%" height="50%"></img></p>
</div>

 <p>
This has the unfortunate side-effect that I could be moved from one macOS desktop/space to another when closing an Emacs frame.
</p>

 <p>
Finally managed do something about it. Since I install Emacs on macOS via homebrew, a  <del> <a href="https://github.com/xenodium/homebrew-emacs-plus/commit/79a8e98b222fa262746f6db620ddd1fdb151ece9">small patch on emacs-plus recipe</a></del>  <a href="https://github.com/d12frosted/homebrew-emacs-plus/pull/122/commits/71bf246930bfedb337bcc0e21587ccbbb917e5bf">small patch on emacs-plus recipe</a> did the job.
</p>


 <div class="figure">
 <p> <img src="../images/no-emacs-frame-refocus-on-macos/after.gif" alt="after.gif" width="50%" height="50%"></img></p>
</div>

 <p>
UPDATE: Pull request  <a href="https://github.com/d12frosted/homebrew-emacs-plus/pull/122">merged</a> in d12frosted/emacs-plus.
</p>

 <p>
The  <del> <a href="https://github.com/xenodium/homebrew-emacs-plus/commit/79a8e98b222fa262746f6db620ddd1fdb151ece9">patch</a></del>  <a href="https://github.com/d12frosted/homebrew-emacs-plus/pull/122/commits/71bf246930bfedb337bcc0e21587ccbbb917e5bf">patch</a> has been merged into  <a href="https://github.com/d12frosted/homebrew-emacs-plus">d12frosted/homebrew-emacs-plus</a>. To use:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew tap d12frosted/emacs-plus
brew install emacs-plus --without-spacemacs-icon --with-no-frame-refocus
</pre>
</div>

 <p>
Balance restored.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/no-emacs-frame-refocus-on-macos/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/no-emacs-frame-refocus-on-macos/index.html</guid>
  <pubDate>Sat, 16 Mar 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Language server protocol (LSP) bookmarks</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org7c24245" class="outline-2">
 <h2 id="language-server-protocol-lsp-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">12 March 2019</span></span> Language server protocol (LSP) bookmarks</h2>
 <div class="outline-text-2" id="text-language-server-protocol-lsp-bookmarks">
 <span class="modified-timestamp">   <em>updated: 14 April 2019  </em></span>
 <ul class="org-ul"> <li> <a href="https://github.com/eclipse/eclipse.jdt.ls">Eclipse JDT Language Server</a>.</li>
 <li> <a href="https://github.com/emacs-lsp/lsp-java">Emacs Java IDE using Eclipse JDT Language Server</a>.</li>
 <li> <a href="https://github.com/vscode-langservers/vscode-html-languageserver-bin">vscode-html-languageserver extracted from VSCode</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/language-server-protocol-lsp-bookmarks/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/language-server-protocol-lsp-bookmarks/index.html</guid>
  <pubDate>Tue, 12 Mar 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Copy from desktop to mobile via QR code</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org2e05529" class="outline-2">
 <h2 id="copy-from-desktop-to-mobile-via-qr-code"> <span class="timestamp-wrapper"> <span class="timestamp">24 February 2019</span></span> Copy from desktop to mobile via QR code</h2>
 <div class="outline-text-2" id="text-copy-from-desktop-to-mobile-via-qr-code">
 <p>
 <a href="https://twitter.com/marcin_mbork">Marcin Borkowski</a> has a nice  <a href="http://mbork.pl/2019-02-24_Transferring_strings_to_a_phone_via_QR_codes">tip</a> to quickly copy text or URLs between desktop and mobile using QR codes.
</p>

 <p>
Wrote a little elisp to do a similar thing using the clipboard via Emacs:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/misc-clipboard-to-qr</span> ()
   <span style="color: #183691;">"Convert text in clipboard to qrcode and display within Emacs."</span>
  ( <span style="color: #a71d5d;">interactive</span>)
  ( <span style="color: #a71d5d;">let</span> ((temp-file (concat (temporary-file-directory)  <span style="color: #183691;">"qr-code"</span>)))
    ( <span style="color: #a71d5d;">if</span> (eq 0 (shell-command (format  <span style="color: #183691;">"qrencode -s10 -o %s %s"</span>
                                     temp-file
                                     (shell-quote-argument (current-kill 0)))
                              <span style="color: #183691;">"*qrencode*"</span>))
        (switch-to-buffer (find-file-noselect temp-file t))
      ( <span style="color: #333333;">error</span>  <span style="color: #183691;">"Error: Could not create qrcode, check *qrencode* buffer"</span>))))
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/copy-from-desktop-to-mobile-via-qr-code/qrencode.gif" alt="qrencode.gif" width="75%" height="75%"></img></p>
</div>

 <p>
ps.  <a href="https://feeding.cloud.geek.nz/posts/encoding-wifi-access-point-passwords-qr-code/">Encoding your WiFi access point password into a QR code</a> shows how to encode WiFi access point passwords:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">qrencode -o wifi.png  <span style="color: #183691;">"WIFI:T:WPA;S:<SSID>;P:<PASSWORD>;;"</span>
</pre>
</div>

 <p>
More comprehensively:
</p>

 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #333333;">SSID</span>=SSID_GOES_HERE
pwgen -s 63 > 00wifi.txt
qrencode -o 00wifi.png  <span style="color: #183691;">"WIFI:T:WPA;S:${SSID};P:$(</span> <span style="color: #183691;">cat</span> <span style="color: #183691;"> 00wifi.txt);;"</span>
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/copy-from-desktop-to-mobile-via-qr-code/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/copy-from-desktop-to-mobile-via-qr-code/index.html</guid>
  <pubDate>Sun, 24 Feb 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Swapping Emacs ivy collections/sources</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgfad99d8" class="outline-2">
 <h2 id="swapping-emacs-ivy-collectionssources"> <span class="timestamp-wrapper"> <span class="timestamp">13 January 2019</span></span> Swapping Emacs ivy collections/sources</h2>
 <div class="outline-text-2" id="text-swapping-emacs-ivy-collectionssources">
 <p>
 <a href="https://github.com/abo-abo/swiper">Ivy</a> is great. I've been meaning to figure out a way to swap sources while running ivy. This would enable me to cycle through different sources using the existing search parameters.
</p>

 <p>
At first look,  <i>'ivy-set-sources</i> seemed like the right choice, but it's used during setup to agregate sources. Subsequent  <i>'ivy-set-sources</i> calls are ignored during an  <i>'ivy-read</i> session.
</p>

 <p>
There's an ivy  <a href="https://github.com/abo-abo/swiper/issues/606">feature request</a> over at github with a similar goal in mind. Although the feature is not yet supported, there's a handy suggestion to use  <i>'ivy-quit-and-run</i> to quit the current command and run a different one.
</p>

 <p>
With  <i>'ivy-quit-and-run</i> in mind, we can write our  <i>'ar/ivy-read</i> function to take a list of sources and add a little logic to cycle through them using a keybiding, in my case <left> and <right>.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp"> <span style="color: #969896;">;;; </span> <span style="color: #969896;">-*- lexical-binding: t; -*-</span>

( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">cl</span>)

( <span style="color: #a71d5d;">cl-defstruct</span>
    ar/ivy-source
  prompt
  collection
  action)

( <span style="color: #a71d5d;">cl-defun</span>  <span style="color: #795da3;">ar/ivy-read</span> (sources  <span style="color: #0086b3;">&key</span> index initial-input)
  ( <span style="color: #a71d5d;">let</span> ((kmap (make-sparse-keymap))
        (source))
    ( <span style="color: #333333;">cl-assert</span> (> (length sources) 0))
    ( <span style="color: #a71d5d;">when</span> (null index) ( <span style="color: #a71d5d;">setq</span> index 0))
    ( <span style="color: #a71d5d;">setq</span> source (nth index sources))
    (define-key kmap (kbd  <span style="color: #183691;">"<right>"</span>) ( <span style="color: #a71d5d;">lambda</span> ()
                                       ( <span style="color: #a71d5d;">interactive</span>)
                                       (ivy-quit-and-run (ar/ivy-read sources
                                                                       <span style="color: #a71d5d;">:index</span> ( <span style="color: #a71d5d;">if</span> (>= (1+ index)
                                                                                     (length sources))
                                                                                 0
                                                                               (1+ index))
                                                                       <span style="color: #a71d5d;">:initial-input</span> ivy-text))))
    (define-key kmap (kbd  <span style="color: #183691;">"<left>"</span>) ( <span style="color: #a71d5d;">lambda</span> ()
                                      ( <span style="color: #a71d5d;">interactive</span>)
                                      (ivy-quit-and-run (ar/ivy-read sources
                                                                      <span style="color: #a71d5d;">:index</span> ( <span style="color: #a71d5d;">if</span> (< (1- index)
                                                                                   0)
                                                                                (1- (length sources))
                                                                              (1- index))
                                                                      <span style="color: #a71d5d;">:initial-input</span> ivy-text))))
    (ivy-read (ar/ivy-source-prompt source)
              (ar/ivy-source-collection source)
               <span style="color: #a71d5d;">:action</span> (ar/ivy-source-action source)
               <span style="color: #a71d5d;">:initial-input</span> initial-input
               <span style="color: #a71d5d;">:keymap</span> kmap)))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/ivy-food-menu</span> ()
  ( <span style="color: #a71d5d;">interactive</span>)
  (ar/ivy-read (list
                (make-ar/ivy-source  <span style="color: #a71d5d;">:prompt</span>  <span style="color: #183691;">"Pizza: "</span>
                                     <span style="color: #a71d5d;">:action</span> ( <span style="color: #a71d5d;">lambda</span> (selection)
                                              (message  <span style="color: #183691;">"Selected pizza: %s"</span> selection))
                                     <span style="color: #a71d5d;">:collection</span> ( <span style="color: #a71d5d;">lambda</span> (str pred v)
                                                  (list  <span style="color: #183691;">"Bianca Neve - Mozzarella, Ricotta, Sausage, Extra Virgin Olive Oil, Basil"</span>
                                                         <span style="color: #183691;">"Boscaiola - Mozzarella, Tomato Sauce, Sausage, Mushrooms, Extra Virgin Olive Oil, Basil"</span>
                                                         <span style="color: #183691;">"Calzone - Ricotta, Ham, Mushrooms, Artichokes. Topped with Tomato Sauce and Extra Virgin Olive Oil."</span>
                                                         <span style="color: #183691;">"Capricciosa - Mozzarella,Tomato Sauce, Prosciutto Cotto Ham, Mushrooms, Artichokes, Extra Virgin Olive Oil."</span>
                                                         <span style="color: #183691;">"Carciofi - Mozzarella, Tomato Sauce, Artichokes, Extra Virgin Olive Oil, Basil."</span>
                                                         <span style="color: #183691;">"Diavola - Mozzarella, Tomato Sauce, Spicy Salami, Extra Virgin Olive Oil, Basil."</span>
                                                         <span style="color: #183691;">"Funghi - Mozzarella, Tomato Sauce, Mushrooms, Extra Virgin Olive Oil, Basil."</span>)))
                (make-ar/ivy-source  <span style="color: #a71d5d;">:prompt</span>  <span style="color: #183691;">"Tacos: "</span>
                                     <span style="color: #a71d5d;">:action</span> ( <span style="color: #a71d5d;">lambda</span> (selection)
                                              (message  <span style="color: #183691;">"Selected taco: %s"</span> selection))
                                     <span style="color: #a71d5d;">:collection</span> ( <span style="color: #a71d5d;">lambda</span> (str pred v)
                                                  (list  <span style="color: #183691;">"Pork pibil - Slow cooked in citrus & spices, with pink pickled onions."</span>
                                                         <span style="color: #183691;">"Grilled chicken & avocado - Ancho rub, guacamole & green tomatillo salsa."</span>
                                                         <span style="color: #183691;">"Plantain - Sweet & spicy chipotle & crumbled feta."</span>
                                                         <span style="color: #183691;">"Poblano pepper - Caramelised onions, corn & cashew nut mole."</span>
                                                         <span style="color: #183691;">"Buttermilk chicken - Served crispy fried with habanero & white onion relish & spiced mayo."</span>
                                                         <span style="color: #183691;">"Sustainable battered cod - mSC certified cod with shredded slaw, chipotle mayo & pickled cucumber."</span>
                                                         <span style="color: #183691;">"Chargrilled steak - Avocado & chipotle salsas."</span>)))
                (make-ar/ivy-source  <span style="color: #a71d5d;">:prompt</span>  <span style="color: #183691;">"Burgers: "</span>
                                     <span style="color: #a71d5d;">:action</span> ( <span style="color: #a71d5d;">lambda</span> (selection)
                                              (message  <span style="color: #183691;">"Selected burger: %s"</span> selection))
                                     <span style="color: #a71d5d;">:collection</span> ( <span style="color: #a71d5d;">lambda</span> (str pred v)
                                                  (list  <span style="color: #183691;">"The cheese - Aged beef patty with american cheese, gherkins, ketchup & mustard."</span>
                                                         <span style="color: #183691;">"The yeah! - Aged beef patty with american cheese, gherkins, yeah! sauce & salad."</span>
                                                         <span style="color: #183691;">"The yfc or hot yfc - Crispy chicken with lime or chipotle crema, lettuce, pickled onion & slaw."</span>
                                                         <span style="color: #183691;">"The rancher - Grilled chicken with ranch dressing, bacon & salad."</span>
                                                         <span style="color: #183691;">"The bubbah - Aged beef patty with smokey aubergine, pickled red cabbage, lettuce, roast toms, onions & cheddar."</span>
                                                         <span style="color: #183691;">"The bulgogi - Sesame-spiced beef patty with miso mayo, pickled radish, onion, cucumber & spring onion."</span>
                                                         <span style="color: #183691;">"The summer - Aged beef patty with sriracha mayo, lettuce, onion, toms, avo, cheddar & bacon."</span>))))))
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/swapping-emacs-ivy-collectionssources/ivy-cycle-sources.gif" alt="ivy-cycle-sources.gif" width="75%" height="75%"></img></p>
</div>

 <p>
ps. Menu data from  <a href="https://starofkings.co.uk/food-and-drink/">Star of Kings</a>,  <a href="https://www.wahaca.co.uk/menu/food/">Wahaca</a>, and  <a href="https://pizzarino.us/menu">Pizzarino</a>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/swapping-emacs-ivy-collectionssources/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/swapping-emacs-ivy-collectionssources/index.html</guid>
  <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emacs on macOS Mojave</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org6cfeb61" class="outline-2">
 <h2 id="emacs-on-macos-mojave"> <span class="timestamp-wrapper"> <span class="timestamp">12 January 2019</span></span> Emacs on macOS Mojave</h2>
 <div class="outline-text-2" id="text-emacs-on-macos-mojave">
 <p>
Had issues running Emacs on macOS Mojave (blank unresponsive screen). Bleeding edge emacs-plus did the job:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew tap d12frosted/emacs-plus
brew install emacs-plus --without-spacemacs-icon --HEAD
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-sh">brew info emacs-plus
</pre>
</div>

 <pre class="example">
d12frosted/emacs-plus/emacs-plus: stable 26.1, devel 26.1-rc1, HEAD
GNU Emacs text editor
https://www.gnu.org/software/emacs/
/Users/some-user/homebrew/Cellar/emacs-plus/HEAD-8fe21b0 (3,985 files, 123.0MB) *
  Built from source on 2019-01-12 at 09:26:09 with: --without-spacemacs-icon
From: https://github.com/d12frosted/homebrew-emacs-plus/blob/master/Formula/emacs-plus.rb
==> Dependencies
Build: pkg-config
Recommended: little-cms2, gnutls, librsvg, imagemagick@6
Optional: dbus, mailutils
==> Requirements
Optional: x11
==> Options
--with-ctags
	Don't remove the ctags executable that Emacs provides
--with-dbus
	Build with dbus support
--with-emacs-icons-project-EmacsIcon1
	Using Emacs icon project EmacsIcon1
--with-emacs-icons-project-EmacsIcon2
	Using Emacs icon project EmacsIcon2
--with-emacs-icons-project-EmacsIcon3
	Using Emacs icon project EmacsIcon3
--with-emacs-icons-project-EmacsIcon4
	Using Emacs icon project EmacsIcon4
--with-emacs-icons-project-EmacsIcon5
	Using Emacs icon project EmacsIcon5
--with-emacs-icons-project-EmacsIcon6
	Using Emacs icon project EmacsIcon6
--with-emacs-icons-project-EmacsIcon7
	Using Emacs icon project EmacsIcon7
--with-emacs-icons-project-EmacsIcon8
	Using Emacs icon project EmacsIcon8
--with-emacs-icons-project-EmacsIcon9
	Using Emacs icon project EmacsIcon9
--with-emacs-icons-project-emacs-card-blue-deep
	Using Emacs icon project emacs-card-blue-deep
--with-emacs-icons-project-emacs-card-british-racing-green
	Using Emacs icon project emacs-card-british-racing-green
--with-emacs-icons-project-emacs-card-carmine
	Using Emacs icon project emacs-card-carmine
--with-emacs-icons-project-emacs-card-green
	Using Emacs icon project emacs-card-green
--with-mailutils
	Build with mailutils support
--with-modern-icon
	Using a modern style Emacs icon by @tpanum
--with-no-titlebar
	Experimental: build without titlebar
--with-pdumper
	Experimental: build from pdumper branch and with
         increasedremembered_data size (--HEAD only)
--with-x11
	Experimental: build with x11 support
--with-xwidgets
	Experimental: build with xwidgets support (--HEAD only)
--without-cocoa
	Build a non-Cocoa version of Emacs
--without-gnutls
	Build without gnutls support
--without-imagemagick@6
	Build without imagemagick@6 support
--without-librsvg
	Build without librsvg support
--without-libxml2
	Build without libxml2 support
--without-little-cms2
	Build without little-cms2 support
--without-modules
	Build without dynamic modules support
--without-multicolor-fonts
	Build without a patch that enables multicolor font support
--without-spacemacs-icon
	Build without Spacemacs icon by Nasser Alshammari
--devel
	Install development version 26.1-rc1
--HEAD
	Install HEAD version
==> Caveats
Emacs.app was installed to:
  /Users/some-user/homebrew/Cellar/emacs-plus/26.1

To link the application to default Homebrew App location:
  brew linkapps
or:
  ln -s /Users/some-user/homebrew/Cellar/emacs-plus/26.1/Emacs.app /Applications

--natural-title-bar option was removed from this formula, in order to
  duplicate its effect add following line to your init.el file
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
or:
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . light))

If you are using macOS Mojave, please note that most of the experimental
options are forbidden on Mojave. This is temporary decision.


To have launchd start d12frosted/emacs-plus/emacs-plus now and restart at login:
  brew services start d12frosted/emacs-plus/emacs-plus
Or, if you don't want/need a background service you can just run:
  emacs
</pre>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-on-macos-mojave/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-on-macos-mojave/index.html</guid>
  <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Podcast bookmarks</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org010ea11" class="outline-2">
 <h2 id="podcast-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">12 January 2019</span></span> Podcast bookmarks</h2>
 <div class="outline-text-2" id="text-podcast-bookmarks">
 <span class="modified-timestamp">   <em>updated: 12 January 2019  </em></span>
 <ul class="org-ul"> <li> <a href="https://destinationlinux.org/">Destination Linux. A conversational podcast by people who love running Linux.</a>.</li>
 <li> <a href="https://emacscast.org/">EmacsCast</a>.</li>
 <li> <a href="http://faif.us/">Free as in Freedom</a>.</li>
 <li> <a href="http://gnuworldorder.info/">Gnu World Order</a>.</li>
 <li> <a href="https://latenightlinux.com/">Late Night Linux</a>.</li>
 <li> <a href="https://librelounge.org/">Libre Lounge</a>.</li>
 <li> <a href="https://linuxlads.com/">Linux Lads Podcast</a>.</li>
 <li> <a href="https://www.thebinarytimes.net/">The Binary Times Podcast (Linux/free software/hardware/culture)</a>.</li>
 <li> <a href="http://ubuntupodcast.org/">Ubuntu Podcast</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/podcast-bookmarks/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/podcast-bookmarks/index.html</guid>
  <pubDate>Sat, 12 Jan 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Trying out Emacs pdf tools</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org8e69f8b" class="outline-2">
 <h2 id="trying-out-emacs-pdf-tools"> <span class="timestamp-wrapper"> <span class="timestamp">06 January 2019</span></span> Trying out Emacs pdf tools</h2>
 <div class="outline-text-2" id="text-trying-out-emacs-pdf-tools">
 <p>
Late to the party, giving  <a href="https://github.com/politza/pdf-tools">pdf-tools</a> a try.
</p>

 <p>
The  <a href="https://github.com/politza/pdf-tools#compiling-on-os-x">macOS install instructions</a> have a prerequisite:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew install poppler automake
</pre>
</div>

 <p>
Installed with:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">pdf-tools</span>
   <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:mode</span> ( <span style="color: #183691;">"\\.pdf\\'"</span> . pdf-view-mode)
   <span style="color: #a71d5d;">:config</span>
  (pdf-tools-install)
  ( <span style="color: #a71d5d;">setq-default</span> pdf-view-display-size 'fit-page)
  ( <span style="color: #a71d5d;">setq</span> pdf-annot-activate-created-annotations t))
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/trying-out-emacs-pdf-tools/pdf-tools.png" alt="pdf-tools.png" width="75%" height="75%"></img></p>
</div>

 <p>
ps. (pdf-tools-install) may not find libffi on macOS. Try:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(setenv  <span style="color: #183691;">"PKG_CONFIG_PATH"</span>
        (f-join
         (file-name-as-directory
          (nth 0
               (split-string
                (shell-command-to-string  <span style="color: #183691;">"brew --prefix"</span>))))
          <span style="color: #183691;">"Cellar"</span>  <span style="color: #183691;">"libffi"</span>  <span style="color: #183691;">"3.2.1"</span>  <span style="color: #183691;">"lib"</span>  <span style="color: #183691;">"pkgconfig"</span>))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/trying-out-emacs-pdf-tools/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/trying-out-emacs-pdf-tools/index.html</guid>
  <pubDate>Sun, 06 Jan 2019 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emailing pdfs to kindle from mu4e</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org9ca6f4c" class="outline-2">
 <h2 id="emailing-pdfs-to-kindle-from-mu4e"> <span class="timestamp-wrapper"> <span class="timestamp">25 December 2018</span></span> Emailing pdfs to kindle from mu4e</h2>
 <div class="outline-text-2" id="text-emailing-pdfs-to-kindle-from-mu4e">
 <p>
Wanted to send a pdf to my kindle for some holiday reading. You can easily do this by emailing the pdf to your kindle-bound email address.
</p>

 <p>
Now, I typically attach files when composing mu4e emails by using  <i>mml-attach-file</i>, which attaches the file using  <i><#part>…<#/part></i>. However, the Amazon service did not find the attached pdf, so no pdf was added to my Kindle.
</p>

 <p>
Fortunately, I found a handy  <a href="https://www.reddit.com/r/emacs/comments/97abs7/anyone_uses_mu4e_to_send_mobi_files_to_kindle">Reddit thread, leding me to a working solution</a>. Wrapping the part using  <i><#multipart type=mixed>…<#/multipart></i> did the job, using  <i>mml-insert-multipart</i>, followed by  <i>mml-attach-file</i>.
</p>

 <p>
Resulting attachment should look something like:
</p>

 <pre class="example">
<#multipart type=mixed>
<#part type="application/pdf" filename="/path/to/file.pdf" disposition=attachment>
<#/part>
<#/multipart>
</pre>

 <p>
I should add a convenience elisp function for this, but that's for another time…
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emailing-pdfs-to-kindle-from-mu4e/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emailing-pdfs-to-kindle-from-mu4e/index.html</guid>
  <pubDate>Tue, 25 Dec 2018 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>DWIM ivy quit</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org0241b9f" class="outline-2">
 <h2 id="dwim-ivy-quit"> <span class="timestamp-wrapper"> <span class="timestamp">08 December 2018</span></span> DWIM ivy quit</h2>
 <div class="outline-text-2" id="text-dwim-ivy-quit">
 <p>
"Do-what-I-mean" (DWIM) functions enable us to introduce new Emacs powers to existing workflows without incurring the typical cost of remembering multiple related functions or introducing yet another key binding. DWIM functions invoke other functions, based on current context.
</p>

 <p>
I wanted a small tweak in Ivy's  <i>`minibuffer-keyboard-quit'</i> invocation, commonly invoked via  <i>C-g</i> key binding:
</p>

 <ol class="org-ol"> <li>If we have text selected in minibuffer, deselect it.</li>
 <li>If we have any text in minibuffer, clear it.</li>
 <li>If no text in minibuffer, quit.</li>
</ol> <p>
Added  <i>`ar/ivy-keyboard-quit-dwim'</i> for this purpose. Binding it to C-g in  <i>ivy-minibuffer-map</i>:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">ivy</span>
   <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:bind</span> ( <span style="color: #a71d5d;">:map</span> ivy-minibuffer-map
              ( <span style="color: #183691;">"C-g"</span> . ar/ivy-keyboard-quit-dwim))
   <span style="color: #a71d5d;">:config</span>
  ( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/ivy-keyboard-quit-dwim</span> ()
     <span style="color: #183691;">"If region active, deactivate. If there's content, clear the minibuffer. Otherwise quit."</span>
    ( <span style="color: #a71d5d;">interactive</span>)
    ( <span style="color: #a71d5d;">cond</span> (( <span style="color: #a71d5d;">and</span> delete-selection-mode (region-active-p))
           ( <span style="color: #a71d5d;">setq</span> deactivate-mark t))
          ((> (length ivy-text) 0)
           (delete-minibuffer-contents))
          (t
           (minibuffer-keyboard-quit)))))
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/dwim-ivy-quit/ivy-keybqoard-quit-dwim.gif" alt="ivy-keybqoard-quit-dwim.gif" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/dwim-ivy-quit/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/dwim-ivy-quit/index.html</guid>
  <pubDate>Sat, 08 Dec 2018 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Diffing directories content size</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org405972f" class="outline-2">
 <h2 id="diffing-directories-content-size"> <span class="timestamp-wrapper"> <span class="timestamp">05 December 2018</span></span> Diffing directories content size</h2>
 <div class="outline-text-2" id="text-diffing-directories-content-size">
 <p>
Needed to diff two directories, but only interested in file size changes. diff, find, sort, and stat seem to do the job:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">diff <(find dir1 -type f -exec stat -f  <span style="color: #183691;">'%N %z'</span>  <span style="color: #183691;">'{}'</span>  <span style="color: #183691;">\;</span> | sort) <(find dir2 -type f -exec stat -f  <span style="color: #183691;">'%N %z'</span>  <span style="color: #183691;">'{}'</span>  <span style="color: #183691;">\;</span> | sort)
</pre>
</div>

 <pre class="example">
1,3c1,2
< dir1/one.txt 14
< dir1/subdir/file.txt 5
< dir1/three.txt 7
---
> dir2/one.txt 19
> dir2/two.txt 0
</pre>

 <p>
 <i>Note: Using diff, find, sort, and stat on macOS.</i>
</p>
</div>

 <div id="outline-container-org033cfd5" class="outline-3">
 <h3 id="org033cfd5">Update 1</h3>
 <div class="outline-text-3" id="text-org033cfd5">
 <p>
I've since learned about mtree (thanks  <a href="https://twitter.com/romanzolotarev/status/1070249301815771137">Roman</a>!). A nice utility to add to the toolbox.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">mtree -p emacs-25.1 -c -k size -d
</pre>
</div>

 <pre class="example">
#	   user: me
#	machine: my-machine
#	   tree: /path/to/emacs-25.1
#	   date: Wed Dec  5 22:21:07 2018
# .
/set type=dir
.               size=1152
# ./admin
admin           size=960
# ./admin/charsets
charsets        size=544
# ./admin/charsets/glibc
glibc           size=3392
# ./admin/charsets/glibc
..
# ./admin/charsets/mapfiles
mapfiles        size=640
# ./admin/charsets/mapfiles
..
</pre>
</div>
</div>

 <div id="outline-container-orge3c0129" class="outline-3">
 <h3 id="orge3c0129">Update 2</h3>
 <div class="outline-text-3" id="text-orge3c0129">
 <p>
I've added Emacs ediff to the mix:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">f</span>)

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/ediff-dir-content-size</span> ()
     <span style="color: #183691;">"Diff all subdirectories (sizes only) in two directories."</span>
    ( <span style="color: #a71d5d;">interactive</span>)
    ( <span style="color: #a71d5d;">let*</span> ((dir1-path (read-directory-name  <span style="color: #183691;">"Dir 1: "</span>))
           (dir2-path (read-directory-name  <span style="color: #183691;">"Dir 2: "</span>))
           (buf1 (get-buffer-create (format  <span style="color: #183691;">"*Dir 1 (%s)*"</span> (f-base dir1-path))))
           (buf2 (get-buffer-create (format  <span style="color: #183691;">"*Dir 2 (%s)*"</span> (f-base dir2-path)))))
      ( <span style="color: #a71d5d;">with-current-buffer</span> buf1
        (erase-buffer))
      ( <span style="color: #a71d5d;">with-current-buffer</span> buf2
        (erase-buffer))
      (shell-command (format  <span style="color: #183691;">"cd %s; find . -type d | sort | du -h"</span> dir1-path) buf1)
      (shell-command (format  <span style="color: #183691;">"cd %s; find . -type d | sort | du -h"</span> dir2-path) buf2)
      (ediff-buffers buf1 buf2)))
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/diffing-directories-content-size/ediff-dir-content-size.png" alt="ediff-dir-content-size.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/diffing-directories-content-size/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/diffing-directories-content-size/index.html</guid>
  <pubDate>Wed, 05 Dec 2018 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Swift nil-coalescing operator</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgdb9d8f5" class="outline-2">
 <h2 id="swift-nil-coalescing-operator"> <span class="timestamp-wrapper"> <span class="timestamp">02 December 2018</span></span> Swift nil-coalescing operator</h2>
 <div class="outline-text-2" id="text-swift-nil-coalescing-operator">
 <p>
 <a href="https://twitter.com/twostraws">Paul Hudson</a>, over at  <a href="https://www.hackingwithswift.com/">Hacking with Swift</a>, has written  <a href="https://www.hackingwithswift.com/articles/136/the-complete-guide-to-optionals-in-swift">The Complete Guide to Optionals in Swift</a>. One of the many highlights is the  <a href="https://docs.swift.org/swift-book/LanguageGuide/BasicOperators.html#ID72">nil-coalescing operator</a>. If you're a fan of the  <a href="https://en.wikipedia.org/wiki/Ternary_operation">C-like syntax in ternary operations</a>, you'd enjoy chaining with Swift's nil-coalescing operator:
</p>

 <div class="org-src-container">
 <pre class="src src-swift"> <span style="color: #a71d5d;">let</span> players = [  <span style="color: #183691;">"goose"</span>:  <span style="color: #183691;">"run!"</span> ]
 <span style="color: #a71d5d;">let</span> move = players[ <span style="color: #183691;">"duck1"</span>] ?? players[ <span style="color: #183691;">"duck2"</span>] ?? players[ <span style="color: #183691;">"duck3"</span>] ?? players[ <span style="color: #183691;">"goose"</span>]
 <span style="color: #a71d5d;">print</span>( <span style="color: #183691;">"\(</span> <span style="color: #a71d5d;">String</span>(describing: move) <span style="color: #183691;">)"</span>)
</pre>
</div>

 <pre class="example">
Optional("run!")
</pre>


 <p>
ps. Swift snippet run on Emacs  <a href="https://orgmode.org/worg/org-contrib/babel/intro.html">org babel's</a>  <a href="https://github.com/zweifisch/ob-swift">ob-swift</a>. See  <a href="../multiline-swift-strings">Multiline Swift strings</a> for details.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/swift-nil-coalescing-operator/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/swift-nil-coalescing-operator/index.html</guid>
  <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Ocado vs Asda (org table)</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org609f47e" class="outline-2">
 <h2 id="ocado-vs-asda-org-table"> <span class="timestamp-wrapper"> <span class="timestamp">01 December 2018</span></span> Ocado vs Asda (org table)</h2>
 <div class="outline-text-2" id="text-ocado-vs-asda-org-table">
 <p>
Someone handed me an  <a href="https://www.ocado.com">Ocado</a> shopping voucher for 30% off. Sounded promising, even for a one-off.
</p>

 <p>
With my  <a href="https://www.amazon.co.uk/Transforming-Relationship-Achieving-Financial-Independence/dp/0143115766/">Money or Your Life</a> hat on, I took a closer look for potential savings. Results were disappointing, when compared to alternatives like Asda.
</p>

 <p>
Here's a table comparing Ocado (30% off) and Asda (no discount):
</p>

 <table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"> <colgroup> <col class="org-left"></col> <col class="org-right"></col> <col class="org-right"></col></colgroup> <thead> <tr> <th scope="col" class="org-left"> </th>
 <th scope="col" class="org-right">Ocado</th>
 <th scope="col" class="org-right">Asda</th>
</tr></thead> <tbody> <tr> <td class="org-left"> <a href="https://www.ocado.com/webshop/product/Coconut-Merchant-Organic-Raw-Extra-Virgin-Coconut-Oil/372144011">Coconut Merchant Organic Raw Extra Virgin Coconut Oil 500ml</a></td>
 <td class="org-right">6.74</td>
 <td class="org-right"> </td>
</tr> <tr> <td class="org-left"> <a href="https://groceries.asda.com/product/oils/ktc-coconut-hair-oil/910000033621">KTC 100% pure coconut oil</a></td>
 <td class="org-right"> </td>
 <td class="org-right">2.00</td>
</tr> <tr> <td class="org-left"> <a href="https://www.ocado.com/webshop/product/Waitrose-Love-Life-Popcorn-Maize/25130011">Waitrose Love Life Popcorn Maize 510g</a></td>
 <td class="org-right">1.50</td>
 <td class="org-right"> </td>
</tr> <tr> <td class="org-left"> <a href="https://groceries.asda.com/promotion/2-for-pound-1.50/ls89129">Cypressa Popping Corn 2x500g = 1000g</a></td>
 <td class="org-right"> </td>
 <td class="org-right">1.50</td>
</tr> <tr> <td class="org-left"> <a href="https://www.ocado.com/webshop/product/Whitworths-Ground-Almonds/275684011">Whitworths Ground Almonds</a></td>
 <td class="org-right">2.00</td>
 <td class="org-right"> </td>
</tr> <tr> <td class="org-left"> <a href="https://groceries.asda.com/product/baking-nuts-seeds-fruit/whitworths-ground-almonds/910000797981">Whitworths Ground Almonds</a></td>
 <td class="org-right"> </td>
 <td class="org-right">1.60</td>
</tr></tbody> <tbody> <tr> <td class="org-left">Total</td>
 <td class="org-right"> </td>
 <td class="org-right">£ 5.10</td>
</tr></tbody> <tbody> <tr> <td class="org-left">-30%</td>
 <td class="org-right">£ 7.17</td>
 <td class="org-right"> </td>
</tr></tbody></table> <p>
On the upside, Ocado has plenty of items I cannot find at Asda. May be a good opportunity to get these items at a discount.
</p>
</div>

 <div id="outline-container-org797ea89" class="outline-3">
 <h3 id="org797ea89">Emacs org tables</h3>
 <div class="outline-text-3" id="text-org797ea89">
 <p>
Small tables are the perfect use-case for Emacs  <a href="https://orgmode.org/manual/Tables.html">org-mode tables</a>. Been a while since I used one, so great timing for a little refresh.
</p>

 <p>
Here's the org source for the table above (prior to exporting to HTML):
</p>

 <div class="org-src-container">
 <pre class="src src-org">|-------------------------------------------------------------+--------+--------|
|                                                             |  Ocado |   Asda |
|-------------------------------------------------------------+--------+--------|
| [[https://www.ocado.com/webshop/product/Coconut-Merchant-Organic-Raw-Extra-Virgin-Coconut-Oil/372144011][Coconut Merchant Organic Raw Extra Virgin Coconut Oil 500ml]] |   6.74 |        |
| [[https://groceries.asda.com/product/oils/ktc-coconut-hair-oil/910000033621][KTC 100% pure coconut oil]]                                   |        |   2.00 |
| [[https://www.ocado.com/webshop/product/Waitrose-Love-Life-Popcorn-Maize/25130011][Waitrose Love Life Popcorn Maize 510g]]                       |   1.50 |        |
| [[https://groceries.asda.com/promotion/2-for-pound-1.50/ls89129][Cypressa Popping Corn 2x500g = 1000g]]                        |        |   1.50 |
| [[https://www.ocado.com/webshop/product/Whitworths-Ground-Almonds/275684011][Whitworths Ground Almonds]]                                   |   2.00 |        |
| [[https://groceries.asda.com/product/baking-nuts-seeds-fruit/whitworths-ground-almonds/910000797981][Whitworths Ground Almonds]]                                   |        |   1.60 |
|-------------------------------------------------------------+--------+--------|
| Total                                                       |        | £ 5.10 |
|-------------------------------------------------------------+--------+--------|
| -30%                                                        | £ 7.17 |        |
|-------------------------------------------------------------+--------+--------|
#+TBLFM: @8$3=vsum(@2$3..@7$3);£ %.2f::@9$2=vsum(@2$2..@7$2) * 0.7;£ %.2f
</pre>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/ocado-vs-asda-org-table/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/ocado-vs-asda-org-table/index.html</guid>
  <pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Quickly swapping elfeed filters</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org669cbfe" class="outline-2">
 <h2 id="quickly-swapping-elfeed-filters"> <span class="timestamp-wrapper"> <span class="timestamp">17 November 2018</span></span> Quickly swapping elfeed filters</h2>
 <div class="outline-text-2" id="text-quickly-swapping-elfeed-filters">
 <p>
I seem to be more efficient in getting through rss feeds by individually browsing through related content. That is, I can get through all Emacs entries a lot faster if I look at Emacs content exclusively, instead of mixing with say BBC news.  <a href="https://github.com/skeeto/elfeed">Elfeed</a> filters are great for filtering related content.
</p>

 <p>
I wanted a way to easily switch through my typical categories of related content by quickly changing elfeed filters using a completion framework.
</p>

 <p>
Emacs's  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-Completion.html">completing-read</a> plays nicely with your favorite completing framework (mine is  <a href="https://github.com/abo-abo/swiper">ivy</a>). With a couple of functions, we can get Emacs to ask us for the filtering category using human-readable options and quickly presenting related content. Binding the new functionality to <tab> is working well for me.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">elfeed</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:commands</span> elfeed
   <span style="color: #a71d5d;">:bind</span> ( <span style="color: #a71d5d;">:map</span> elfeed-search-mode-map
              ( <span style="color: #183691;">"<tab>"</span> . ar/elfeed-completing-filter))
   <span style="color: #a71d5d;">:config</span>
  ( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/elfeed-filter-results-count</span> (search-filter)
     <span style="color: #183691;">"Count results for SEARCH-FILTER."</span>
    ( <span style="color: #a71d5d;">let*</span> ((filter (elfeed-search-parse-filter search-filter))
           (head (list nil))
           (tail head)
           (count 0))
      ( <span style="color: #a71d5d;">let</span> ((lexical-binding t)
            (func (byte-compile (elfeed-search-compile-filter filter))))
        (with-elfeed-db-visit (entry feed)
          ( <span style="color: #a71d5d;">when</span> (funcall func entry feed count)
            ( <span style="color: #a71d5d;">setf</span> (cdr tail) (list entry)
                  tail (cdr tail)
                  count (1+ count)))))
      count))

  ( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/elfeed-completing-filter</span> ()
     <span style="color: #183691;">"Completing filter."</span>
    ( <span style="color: #a71d5d;">interactive</span>)
    ( <span style="color: #a71d5d;">let</span> ((categories (-filter
                       ( <span style="color: #a71d5d;">lambda</span> (item)
                         (> (ar/elfeed-filter-results-count (cdr item))
                            0))
                       '(( <span style="color: #183691;">"All"</span> .  <span style="color: #183691;">"@6-months-ago +unread"</span>)
                         ( <span style="color: #183691;">"BBC"</span> .  <span style="color: #183691;">"@6-months-ago +unread +bbc"</span>)
                         ( <span style="color: #183691;">"Dev"</span> .  <span style="color: #183691;">"@6-months-ago +unread +dev"</span>)
                         ( <span style="color: #183691;">"Emacs"</span> .  <span style="color: #183691;">"@6-months-ago +unread +emacs"</span>)
                         ( <span style="color: #183691;">"Health"</span> .  <span style="color: #183691;">"@6-months-ago +unread +health"</span>)
                         ( <span style="color: #183691;">"Hacker News"</span> .  <span style="color: #183691;">"@6-months-ago +unread +hackernews"</span>)
                         ( <span style="color: #183691;">"iOS"</span> .  <span style="color: #183691;">"@6-months-ago +unread +ios"</span>)
                         ( <span style="color: #183691;">"Money"</span> .  <span style="color: #183691;">"@6-months-ago +unread +money"</span>)))))
      ( <span style="color: #a71d5d;">if</span> (> (length categories) 0)
          ( <span style="color: #a71d5d;">progn</span>
            (ar/elfeed-view-filtered (cdr (assoc (completing-read  <span style="color: #183691;">"Categories: "</span> categories)
                                                 categories)))
            (goto-char (window-start)))
        (message  <span style="color: #183691;">"All caught up \\o/"</span>)))))
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/quickly-swapping-elfeed-filters/completing-elfeed.gif" alt="completing-elfeed.gif" width="75%" height="75%"></img></p>
</div>

 <p>
We don't actually need two functions, but  <i>ar/elfeed-filter-results-count</i> enables us to list only those feeds that actually have new content. The list will shrink as we get through our content. When no content is left, we get a little celebratory message.
</p>


 <div class="figure">
 <p> <img src="../images/quickly-swapping-elfeed-filters/no-left.png" alt="no-left.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/quickly-swapping-elfeed-filters/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/quickly-swapping-elfeed-filters/index.html</guid>
  <pubDate>Sat, 17 Nov 2018 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Faster elfeed browsing with paging</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgb7556d4" class="outline-2">
 <h2 id="faster-elfeed-browsing-with-paging"> <span class="timestamp-wrapper"> <span class="timestamp">13 November 2018</span></span> Faster elfeed browsing with paging</h2>
 <div class="outline-text-2" id="text-faster-elfeed-browsing-with-paging">
 <p>
Following up from  <a href="http://xenodium.com/#faster-junk-mail-deletion-with-mu4e">faster junk mail deletion with mu4e</a>, elfeed is another candidate for enabling actions on pages. In this case, marking rss entries as read, page by Page.
</p>

 <p>
If on  <a href="https://github.com/jwiegley/use-package">use-package</a>, the function can defined and bound to the "v" key using:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">elfeed</span>
   <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:bind</span> ( <span style="color: #a71d5d;">:map</span> elfeed-search-mode-map
              ( <span style="color: #183691;">"v"</span> . ar/elfeed-mark-visible-as-read))
   <span style="color: #a71d5d;">:config</span>
  ( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/elfeed-mark-visible-as-read</span> ()
    ( <span style="color: #a71d5d;">interactive</span>)
    ( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">window-end-visible</span>)
    (set-mark (window-start))
    (goto-char (window-end-visible))
    (activate-mark)
    (elfeed-search-untag-all-unread)
    (elfeed-search-update--force)
    (deactivate-mark)
    (goto-char (window-start))))
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/faster-elfeed-browsing-with-paging/elfeed-read-by-page.gif" alt="elfeed-read-by-page.gif" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/faster-elfeed-browsing-with-paging/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/faster-elfeed-browsing-with-paging/index.html</guid>
  <pubDate>Tue, 13 Nov 2018 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Faster junk mail deletion with mu4e</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org19f2ab4" class="outline-2">
 <h2 id="faster-junk-mail-deletion-with-mu4e"> <span class="timestamp-wrapper"> <span class="timestamp">10 November 2018</span></span> Faster junk mail deletion with mu4e</h2>
 <div class="outline-text-2" id="text-faster-junk-mail-deletion-with-mu4e">
 <p>
It's been roughly 5 months since  <a href="http://xenodium.com/#trying-out-mu4e-and-offlineimap">my mu4e email migration</a>. Happy with my choice.  <a href="http://www.djcbsoftware.nl/code/mu/mu4e.html">Mu4e</a> is awesome.
</p>

 <p>
I now have 4 email accounts managed by mu4e, and unfortunately receiving lots of junk mail.
</p>

 <p>
I regularly peek at junk folders for false positives and delete junk email permanently. I've been wanting a quick way to glance at junk mail and easily delete page by page.
</p>

 <p>
Deleting emails page by page is not supported in mu4e by default.  <i>Fortunately, this is Emacs and we can change that™.</i>
</p>

 <p>
There's a handy package by Roland Walker called  <a href="http://github.com/rolandwalker/window-end-visible">window-end-visible</a>. We can use it to select mu4e emails by page and subsequently glue it all together to enable deleting emails by page.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">mu4e</span>)
( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">window-end-visible</span>)

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/mu4e-delete-page</span> ()
  ( <span style="color: #a71d5d;">interactive</span>)
  (set-mark (window-start))
  (goto-char (window-end-visible))
  (activate-mark)
  (mu4e-headers-mark-for-trash)
  (mu4e-mark-execute-all t)
  (deactivate-mark)
  (goto-char (window-start)))
</pre>
</div>

 <p>
I'm a  <a href="https://github.com/jwiegley/use-package">use-package</a> fan, so I use it to bind the "v" key to delete  <i>visible emails (by page</i>).
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">mu4e</span>
   <span style="color: #a71d5d;">:bind</span> ( <span style="color: #a71d5d;">:map</span> mu4e-headers-mode-map
         ( <span style="color: #183691;">"v"</span> . ar/mu4e-delete-page))
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/faster-junk-mail-deletion-with-mu4e/delete-junk.gif" alt="delete-junk.gif" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/faster-junk-mail-deletion-with-mu4e/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/faster-junk-mail-deletion-with-mu4e/index.html</guid>
  <pubDate>Sat, 10 Nov 2018 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>imenu on Emacs eshell</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgfe21236" class="outline-2">
 <h2 id="imenu-on-emacs-eshell"> <span class="timestamp-wrapper"> <span class="timestamp">17 October 2018</span></span> imenu on Emacs eshell</h2>
 <div class="outline-text-2" id="text-imenu-on-emacs-eshell">
 <p>
 <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html">imenu</a> navigation is one of those Emacs gems I didn't discover until much later on. It does what you'd expect in all types of modes. In rare instances, I've found specific modes missing imenu support. Fortunately, this is Emacs and you can fix that.
</p>

 <p>
 <a href="https://www.gnu.org/software/emacs/manual/html_mono/eshell.html">Eshell</a> has a handy feature to jump back and forth over previous prompts using  <i>M-x eshell-previous-prompt (C-c C-p)</i> and  <i>M-x eshell-next-prompt (C-c C-n)</i>. Upon learning about these two functions, my immediate reaction was to try imenu. Surprisingly, it didn't "just work\n", but a tiny bit of elisp brought balance back to the Emacs universe.
</p>

 <p>
In an eshell mode hook function, one can set the  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Imenu.html#index-imenu_002dgeneric_002dexpression-2058">imenu-generic-expression</a> to help it find your favorite prompt:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">setq-local</span> imenu-generic-expression
                  '(( <span style="color: #183691;">"Prompt"</span>  <span style="color: #183691;">" $ </span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">.*</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">"</span> 1)))
</pre>
</div>

 <p>
Ah it's the little things…
</p>


 <div class="figure">
 <p> <img src="../images/imenu-on-emacs-eshell/eshell-imenu.gif" alt="eshell-imenu.gif" width="75%" height="75%"></img></p>
</div>

 <p>
ps. If wondering why my imenu experience looks a little different, that's because I'm using Abo Abo's wonderful  <a href="https://github.com/abo-abo/swiper">counsel</a> and  <i>M-x counsel-semantic-or-imenu</i>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/imenu-on-emacs-eshell/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/imenu-on-emacs-eshell/index.html</guid>
  <pubDate>Wed, 17 Oct 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>macOS app bookmarks</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org5ccb624" class="outline-2">
 <h2 id="macos-app-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">05 October 2018</span></span> macOS app bookmarks</h2>
 <div class="outline-text-2" id="text-macos-app-bookmarks">
 <span class="modified-timestamp">   <em>updated: 15 February 2020  </em></span>
 <ul class="org-ul"> <li> <a href="https://github.com/GetStream/Winds/blob/master/README.md">GetStream/Winds: macOS rss reader</a>.</li>
 <li> <a href="https://github.com/koekeishiya/yabai">GitHub - koekeishiya/yabai: A tiling window manager for macOS based on binary</a>.</li>
 <li> <a href="https://github.com/TermiT/Flycut">GitHub - TermiT/Flycut: Clean and simple clipboard manager for developers</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=21794858">Hidden Bar: macOS utility to hide unused menu bar icons, written in Swift</a>.</li>
 <li> <a href="https://www.obdev.at/products/launchbar/index.html">LaunchBar 6 (can I implement flows in Emacs)?</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=21179713">List of open source applications for macOS (Hacker News)</a>.</li>
 <li> <a href="https://macopenweb.com/">Mac Open Web, by Brian Warren</a>.</li>
 <li> <a href="https://papers.put.as/macosx/macosx/">macOS · Papers, Slides and Thesis Archive</a>.</li>
 <li> <a href="https://www.gonsie.com/blorg/ipad-setup.html">My iPad Setup</a>.</li>
 <li> <a href="https://github.com/nikitavoloboev/my-mac-os">my-mac-os: My wonderful world of macOS</a>.</li>
 <li> <a href="https://thesweetsetup.com/netnewswire-5-0-relaunches-as-an-open-source-rss-reader-for-the-mac/">NetNewsWire 5.0 Relaunches as an Open-Source RSS Reader for the Mac – The Sweet Setup</a>.</li>
 <li> <a href="https://smilesoftware.com/pdfpen/?">PDF Editor - PDFpen - Edit PDF Files (Smile Software)</a>.</li>
 <li> <a href="http://solutions.weblite.ca/pdfocrx/">PDF OCR X - Mac & Windows OCR Software to convert PDFs and Images to Text</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/macos-app-bookmarks/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/macos-app-bookmarks/index.html</guid>
  <pubDate>Fri, 05 Oct 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>GTD/Get things done bookmarks</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org1f36c05" class="outline-2">
 <h2 id="gtdget-things-done-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">28 August 2018</span></span> GTD/Get things done bookmarks</h2>
 <div class="outline-text-2" id="text-gtdget-things-done-bookmarks">
 <span class="modified-timestamp">   <em>updated: 18 May 2019  </em></span>
 <ul class="org-ul"> <li> <a href="https://jamesstuber.com/plan-your-day/">Daily Time Management with Todoist and Google Calendar | JamesStuber.com</a>.</li>
 <li> <a href="https://klinger.io/post/71640845938/dont-drown-in-email-how-to-use-gmail-more">Don’t drown in email! How to use Gmail more efficiently. - Startup Lessons Learned</a>.</li>
 <li> <a href="https://praxis.fortelabs.co/gtd-x-pkm-8ff720ef6939/">Getting Things Done + Personal Knowledge Management - Praxis</a>.</li>
 <li> <a href="https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html">Orgmode for GTD/Get things done</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/gtdget-things-done-bookmarks/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/gtdget-things-done-bookmarks/index.html</guid>
  <pubDate>Tue, 28 Aug 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Actionable URLs in Emacs buffers</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org6fe096f" class="outline-2">
 <h2 id="actionable-urls-in-emacs-buffers"> <span class="timestamp-wrapper"> <span class="timestamp">22 August 2018</span></span> Actionable URLs in Emacs buffers</h2>
 <div class="outline-text-2" id="text-actionable-urls-in-emacs-buffers">
 <p>
Should have enabled actionable URLs in my Emacs buffers long ago. Can now click or press return to follow links. It's great on eshell, compilation buffers, async shell commands, code, etc.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">goto-addr</span>
   <span style="color: #a71d5d;">:hook</span> ((compilation-mode . goto-address-mode)
         (prog-mode . goto-address-prog-mode)
         (eshell-mode . goto-address-mode)
         (shell-mode . goto-address-mode))
   <span style="color: #a71d5d;">:bind</span> ( <span style="color: #a71d5d;">:map</span> goto-address-highlight-keymap
              ( <span style="color: #183691;">"<RET>"</span> . goto-address-at-point)
              ( <span style="color: #183691;">"M-<RET>"</span> . newline))
   <span style="color: #a71d5d;">:commands</span> (goto-address-prog-mode
             goto-address-mode))
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/actionable-urls-in-emacs-buffers/goto-address.png" alt="goto-address.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/actionable-urls-in-emacs-buffers/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/actionable-urls-in-emacs-buffers/index.html</guid>
  <pubDate>Wed, 22 Aug 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Enabling Control-Meta(⌘)-D on macOS</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org526551c" class="outline-2">
 <h2 id="enabling-control-meta-d-on-macos"> <span class="timestamp-wrapper"> <span class="timestamp">18 August 2018</span></span> Enabling Control-Meta(⌘)-D on macOS</h2>
 <div class="outline-text-2" id="text-enabling-control-meta-d-on-macos">
 <p>
I use command (⌘) as my Emacs Meta key. Recently discovered C-M-d is not available to Emacs for binding keys on macOS. Stack Exchange had the  <a href="https://apple.stackexchange.com/questions/22785/how-do-i-disable-the-command-control-d-word-definition-keyboard-shortcut-in-os-x">workaround</a>:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">defaults write com.apple.symbolichotkeys AppleSymbolicHotKeys -dict-add 70  <span style="color: #183691;">'<dict><key>enabled</key><false/></dict>'</span>
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/enabling-control-meta-d-on-macos/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/enabling-control-meta-d-on-macos/index.html</guid>
  <pubDate>Sat, 18 Aug 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>M-r history search in git-commit-mode</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgd504243" class="outline-2">
 <h2 id="m-r-history-search-in-git-commit-mode"> <span class="timestamp-wrapper"> <span class="timestamp">12 August 2018</span></span> M-r history search in git-commit-mode</h2>
 <div class="outline-text-2" id="text-m-r-history-search-in-git-commit-mode">
 <p>
I've grown accustomed to M-r bindings to search Emacs history. Been wanting similar functionality to search commit message history. Turns out  <i>log-edit-comment-ring</i> has some of my local commit message history. Feeding it to  <i>completing-read</i> gives me an easily searchable history when using a completing framework like ivy or helm:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/git-commit-search-message-history</span> ()
   <span style="color: #183691;">"Search and insert commit message from history."</span>
  ( <span style="color: #a71d5d;">interactive</span>)
  (insert (completing-read  <span style="color: #183691;">"History: "</span>
                            <span style="color: #969896;">;; </span> <span style="color: #969896;">Remove unnecessary newlines from beginning and end.</span>
                           (mapcar ( <span style="color: #a71d5d;">lambda</span> (text)
                                     (string-trim text))
                                   (ring-elements log-edit-comment-ring)))))
</pre>
</div>

 <p>
Now we bind it to  <i>M-r</i> and we're good to go:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">bind-key</span>  <span style="color: #183691;">"M-r"</span> #'ar/git-commit-search-message-history git-commit-mode-map)
</pre>
</div>

 <p>
May also want to persist  <i>log-edit-comment-ring</i> across Emacs sessions by adding  <i>log-edit-comment-ring</i> to savehist variables. Also ensure  <i>savehist-mode</i> is enabled:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(add-to-list 'savehist-additional-variables log-edit-comment-ring)
(savehist-mode +1)
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/m-r-history-search-in-git-commit-mode/m-r-commit-history.png" alt="m-r-commit-history.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/m-r-history-search-in-git-commit-mode/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/m-r-history-search-in-git-commit-mode/index.html</guid>
  <pubDate>Sun, 12 Aug 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Ledger bookmarks</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org535d0bf" class="outline-2">
 <h2 id="ledger-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">08 August 2018</span></span> Ledger bookmarks</h2>
 <div class="outline-text-2" id="text-ledger-bookmarks">
 <span class="modified-timestamp">   <em>updated: 14 December 2019  </em></span>
 <ul class="org-ul"> <li> <a href="https://github.com/adept/full-fledged-hledger">"Full-fledged Hledger" Tutorial (interesting approach with great traceability and regeneration)</a>.</li>
 <li> <a href="https://github.com/adept/full-fledged-hledger/wiki">"Full-fledged Hledger" Tutorial</a>.</li>
 <li> <a href="https://www.khanacademy.org/economics-finance-domain/core-finance/accounting-and-financial-stateme">Accounting and financial statements (Khan Academy)</a>.</li>
 <li> <a href="https://cvillefoss.blog/2019/02/12/accounting-in-plain-text-part-1/">Accounting in Plain Text, Part 1 – cvilleFOSS</a>.</li>
 <li> <a href="http://matthiaskauer.com/2015/08/command-line-accounting-a-look-at-the-various-ledger-ports/">Command Line Accounting - A look at the various ledger ports (mkauer)</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/46hs9q/conquering_your_finances_with_emacs_and_ledger/">Conquering Your Finances with Emacs and Ledger : emacs</a>.</li>
 <li> <a href="https://github.com/awalker4/ledgerTalk2016">Conquering your finances with Emacs and Ledger</a>.</li>
 <li> <a href="https://github.com/ledger/ledger/wiki/CSV-Import">Convert a CSV file (comma separated values) from your bank into ledger format</a>.</li>
 <li> <a href="https://frdmtoplay.com/envelope-budgeting-with-ledger/">Envelope Budgeting with ledger</a>.</li>
 <li> <a href="https://github.com/simonmichael/hledger/tree/master/examples/csv">Examples of recent and older CSV rules files for ledger</a>.</li>
 <li> <a href="https://github.com/adept/full-fledged-hledger">full-fledged-hledger: Tutorial on Hledger setup</a>.</li>
 <li> <a href="https://github.com/barrucadu/finances">GitHub - barrucadu/finances: A small tool to visualise my hledger journal.</a>.</li>
 <li> <a href="https://github.com/Clever/csvlint">GitHub - Clever/csvlint: library and command line tool that validates a CSV file</a>.</li>
 <li> <a href="https://www.reddit.com/r/Bitcoin/comments/155gw5/heres_how_you_use_ledger_to_account_for_bitcoin/">Here's how you use ledger to account for Bitcoin transactions</a>.</li>
 <li> <a href="https://pauley.org.za/hledger-flow/">Hledger Flow: Step-By-Step</a>.</li>
 <li> <a href="https://www.reddit.com/r/plaintextaccounting/comments/8b10o0/importing_trans=actions_from_bank/">Importing transactions from bank. : plaintextaccounting (Reddit)</a>.</li>
 <li> <a href="https://patrickskiba.com/ledger-cli/2019/12/07/introduction-to-ledger-cli.html">Introduction to ledger and text-based accounting | Patrick Skiba</a>.</li>
 <li> <a href="https://sirodoht.com/blog/introduction-to-plain-text-accounting/">Introduction to plain text accounting (sirodoht blog)</a>.</li>
 <li> <a href="https://devhints.io/ledger">Ledger CLI cheatsheet</a>.</li>
 <li> <a href="https://devhints.io/ledger-csv">Ledger CSV format cheatsheet</a>.</li>
 <li> <a href="https://devhints.io/ledger-examples">Ledger examples cheatsheet</a>.</li>
 <li> <a href="https://devhints.io/ledger-periods">Ledger periods cheatsheet</a>.</li>
 <li> <a href="https://devhints.io/ledger-query">Ledger queries cheatsheet</a>.</li>
 <li> <a href="https://github.com/sheehamj13/ledger-reports">Ledger Report Scripts (tested on macOS Mojave)</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=7707262">Ledger, a powerful CLI accounting tool (Hacker News)</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/6a3oxv/ledgerledgermode_tips_and_tricks/">ledger/ledger-mode tips and tricks? (Reddit)</a>.</li>
 <li> <a href="https://www.ledger-cli.org/3.0/doc/ledger3.html#The-convert-command">Ledger: Command-Line Accounting (convert csv command)</a>.</li>
 <li> <a href="https://www.ledger-cli.org/3.0/doc/ledger3.html">Ledger: Command-Line Accounting (documentation)</a>.</li>
 <li> <a href="https://gitlab.com/rjurga/ludget">ludget: ledger-cli data visualization</a>.</li>
 <li> <a href="https://memo.barrucadu.co.uk/personal-finance.html">Memo's personal Finance post on plain-text accounting</a>.</li>
 <li> <a href="https://plaintextaccounting.org/#comparisons">Plain Text Accounting, a guide to Ledger and friends - plaintextaccounting.org (comparisons)</a>.</li>
 <li> <a href="https://plaintextaccounting.org/#data-importconversion">Plain Text Accounting, a guide to Ledger and friends - plaintextaccounting.org (import)</a>.</li>
 <li> <a href="https://www.petekeen.net/keeping-finances-with-ledger">Program your Finances: Command-line Accounting (Pete Keen)</a>.</li>
 <li> <a href="https://www.sundialdreams.com/report-scripts-for-ledger-cli-with-gnuplot/">Report Scripts for Ledger CLI with Gnuplot (日光漫想)</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=17845565">Show HN: Ledger-analytics – Analytics for ledger-cli (Hacker News)</a>.</li>
 <li> <a href="https://github.com/rememberYou/.emacs.d/blob/a095e0e3e88cd64e6ef5e8062d3215d67ad9e285/config.org#ledger">Terencio's Ledger Emacs config</a>.</li>
 <li> <a href="https://plaintextproject.online">The Plain Text Project</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/8x4xtt/tip_how_i_use_ledger_to_track_my_money">TIP: How I use ledger to track my money : emacs</a>.</li>
 <li> <a href="http://rantsideasstuff.com/posts/2018/07/01-tracking-investments-in-lots-with-hledger/">Tracking Investments in Lots with Hledger</a>.</li>
 <li> <a href="https://www.reddit.com/r/plaintextaccounting/comments/bhxdew/unrealized_gains/">Unrealized gains : plaintextaccounting</a>.</li>
 <li> <a href="https://emacs.cafe/ledger/emacs/ynab/budgeting/2018/06/12/elbank-ynab.html">Using Ledger for YNAB-like envelope budgeting</a>.</li>
 <li> <a href="https://memo.barrucadu.co.uk/hledger-influxdb-grafana.html">Visualise your finances with hledger, InfluxDB, and Grafana</a>.</li>
 <li> <a href="https://www.mint.com/mint-categories">Ways to Categorize Your Spending (Mint)</a>.</li>
 <li> <a href="https://github.com/ledger/ledger/wiki/Who's-using-ledger%3F">Who's using ledger? · ledger/ledger Wiki</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/ledger-bookmarks/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/ledger-bookmarks/index.html</guid>
  <pubDate>Wed, 08 Aug 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Tip: Convert .texi to .info</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org77f9045" class="outline-2">
 <h2 id="tip-convert-texi-to-info"> <span class="timestamp-wrapper"> <span class="timestamp">07 August 2018</span></span> Tip: Convert .texi to .info</h2>
 <div class="outline-text-2" id="text-tip-convert-texi-to-info">
 <p>
Convert with:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">makeinfo doc.texi
</pre>
</div>

 <p>
View with:
</p>

 <p>
Open in Emacs and render as info with:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/format-info-mode</span> ()
  ( <span style="color: #a71d5d;">interactive</span>)
  ( <span style="color: #a71d5d;">let</span> ((file-name (buffer-file-name)))
    (kill-buffer (current-buffer))
    (info file-name)))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/tip-convert-texi-to-info/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/tip-convert-texi-to-info/index.html</guid>
  <pubDate>Tue, 07 Aug 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>fitbit API, org babel, and gnuplot</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgdf37b37" class="outline-2">
 <h2 id="fitbit-api-org-babel-and-gnuplot"> <span class="timestamp-wrapper"> <span class="timestamp">11 July 2018</span></span> fitbit API, org babel, and gnuplot</h2>
 <div class="outline-text-2" id="text-fitbit-api-org-babel-and-gnuplot">
 <p>
Retook running recently. Took the dust off my aria scale and used the opportunity to check out fitbit's API.
</p>

 <p>
First register your app at  <a href="https://dev.fitbit.com/apps/new">dev.fitbit.com/apps/new</a> and get a client_id=AABBCC.
</p>


 <div class="figure">
 <p> <img src="../images/fitbit-api-org-babel-and-gnuplot/fitbitapp.png" alt="fitbitapp.png" width="75%" height="75%"></img></p>
</div>

 <p>
You'll also need your USER_ID, from your Fitbitx user profile.
</p>


 <div class="figure">
 <p> <img src="../images/fitbit-api-org-babel-and-gnuplot/fitbituser.png" alt="fitbituser.png" width="75%" height="75%"></img></p>
</div>

 <p>
We'll also need a token. I used the  <a href="https://dev.fitbit.com/build/reference/web-api/oauth2/">implicit grant flow</a> URL in my browser and extracted access_token=TOKEN.
</p>

 <p>
Now let's wire up two org source blocks to fetch the data and subsequently plot using gnuplot.
</p>

 <p>
It's pretty neat. You can take the output from one source block and use it as input to another.
</p>

 <p>
We use curl to fetch data from fitbit's API and pipe through  <a href="https://stedolan.github.io/jq/">jq</a> and sed to massage the output format into two columns.
</p>

 <p>
 <b>Note:</b> Before using gnuplot in org babel, you'll need to install the gnuplot package and add to babel languages.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">gnuplot</span>  <span style="color: #a71d5d;">:ensure</span> t)

( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">ob</span>
   <span style="color: #a71d5d;">:config</span>
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((gnuplot . t))))
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-sh" id="org9f0d96a">curl -s -H  <span style="color: #183691;">"Authorization: Bearer TOKEN"</span> https://api.fitbit.com/1/user/USER_ID/body/weight/date/2018-06-09/2018-07-11.json | jq  <span style="color: #183691;">'.[][] | "\(.dateTime) \(.value)"'</span> | sed  <span style="color: #183691;">'s/"//g'</span>
</pre>
</div>

 <table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"> <colgroup> <col class="org-right"></col> <col class="org-right"></col></colgroup> <tbody> <tr> <td class="org-right">2018-06-09</td>
 <td class="org-right">65.753</td>
</tr> <tr> <td class="org-right">2018-06-10</td>
 <td class="org-right">65.762</td>
</tr> <tr> <td class="org-right">2018-06-11</td>
 <td class="org-right">65.771</td>
</tr> <tr> <td class="org-right">2018-06-12</td>
 <td class="org-right">65.78</td>
</tr> <tr> <td class="org-right">2018-06-13</td>
 <td class="org-right">65.789</td>
</tr> <tr> <td class="org-right">2018-06-14</td>
 <td class="org-right">65.798</td>
</tr> <tr> <td class="org-right">2018-06-15</td>
 <td class="org-right">65.807</td>
</tr> <tr> <td class="org-right">2018-06-16</td>
 <td class="org-right">65.816</td>
</tr> <tr> <td class="org-right">2018-06-17</td>
 <td class="org-right">65.825</td>
</tr> <tr> <td class="org-right">2018-06-18</td>
 <td class="org-right">65.85</td>
</tr> <tr> <td class="org-right">2018-06-19</td>
 <td class="org-right">65.96</td>
</tr> <tr> <td class="org-right">2018-06-20</td>
 <td class="org-right">64.1</td>
</tr> <tr> <td class="org-right">2018-06-21</td>
 <td class="org-right">65.64</td>
</tr> <tr> <td class="org-right">2018-06-22</td>
 <td class="org-right">65.47</td>
</tr> <tr> <td class="org-right">2018-06-23</td>
 <td class="org-right">65.515</td>
</tr> <tr> <td class="org-right">2018-06-24</td>
 <td class="org-right">65.56</td>
</tr> <tr> <td class="org-right">2018-06-25</td>
 <td class="org-right">65.605</td>
</tr> <tr> <td class="org-right">2018-06-26</td>
 <td class="org-right">65.65</td>
</tr> <tr> <td class="org-right">2018-06-27</td>
 <td class="org-right">65.18</td>
</tr> <tr> <td class="org-right">2018-06-28</td>
 <td class="org-right">64.49</td>
</tr> <tr> <td class="org-right">2018-06-29</td>
 <td class="org-right">64.49</td>
</tr> <tr> <td class="org-right">2018-06-30</td>
 <td class="org-right">64.41</td>
</tr> <tr> <td class="org-right">2018-07-01</td>
 <td class="org-right">64.33</td>
</tr> <tr> <td class="org-right">2018-07-02</td>
 <td class="org-right">64.25</td>
</tr> <tr> <td class="org-right">2018-07-03</td>
 <td class="org-right">64.17</td>
</tr> <tr> <td class="org-right">2018-07-04</td>
 <td class="org-right">64.55</td>
</tr> <tr> <td class="org-right">2018-07-05</td>
 <td class="org-right">64.39</td>
</tr> <tr> <td class="org-right">2018-07-06</td>
 <td class="org-right">64.33</td>
</tr> <tr> <td class="org-right">2018-07-07</td>
 <td class="org-right">65.06</td>
</tr> <tr> <td class="org-right">2018-07-08</td>
 <td class="org-right">63.28</td>
</tr> <tr> <td class="org-right">2018-07-09</td>
 <td class="org-right">63.4</td>
</tr> <tr> <td class="org-right">2018-07-10</td>
 <td class="org-right">64.22</td>
</tr> <tr> <td class="org-right">2018-07-11</td>
 <td class="org-right">63.95</td>
</tr></tbody></table> <p>
Now feed the two column data to gnuplot.
</p>

 <div class="org-src-container">
 <pre class="src src-gnuplot"> <span style="color: #0086b3;">reset</span>
 <span style="color: #0086b3;">set</span>  <span style="color: #0086b3;">title</span>  <span style="color: #183691;">"My recent weight"</span>
 <span style="color: #0086b3;">set</span> xdata time
 <span style="color: #0086b3;">set</span> timefmt  <span style="color: #183691;">'%Y-%m-%d'</span>
 <span style="color: #0086b3;">set</span> format x  <span style="color: #183691;">"%d/%m/%y"</span>
 <span style="color: #0086b3;">set</span> term png
 <span style="color: #0086b3;">set</span> xrange [ <span style="color: #183691;">'2018-06-09'</span>: <span style="color: #183691;">'2018-07-11'</span>]
 <span style="color: #a71d5d;">plot</span> data u 1:2  <span style="color: #0086b3;">with</span>  <span style="color: #795da3;">linespoints</span>  <span style="color: #0086b3;">title</span>  <span style="color: #183691;">'Weight in Kg'</span>
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/fitbit-api-org-babel-and-gnuplot/weight.png" alt="weight.png" width="75%" height="75%"></img></p>
</div>

 <p>
Fetching data and plotting through org babel and gnuplot is pretty sweet. I've barely scratched the surface. There's more at  <a href="https://orgmode.org/worg/org-contrib/babel/languages/ob-doc-gnuplot.html">Org-babel-gnuplot</a> and  <a href="https://orgmode.org/worg/org-tutorials/org-plot.html">Plotting tables in Org-Mode using org-plot</a>. Either way, this is another Emacs super power to keep in the toolbox.</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/fitbit-api-org-babel-and-gnuplot/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/fitbit-api-org-babel-and-gnuplot/index.html</guid>
  <pubDate>Wed, 11 Jul 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emacs utilities for your OS</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orge31b457" class="outline-2">
 <h2 id="emacs-utilities-for-your-os"> <span class="timestamp-wrapper"> <span class="timestamp">07 July 2018</span></span> Emacs utilities for your OS</h2>
 <div class="outline-text-2" id="text-emacs-utilities-for-your-os">
 <p>
Narrowing utilities are a wonderful way of increasing productivity. I have a few workflows using Emacs's  <a href="https://github.com/emacs-helm/helm">Helm</a> framework.
</p>

 <p>
There are great productivity boosters like  <a href="https://www.alfredapp.com/">Alfred</a> and  <a href="https://qsapp.com/">Quicksilver</a> for macOS, with batteries included.
</p>

 <p>
If you're a tinkerer, you'd enjoy the powerful  <a href="http://hammerspoon.org/">Hammerspoon</a>. Like elisp gluing all things Emacs, Hammerspoon uses Lua to glue all things macOS. You can build your own narrowing utilities using  <a href="http://www.hammerspoon.org/docs/hs.chooser.html">chooser</a> and a little Lua.
</p>

 <div class="org-src-container">
 <pre class="src src-lua"> <span style="color: #a71d5d;">local</span>  <span style="color: #333333;">chooser</span> = hs.chooser.new( <span style="color: #a71d5d;">function</span>(choice)
      hs.alert.show(choice[ <span style="color: #183691;">'text'</span>])
 <span style="color: #a71d5d;">end</span>)

chooser:choices({
      {
         [ <span style="color: #183691;">"text"</span>] =  <span style="color: #183691;">"Alfred\n"</span>,
         [ <span style="color: #183691;">"subText"</span>] =  <span style="color: #183691;">"macOS only\n"</span>,
      },
      {
         [ <span style="color: #183691;">"text"</span>] =  <span style="color: #183691;">"Quicksilver\n"</span>,
         [ <span style="color: #183691;">"subText"</span>] =  <span style="color: #183691;">"macOS only\n"</span>,
      },
      {
         [ <span style="color: #183691;">"text"</span>] =  <span style="color: #183691;">"Hammerspoon\n"</span>,
         [ <span style="color: #183691;">"subText"</span>] =  <span style="color: #183691;">"macOS only\n"</span>,
      },
      {
         [ <span style="color: #183691;">"text"</span>] =  <span style="color: #183691;">"Emacs\n"</span>,
         [ <span style="color: #183691;">"subText"</span>] =  <span style="color: #183691;">"is everywhere :)\n"</span>,
      },
})
chooser:show()
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/emacs-utilities-for-your-os/chooser.png" alt="chooser.png" width="75%" height="75%"></img></p>
</div>

 <p>
Howard Abrams's post on  <a href="http://howardism.org/Technical/Emacs/capturing-content.html">Capturing Content for Emacs</a> inspired me to look at gluing Emacs and macOS to launch my own cross-platform narrowing utilities.
</p>

 <p>
I've also taken this opportunity to look at Oleh Krehel's wonderful completion package:  <a href="https://github.com/abo-abo/swiper">Ivy</a>. We can use it to build a macOS narrowing utility.
</p>

 <p>
Ivy is remarkably easy to use. Turns out,  <a href="http://oremacs.com/swiper/#api">ivy-read</a> is all you need. A simple Emacs completion can be accomplished with little elisp.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(ivy-read  <span style="color: #183691;">"Hello ivy: "</span>
          '( <span style="color: #183691;">"One "</span>
             <span style="color: #183691;">"Two "</span>
             <span style="color: #183691;">"Three "</span>
             <span style="color: #183691;">"Four "</span>))
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/emacs-utilities-for-your-os/simple_ivy.png" alt="simple_ivy.png" width="50%" height="50%"></img></p>
</div>

 <p>
Pretty nifty. Let's make this completion more accessible from the rest of the OS. To do so, we create a separate Emacs frame and make it pretty. We also want it to interact with the OS. We'll use  <i>ivy-read</i>'s  <i>:action</i> to invoke a tiny bit of AppleScript.
</p>

 <p>
Oh and we'll also use some funny quotes to tease ourselves about our beloved editor.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">with-current-buffer</span> (get-buffer-create  <span style="color: #183691;">"*modal-ivy*"</span>)
  ( <span style="color: #a71d5d;">let</span> ((frame (make-frame '((auto-raise . t)
                             (background-color .  <span style="color: #183691;">"DeepSkyBlue3"</span>)
                             (cursor-color .  <span style="color: #183691;">"MediumPurple1"</span>)
                             (font .  <span style="color: #183691;">"Menlo 15"</span>)
                             (foreground-color .  <span style="color: #183691;">"#eeeeec"</span>)
                             (height . 20)
                             (internal-border-width . 20)
                             (left . 0.33)
                             (left-fringe . 0)
                             (line-spacing . 3)
                             (menu-bar-lines . 0)
                             (minibuffer . only)
                             (right-fringe . 0)
                             (tool-bar-lines . 0)
                             (top . 48)
                             (undecorated . t)
                             (unsplittable . t)
                             (vertical-scroll-bars . nil)
                             (width . 110)))))
    (set-face-attribute 'ivy-minibuffer-match-face-1 frame
                         <span style="color: #a71d5d;">:background</span> nil
                         <span style="color: #a71d5d;">:foreground</span> nil)
    (set-face-attribute 'ivy-minibuffer-match-face-2 frame
                         <span style="color: #a71d5d;">:background</span> nil
                         <span style="color: #a71d5d;">:foreground</span>  <span style="color: #183691;">"orange1"</span>)
    (set-face-attribute 'ivy-minibuffer-match-face-3 frame
                         <span style="color: #a71d5d;">:background</span> nil
                         <span style="color: #a71d5d;">:foreground</span>  <span style="color: #183691;">"orange1"</span>)
    (set-face-attribute 'ivy-minibuffer-match-face-4 frame
                         <span style="color: #a71d5d;">:background</span> nil
                         <span style="color: #a71d5d;">:foreground</span>  <span style="color: #183691;">"orange1"</span>)
    (set-face-attribute 'ivy-current-match frame
                         <span style="color: #a71d5d;">:background</span>  <span style="color: #183691;">"#ffc911"</span>
                         <span style="color: #a71d5d;">:foreground</span>  <span style="color: #183691;">"red"</span>)
    (set-face-attribute 'minibuffer-prompt frame
                         <span style="color: #a71d5d;">:foreground</span>  <span style="color: #183691;">"grey"</span>)
    ( <span style="color: #a71d5d;">let</span> ((ivy-height 20)
          (ivy-count-format  <span style="color: #183691;">""</span>))
      (ivy-read  <span style="color: #183691;">"Emacs acronyms: "</span>
                '( <span style="color: #183691;">" Emacs: Escape-Meta-Alt-Control-Shift "</span>
                   <span style="color: #183691;">" Emacs: Eight Megabytes And Constantly Swapping "</span>
                   <span style="color: #183691;">" Emacs: Even a Master of Arts Comes Simpler "</span>
                   <span style="color: #183691;">" Emacs: Each Manual's Audience is Completely Stupified "</span>
                   <span style="color: #183691;">" Emacs: Eventually Munches All Computer Storage "</span>
                   <span style="color: #183691;">" Emacs: Eradication of Memory Accomplished with Complete Simplicity "</span>
                   <span style="color: #183691;">" Emacs: Easily Maintained with the Assistance of Chemical Solutions "</span>
                   <span style="color: #183691;">" Emacs: Extended Macros Are Considered Superfluous "</span>
                   <span style="color: #183691;">" Emacs: Every Mode Accelerates Creation of Software "</span>
                   <span style="color: #183691;">" Emacs: Elsewhere Maybe All Commands are Simple "</span>
                   <span style="color: #183691;">" Emacs: Emacs Makes All Computing Simple "</span>
                   <span style="color: #183691;">" Emacs: Emacs Masquerades As Comfortable Shell "</span>
                   <span style="color: #183691;">" Emacs: Emacs My Alternative Computer Story "</span>
                   <span style="color: #183691;">" Emacs: Emacs Made Almost Completely Screwed "</span>
                   <span style="color: #183691;">" Emacs: Each Mail A Continued Surprise "</span>
                   <span style="color: #183691;">" Emacs: Eating Memory And Cycle-Sucking "</span>
                   <span style="color: #183691;">" Emacs: Elvis Masterminds All Computer Software "</span>
                   <span style="color: #183691;">" Emacs: Emacs Makes A Computer Slow"</span> )
                 <span style="color: #a71d5d;">:action</span> ( <span style="color: #a71d5d;">lambda</span> (funny-quote)
                          (async-shell-command (format  <span style="color: #183691;">"osascript -e 'tell app \"System Events\" to display dialog \"%s\" buttons {\"OK\"}'"</span> funny-quote)))
                 <span style="color: #a71d5d;">:unwind</span> ( <span style="color: #a71d5d;">lambda</span> ()
                          (shell-command  <span style="color: #183691;">"/Applications/Hammerspoon.app/Contents/Resources/extensions/hs/ipc/bin/hs -c 'backFromEmacs()'"</span>)
                          (delete-frame)
                          (other-window 1))))))
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/emacs-utilities-for-your-os/ivy_frame.gif" alt="ivy_frame.gif" width="100%" height="100%"></img></p>
</div>

 <p>
So where's all this going? I wrote a utility to extract all links from  <a href="https://raw.githubusercontent.com/xenodium/xenodium.github.io/master/index.org">this page's org file</a> and make them easily searchable from anywhere on macOS by invoking  <b>⌥-W</b>.
</p>

 <p>
The keys are bound using Lua, Hammerspoon, and emacsclient. This works well on macOS, but there are alternatives for other operating systems.
</p>

 <div class="org-src-container">
 <pre class="src src-lua">hs.execute( <span style="color: #183691;">"emacsclient -ne \""</span>..elisp.. <span style="color: #183691;">"\" -s /tmp/emacs*/server"</span>)
</pre>
</div>

 <p>
Here's the resulting utility in action:
</p>


 <div class="figure">
 <p> <img src="../images/emacs-utilities-for-your-os/ivy_links.gif" alt="ivy_links.gif" width="100%" height="100%"></img></p>
</div>

 <p>
These integrations look promising. They enable me to bring cross-platform Emacs utilities into areas I hadn't considered.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-utilities-for-your-os/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-utilities-for-your-os/index.html</guid>
  <pubDate>Sat, 07 Jul 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Trying out mu4e with mbsync</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org8fe6029" class="outline-2">
 <h2 id="trying-out-mu4e-with-mbsync"> <span class="timestamp-wrapper"> <span class="timestamp">17 June 2018</span></span> Trying out mu4e with mbsync</h2>
 <div class="outline-text-2" id="text-trying-out-mu4e-with-mbsync">
 <p>
The email fun in Emacs continues. After a few weeks since I  <a href="../trying-out-mu4e-and-offlineimap">started using mu4e and offlineimap</a>, I'm sold. Both are awesome.  <a href="http://isync.sourceforge.net/mbsync.html">Mbsync</a> is an  <a href="http://www.offlineimap.org/">offlineimap</a> alternative. Despite resyncing all my mail, the transition was fairly smooth. Here's how…
</p>
</div>

 <div id="outline-container-orgfe1cf1f" class="outline-3">
 <h3 id="orgfe1cf1f">Install isync (for mbsync)</h3>
 <div class="outline-text-3" id="text-orgfe1cf1f">
 <div class="org-src-container">
 <pre class="src src-sh">brew install isync
</pre>
</div>
</div>
</div>

 <div id="outline-container-org2dcf109" class="outline-3">
 <h3 id="org2dcf109">Configure mbsync</h3>
 <div class="outline-text-3" id="text-org2dcf109">
 <p>
Mbsync uses  <code>~/.mbsyncrc</code> for configuration. Migrating  <a href="../trying-out-mu4e-and-offlineimap">~/.offlineimaprc</a> to  <code>~/.mbsyncrc</code> looks like:
</p>

 <div class="org-src-container">
 <pre class="src src-conf">IMAPAccount Personal
Host some.imap.host.com
User your_user_name
PassCmd  <span style="color: #183691;">"gpg --quiet --batch -d ~/.offlineimap_accountname.gpg"</span>
Port 993
SSLType IMAPS
AuthMechs Login
CertificateFile  ~/.offlineimapcerts.pem
 <span style="color: #969896;"># </span> <span style="color: #969896;">My IMAP provider doesn't handle concurrent IMAP commands.</span>
PipelineDepth 1

IMAPStore Personal-remote
Account Personal

MaildirStore Personal-local
Path ~/IMAP/Personal/
Inbox ~/IMAP/Personal/INBOX

Channel Personal
Master :Personal-remote:
Slave :Personal-local:
Patterns *
Create Slave
Sync All
Expunge Both
SyncState *
</pre>
</div>
</div>
</div>
 <div id="outline-container-org2d741a8" class="outline-3">
 <h3 id="org2d741a8">No concurrent IMAP commands supported</h3>
 <div class="outline-text-3" id="text-org2d741a8">
 <p>
My IMAP provider doesn't handle concurrent IMAP commands.  <a href="https://kdecherf.com/blog/2017/05/01/mbsync-and-office-365/">mbsync and Office 365</a> had the answer:
</p>

 <div class="org-src-container">
 <pre class="src src-conf">PipelineDepth 1
</pre>
</div>
</div>
</div>

 <div id="outline-container-orge9a3367" class="outline-3">
 <h3 id="orge9a3367">Initial sync</h3>
 <div class="outline-text-3" id="text-orge9a3367">
 <p>
Run initial from the command line sync:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">mbsync -Va
</pre>
</div>

 <p>
While syncing my largest inbox, it sometimes received an unexpected EOF error:
</p>

 <pre class="example">
IMAP error: unexpected EOF from some.imap.host.com (1.2.3.4:993)
</pre>

 <p>
First few times, I restarted the syncing manually, but then used a loop to automatically restart it.
</p>

 <p>
Bash loops:
</p>

 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #a71d5d;">while</span> true;  <span style="color: #a71d5d;">do</span> mbsync -V Personal; sleep 5;  <span style="color: #a71d5d;">done</span>
</pre>
</div>

 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #a71d5d;">for</span> i <span style="color: #a71d5d;"> in</span> {1..5};  <span style="color: #a71d5d;">do</span> mbsync -V Personal; sleep 5 done
</pre>
</div>

 <p>
Eshell loop:
</p>

 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #a71d5d;">for</span> i <span style="color: #a71d5d;"> in</span> (number-sequence 1 10) {mbsync -V Personal; sleep 5}
</pre>
</div>
</div>
</div>

 <div id="outline-container-org8d03c20" class="outline-3">
 <h3 id="org8d03c20">Create mu index</h3>
 <div class="outline-text-3" id="text-org8d03c20">
 <p>
Reindex using mu, but first remove existing index for offlineimap messages:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">rm -rf ~/.mu
</pre>
</div>

 <p>
Ok, do index now:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">mu index --maildir=~/IMAP
</pre>
</div>
</div>
</div>

 <div id="outline-container-org5a60d6d" class="outline-3">
 <h3 id="org5a60d6d">Mu4e tweaks</h3>
 <div class="outline-text-3" id="text-org5a60d6d">
 <p>
The  <i>get mail</i> command should now point to mbsync.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(csetq mu4e-get-mail-command  <span style="color: #183691;">"mbsync -Va"</span>)
</pre>
</div>

 <p>
I had issues with duplicate IDs after moving and deleting messages from mu4e.  <a href="http://pragmaticemacs.com/emacs/migrating-from-offlineimap-to-mbsync-for-mu4e/">Migrating from offlineimap to mbsync for mu4e</a> had the answer:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(csetq mu4e-change-filenames-when-moving t)
</pre>
</div>
</div>
</div>

 <div id="outline-container-org3f575a6" class="outline-3">
 <h3 id="org3f575a6">Helpful references</h3>
 <div class="outline-text-3" id="text-org3f575a6">
 <ul class="org-ul"> <li> <a href="https://webgefrickel.de/blog/a-modern-mutt-setup">A modern mutt setup with neomutt, mbsync, msmtp and mu — part one | webgefrickel</a>.</li>
 <li> <a href="http://pragmaticemacs.com/emacs/migrating-from-offlineimap-to-mbsync-for-mu4e/">Migrating from offlineimap to mbsync for mu4e | Pragmatic Emacs</a>.</li>
 <li> <a href="https://copyninja.info/blog/email_setup.html">My personal Email setup - Notmuch, mbsync, postfix and dovecot</a>.</li>
 <li> <a href="https://github.com/jeremy-compostella/org-msg/blob/master/README.org">org-msg: Compose and reply to emails in a Outlook HTML friendly style</a>.</li>
 <li> <a href="http://www.ict4g.net/adolfo/notes/2014/12/27/EmacsIMAP.html">Reading IMAP Mail in Emacs on OSX</a>.</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/trying-out-mu4e-with-mbsync/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/trying-out-mu4e-with-mbsync/index.html</guid>
  <pubDate>Sun, 17 Jun 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Sticky function keys on touch bar</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org5782a3f" class="outline-2">
 <h2 id="sticky-function-keys-on-touch-bar"> <span class="timestamp-wrapper"> <span class="timestamp">15 June 2018</span></span> Sticky function keys on touch bar</h2>
 <div class="outline-text-2" id="text-sticky-function-keys-on-touch-bar">
 <p>
Visible (and sticky) function keys are not the touch bar default for Emacs. Let's change that:
</p>


 <div class="figure">
 <p> <img src="../images/sticky-function-keys-on-touch-bar/touchbar_function_keys.png" alt="touchbar_function_keys.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/sticky-function-keys-on-touch-bar/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/sticky-function-keys-on-touch-bar/index.html</guid>
  <pubDate>Fri, 15 Jun 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Trying out mu4e and offlineimap</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgafbfe96" class="outline-2">
 <h2 id="trying-out-mu4e-and-offlineimap"> <span class="timestamp-wrapper"> <span class="timestamp">28 May 2018</span></span> Trying out mu4e and offlineimap</h2>
 <div class="outline-text-2" id="text-trying-out-mu4e-and-offlineimap">

 <div class="figure">
 <p> <img src="../images/trying-out-mu4e-and-offlineimap/mu4e.png" alt="mu4e.png" width="75%" height="75%"></img></p>
</div>

 <p>
Managing Email from Emacs. Surely that's crazy-talk, but hey… let's give it a try.
</p>
</div>

 <div id="outline-container-orge00cf03" class="outline-3">
 <h3 id="orge00cf03">Install offlineimap</h3>
 <div class="outline-text-3" id="text-orge00cf03">
 <p>
Need to sync via imap. Use offlineimap. I'm on macOS, so homebrew is king for installing:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew install offlineimap
</pre>
</div>

 <p>
Before can configure offlineimap, we'll need to handle a few things first.
</p>
</div>
</div>

 <div id="outline-container-orge7d1b75" class="outline-3">
 <h3 id="orge7d1b75">Get a cert fingerprint</h3>
 <div class="outline-text-3" id="text-orge7d1b75">
 <p>
Use openssl for getting a certificate fingerprint. From offlineimap's  <a href="http://www.offlineimap.org/doc/FAQ.html#view-the-fingerprint">FAQ:</a>
</p>

 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #333333;">SSL_CERT_DIR</span>= <span style="color: #183691;">""</span> openssl s_client -connect imap.migadu.com:993 < /dev/null 2>/dev/null | openssl x509 -fingerprint -noout -text -in /dev/stdin
</pre>
</div>

 <p>
Should give you something like:
</p>

 <blockquote>
 <p>
SHA1 Fingerprint=AA:BB:CC:DD:EE:DD:FF:AA:00:AA:2A:AA:AA:AA:A8:20:80:AA:A2:AA
</p>
</blockquote>
</div>
</div>

 <div id="outline-container-orge9d5b7d" class="outline-3">
 <h3 id="orge9d5b7d">Encrypt password</h3>
 <div class="outline-text-3" id="text-orge9d5b7d">
 <p>
Offlineimap can read passwords in plain text in its .offlineimaprc config file, but that's yuckie. Let's encrypt the password and use gnupg for that. Install it:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew install gnupg
</pre>
</div>

 <p>
If you haven't already, generate a key
</p>

 <div class="org-src-container">
 <pre class="src src-sh">gpg --full-gen-key
</pre>
</div>

 <p>
Generate an offlineimap account password file.
</p>

 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #a71d5d;">echo</span>  <span style="color: #183691;">"YourPassword"</span> | gpg --encrypt --recipient  <span style="color: #183691;">"Your Name"</span> -o ~/.offlineimap_accountname.gpg
</pre>
</div>
</div>
</div>

 <div id="outline-container-org41dfdf2" class="outline-3">
 <h3 id="org41dfdf2">Python password  wrapper</h3>
 <div class="outline-text-3" id="text-org41dfdf2">
 <p>
Based on Fabian's  <a href="https://f-koehler.github.io/posts/2015-03-17-offlineimap-msmtp-gnupg.html">Encrypt OfflineIMAP and msmtp password with GnuPG</a>, I created ~/.read_password.py with:
</p>

 <div class="org-src-container">
 <pre class="src src-python"> <span style="color: #a71d5d;">import</span> os
 <span style="color: #a71d5d;">import</span> subprocess

 <span style="color: #a71d5d;">def</span>  <span style="color: #795da3;">read_password</span>(path):
   <span style="color: #a71d5d;">return</span> subprocess.check_output([ <span style="color: #183691;">"gpg\n"</span>,  <span style="color: #183691;">"--quiet\n"</span>,  <span style="color: #183691;">"--batch\n"</span>,  <span style="color: #183691;">"-d\n"</span>, os.path.expanduser(path)]).strip()
</pre>
</div>

 <p>
ps. Alternatively, see  <a href="http://stevelosh.com/blog/2012/10/the-homely-mutt/#retrieving-passwords">The homely Mutt</a>'s section to store password in macOS's keychain.
</p>
</div>
</div>

 <div id="outline-container-orgbc1b627" class="outline-3">
 <h3 id="orgbc1b627">Configure offlineimap</h3>
 <div class="outline-text-3" id="text-orgbc1b627">
 <p>
Offlineimap uses ~/.offlineimaprc for configuration. We now have all we need to put the configuration together:
</p>

 <div class="org-src-container">
 <pre class="src src-conf">[ <span style="color: #0086b3;">general</span>]
 <span style="color: #333333;">accounts</span> = Personal

 <span style="color: #969896;"># </span> <span style="color: #969896;">Load this python file.</span>
 <span style="color: #333333;">pythonfile</span> = ~/.read_password.py

[ <span style="color: #0086b3;">Account Personal</span>]
 <span style="color: #333333;">localrepository</span> = Personal-Local

 <span style="color: #333333;">remoterepository</span> = Personal-Remote

 <span style="color: #969896;"># </span> <span style="color: #969896;">After syncing, let mu index it.</span>
 <span style="color: #333333;">postsynchook</span> = mu index --maildir ~/stuff/active/Mail

 <span style="color: #969896;"># </span> <span style="color: #969896;">Sync imap every 5 minutes.</span>
 <span style="color: #333333;">autorefresh</span> = 5

 <span style="color: #969896;"># </span> <span style="color: #969896;">Alternate between 10 quick syncs and full syncs.</span>
 <span style="color: #333333;">quick</span> = 10

[ <span style="color: #0086b3;">Repository Personal-Local</span>]
 <span style="color: #333333;">type</span> = Maildir
 <span style="color: #333333;">localfolders</span> = ~/stuff/active/Mail/Personal

[ <span style="color: #0086b3;">Repository Personal-Remote</span>]
 <span style="color: #333333;">type</span> = IMAP
 <span style="color: #333333;">remotehost</span> = some.imap.host.com
 <span style="color: #333333;">remoteuser</span> = your_user_name

 <span style="color: #969896;"># </span> <span style="color: #969896;">Use function defined in .read_password.py to read the password.</span>
 <span style="color: #333333;">remotepasseval</span> = read_password( <span style="color: #183691;">"~/.offlineimap_personal_account_password.gpg"</span>)

 <span style="color: #969896;"># </span> <span style="color: #969896;">Use the SHA1 fingerprint retrieved with openssl.</span>
 <span style="color: #333333;">cert_fingerprint</span> = aabbccddeeddffaa00aa2aaaaaaaa82080aaa2aa
</pre>
</div>
</div>

 <div id="outline-container-org0dd103e" class="outline-4">
 <h4 id="org0dd103e">Cert file</h4>
 <div class="outline-text-4" id="text-org0dd103e">
 <p>
You can use macOS's certificates from Keychain Access -> System Roots -> Certificates, select all, and ⌘-⇧-e (for export items). Save to ~/certs.pem and use offlineimap configutation:
</p>

 <blockquote>
 <p>
sslcacertfile = /path/to/certs.pem
</p>
</blockquote>

 <p>
Another option is executing lib/mk-ca-bundle.pl from curl's tarball to generate ca-bundle.crt, using certdata.txt from Mozilla's source tree.
</p>
</div>
</div>
</div>

 <div id="outline-container-org2d7f8df" class="outline-3">
 <h3 id="org2d7f8df">Install mu4e</h3>
 <div class="outline-text-3" id="text-org2d7f8df">
 <p>
Manually modified mu4e recipe to pick up my Emacs binary. TIL about homebrew's edit command:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew edit mu
</pre>
</div>

 <p>
Changed the one line:
</p>

 <blockquote>
 <ul class="org-ul"> <li>ENV["EMACS"] = "no" if build.without? "emacs"</li>
 <li>ENV["EMACS"] = "/Users/alvaro/homebrew/Cellar/emacs-plus/26.1-rc1_2/bin/emacs"</li>
</ul></blockquote>

 <p>
Finally installed mu4e:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew install mu
</pre>
</div>
</div>
</div>

 <div id="outline-container-orge44e847" class="outline-3">
 <h3 id="orge44e847">Configure mu4e</h3>
 <div class="outline-text-3" id="text-orge44e847">
 <p>
Lastly, configure mu4e:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(add-to-list 'load-path
             (expand-file-name  <span style="color: #183691;">"~/homebrew/share/emacs/site-lisp/mu/mu4e"</span>))
( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">mu4e</span>
   <span style="color: #a71d5d;">:config</span>
   <span style="color: #969896;">;; </span> <span style="color: #969896;">Update mail using 'U' in main view:</span>
  ( <span style="color: #a71d5d;">setq</span> mu4e-get-mail-command  <span style="color: #183691;">"offlineimap"</span>)
  ( <span style="color: #a71d5d;">setq</span> mu4e-view-show-addresses t)
  ( <span style="color: #a71d5d;">setq</span> mu4e-attachment-dir (expand-file-name  <span style="color: #183691;">"~/Downloads/"</span>))
  ( <span style="color: #a71d5d;">setq</span> mu4e-maildir  <span style="color: #183691;">"path/to/Mail"</span>)
  ( <span style="color: #a71d5d;">setq</span> mu4e-html2text-command  <span style="color: #183691;">"w3m -T text/html"</span>)  <span style="color: #969896;">;; </span> <span style="color: #969896;">alternatively "textutil -stdin -format html -convert txt -stdout"</span>
  ( <span style="color: #a71d5d;">setq</span> mu4e-user-mail-address-list '( <span style="color: #183691;">"myself@domain1.com"</span>
                                       <span style="color: #183691;">"myself@domain2.com"</span>))
  ( <span style="color: #a71d5d;">setq</span> mu4e-context-policy 'pick-first)
  ( <span style="color: #a71d5d;">setq</span> mu4e-compose-context-policy 'always-ask)
  ( <span style="color: #a71d5d;">setq</span> mu4e-contexts
        (list
         (make-mu4e-context
           <span style="color: #a71d5d;">:name</span>  <span style="color: #183691;">"domain1"</span>
           <span style="color: #a71d5d;">:enter-func</span> ( <span style="color: #a71d5d;">lambda</span> () (mu4e-message  <span style="color: #183691;">"Entering context myself@domain1.com"</span>))
           <span style="color: #a71d5d;">:leave-func</span> ( <span style="color: #a71d5d;">lambda</span> () (mu4e-message  <span style="color: #183691;">"Leaving context myself@domain1.com"</span>))
           <span style="color: #a71d5d;">:match-func</span> ( <span style="color: #a71d5d;">lambda</span> (msg)
                        ( <span style="color: #a71d5d;">when</span> msg
                          (mu4e-message-contact-field-matches
                           msg '( <span style="color: #a71d5d;">:from</span>  <span style="color: #a71d5d;">:to</span>  <span style="color: #a71d5d;">:cc</span>  <span style="color: #a71d5d;">:bcc</span>)  <span style="color: #183691;">"myself@domain1.com"</span>)))
           <span style="color: #a71d5d;">:vars</span> '((user-mail-address .  <span style="color: #183691;">"myself@domain1.com"</span>)
                  (user-full-name .  <span style="color: #183691;">"My name"</span>)
                  (mu4e-sent-folder .  <span style="color: #183691;">"/Domain1/Sent"</span>)
                  (mu4e-drafts-folder .  <span style="color: #183691;">"/Domain1/Drafts"</span>)
                  (mu4e-trash-folder .  <span style="color: #183691;">"/Domain1/Trash"</span>)
                  (mu4e-compose-signature . nil)
                  (mu4e-compose-format-flowed . nil)
                  (smtpmail-smtp-user .  <span style="color: #183691;">"myself@domain1.com"</span>)
                  (smtpmail-smtp-server .  <span style="color: #183691;">"smtp.domain1.com"</span>)
                  (smtpmail-smtp-service . 587)))
         (make-mu4e-context
           <span style="color: #a71d5d;">:name</span>  <span style="color: #183691;">"domain2"</span>
           <span style="color: #a71d5d;">:enter-func</span> ( <span style="color: #a71d5d;">lambda</span> () (mu4e-message  <span style="color: #183691;">"Entering context myself@domain2.com"</span>))
           <span style="color: #a71d5d;">:leave-func</span> ( <span style="color: #a71d5d;">lambda</span> () (mu4e-message  <span style="color: #183691;">"Leaving context myself@domain2.com"</span>))
           <span style="color: #a71d5d;">:match-func</span> ( <span style="color: #a71d5d;">lambda</span> (msg)
                        ( <span style="color: #a71d5d;">when</span> msg
                          (mu4e-message-contact-field-matches
                           msg '( <span style="color: #a71d5d;">:from</span>  <span style="color: #a71d5d;">:to</span>  <span style="color: #a71d5d;">:cc</span>  <span style="color: #a71d5d;">:bcc</span>)  <span style="color: #183691;">"myself@domain2.com"</span>)))
           <span style="color: #a71d5d;">:vars</span> '((user-mail-address .  <span style="color: #183691;">"myself@domain2.com"</span>)
                  (user-full-name .  <span style="color: #183691;">"My name"</span>)
                  (mu4e-sent-folder .  <span style="color: #183691;">"/Domain2/Sent"</span>)
                  (mu4e-drafts-folder .  <span style="color: #183691;">"/Domain2/Drafts"</span>)
                  (mu4e-trash-folder .  <span style="color: #183691;">"/Domain2/Trash"</span>)
                  (mu4e-compose-signature . nil)
                  (mu4e-compose-format-flowed . nil)
                  (smtpmail-smtp-user .  <span style="color: #183691;">"myself@domain2.com"</span>)
                  (smtpmail-smtp-server .  <span style="color: #183691;">"smtp.domain2.com"</span>)
                  (smtpmail-smtp-service . 587))))))

( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">smtpmail</span>
   <span style="color: #a71d5d;">:config</span>
  ( <span style="color: #a71d5d;">setq</span> smtpmail-stream-type 'starttls)
  ( <span style="color: #a71d5d;">setq</span> smtpmail-debug-info t)
  ( <span style="color: #a71d5d;">setq</span> smtpmail-warn-about-unknown-extensions t)
  ( <span style="color: #a71d5d;">setq</span> smtpmail-queue-mail t)
  ( <span style="color: #a71d5d;">setq</span> smtpmail-default-smtp-server nil)
   <span style="color: #969896;">;; </span> <span style="color: #969896;">Created with mu mkdir path/to/Mail/queue</span>
   <span style="color: #969896;">;; </span> <span style="color: #969896;">Also avoid indexing.</span>
   <span style="color: #969896;">;; </span> <span style="color: #969896;">touch path/to/Mail/queue/.noindex</span>
  ( <span style="color: #a71d5d;">setq</span> smtpmail-queue-dir  <span style="color: #183691;">"path/to/Mail/queue/cur"</span>))

( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">message</span>
   <span style="color: #a71d5d;">:config</span>
  ( <span style="color: #a71d5d;">setq</span> message-send-mail-function 'smtpmail-send-it))
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgc141eb7" class="outline-3">
 <h3 id="orgc141eb7">Authinfo</h3>
 <div class="outline-text-3" id="text-orgc141eb7">
 <p>
Create an ~/.authinfo file for sendmail authentication with:
</p>

 <pre class="example">
machine smtp.host1.com login account1@host1.com password somepassword1
machine smtp.host2.com login account2@host2.com password somepassword2
</pre>

 <p>
Encrypt ~/.authinfo with M-x epa-encrypt-file. Keep ~/.authinfo.gpg and delete ~/.authinfo.
</p>
</div>
</div>

 <div id="outline-container-org1ef16af" class="outline-3">
 <h3 id="org1ef16af">Mu4e helpful references</h3>
 <div class="outline-text-3" id="text-org1ef16af">
 <ul class="org-ul"> <li> <a href="http://cachestocaches.com/2017/3/complete-guide-email-emacs-using-mu-and-">A Complete Guide to Email in Emacs using Mu and Mu4e</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/5fkq7r/a_year_with_notmuch_mail_a_superfast_email_client/">A year with Notmuch mail - a super-fast email client available on Emacs</a>.</li>
 <li> <a href="https://dev.to/shrysr/archaic-text-based-email-clients-rock-3flm">Archaic: text based email clients rock - DEV Community (lots of great links)</a>.</li>
 <li> <a href="https://gist.github.com/areina/3879626">areina's Manage your email in emacs with mu4e</a>.</li>
 <li> <a href="https://notanumber.io/2016-10-03/better-email-with-mu4e/">Better Email with mu4e (NaN)</a>.</li>
 <li> <a href="https://vxlabs.com/2014/06/06/configuring-emacs-mu4e-with-nullmailer-offlineimap-and-multiple-identities/">Configuring Emacs mu4e with nullmailer, offlineimap and multiple identities</a>.</li>
 <li> <a href="http://www.macs.hw.ac.uk/~rs46/posts/2014-01-13-mu4e-email-client.html">Drowning in Email; mu4e to the Rescue</a>.</li>
 <li> <a href="https://ebzzry.io/en/emacs-mail/">Ebzzry: Setting up Mail in Emacs</a>.</li>
 <li> <a href="http://www.kirang.in/2014/11/13/emacs-as-email-client-with-offlineimap-and-mu4e-on-osx">Emacs as email client with offlineimap and mu4e on OS X</a>.</li>
 <li> <a href="https://zmalltalker.com/linux/mu.html">Email done right (mu)</a>.</li>
 <li> <a href="https://f-koehler.github.io/posts/2015-03-17-offlineimap-msmtp-gnupg.html">Encrypt OfflineIMAP and msmtp password with GnuPG</a>.</li>
 <li> <a href="https://etienne.depar.is/emacs.d/mu4e.html">Etienne's Mu4e customization</a>.</li>
 <li> <a href="https://github.com/OfflineIMAP/imapfw">GitHub - OfflineIMAP/imapfw: imapfw (IMAP/mail framework)</a>.</li>
 <li> <a href="https://github.com/kensanata/ggg">Gmail Gnus GPG Guide (GGGG)</a>.</li>
 <li> <a href="https://martinralbrecht.wordpress.com/2016/05/30/handling-email-with-emacs/">Handling Email with Emacs</a> (helm included).</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/5hfcid/i_got_mu4e_working/">I got mu4e working! (Reddit)</a>.</li>
 <li> <a href="https://blog.danielgempesaw.com/post/43467552978/installing-mu-and-mu4e-with-homebrew-with-emacs">Installing mu and mu4e with homebrew with emacs</a>.</li>
 <li> <a href="https://github.com/iqbalansari/dotEmacs/blob/master/config/mail.org">Iqbal Ansari's mail config</a>.</li>
 <li> <a href="http://pragmaticemacs.com/emacs/master-your-inbox-with-mu4e-and-org-mode/">Master your inbox with mu4e and org-mode</a>.</li>
 <li> <a href="https://github.com/djcb/mu">Mu's github mirror</a>.</li>
 <li> <a href="http://www.djcbsoftware.nl/code/mu">Mu's page</a>.</li>
 <li> <a href="http://wenshanren.org/?p=111">mu4e: an E-mail Client for Emacs</a>.</li>
 <li> <a href="http://rudolfochrist.github.io/blog/2015/03/21/offlineimap-with-ssl-files-on-osx/">OfflineIMAP with SSL files on OSX - Sebastian Christ</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=14221501">OfflineIMAP: sync and backup tool for IMAP (Hacker News) and mbsync in comments</a>.</li>
 <li> <a href="https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/gnus-guide-en.org">Practical guide to use Gnus with Gmail</a>.</li>
 <li> <a href="http://pragmaticemacs.com/mu4e-tutorials/">Pragmatic Emacs's mu4e tutorials</a>.</li>
 <li> <a href="http://prodissues.com/2016/02/adding-mu4e-support-to-emacs.html">Prodissues: Adding mu4e Support To Emacs</a>.</li>
 <li> <a href="http://prodissues.com/2016/02/emacs-gpg-for-dummies.html">Prodissues: Emacs GPG For Dummies</a>.</li>
 <li> <a href="http://ict4g.net/adolfo/notes/2014/12/27/emacs-imap.html">Reading IMAP Mail in Emacs on OSX</a>.</li>
 <li> <a href="https://vxlabs.com/2019/07/03/send-queued-mails-in-background-with-mu4e/">Sending queued mails in the background with mu4e</a>.</li>
 <li> <a href="https://aliquote.org/post/setting-up-mu4e-1-0-c/">Setting Up Mu4e 1.0 C - aliquot</a>.</li>
 <li> <a href="https://dataswamp.org/~solene/2018-05-22-mu4esmtp.html">Solene's post: Sending mail with mu4e</a>.</li>
 <li> <a href="https://lars.ingebrigtsen.no/2014/12/01/the-emacs-network-security-manager">The Emacs Network Security Manager</a>.</li>
 <li> <a href="http://tech.memoryimprintstudio.com/the-ultimate-emailing-agent-with-mu4e-and-emacs">The Ultimate Emailing Agent with Mu4e and Emacs</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/8q84dl/tip_how_to_easily_manage_your_emails_with_mu4e/">TIP: How to easily manage your emails with mu4e (Reddit)</a>.</li>
 <li> <a href="https://etienne.depar.is/a-ecrit/post/2016/09/23/Two-custom-headers-for-mu4e">Two custom headers for mu4e - Étienne Deparis</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/73a3gp/using_emacs_to_read_gmail/">Using Emacs to read gmail (Emacs subreddit)</a>.</li>
 <li> <a href="http://www.brool.com/post/using-mu4e/">Using mu4e (Brool blog)</a>.</li>
 <li> <a href="https://github.com/zamansky/using-emacs/blob/master/mu4econfig-sample.el">Zamansky mu4e's sample config</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=newRHXKm4H4">Zamansky's video on mu4e</a>.</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/trying-out-mu4e-and-offlineimap/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/trying-out-mu4e-and-offlineimap/index.html</guid>
  <pubDate>Mon, 28 May 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Transparent Emacs titlebars on macOS</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgf3ac2f0" class="outline-2">
 <h2 id="transparent-emacs-titlebars-on-macos"> <span class="timestamp-wrapper"> <span class="timestamp">24 May 2018</span></span> Transparent Emacs titlebars on macOS</h2>
 <div class="outline-text-2" id="text-transparent-emacs-titlebars-on-macos">
 <p>
Happy with  <a href="https://github.com/d12frosted/homebrew-emacs-plus">Emacs Plus</a> builds on Mac. You get some eye-candy bonuses like transparent titlebars.
</p>

 <p>
To install:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew tap d12frosted/emacs-plus
brew install emacs-plus --without-spacemacs-icon
</pre>
</div>

 <p>
Config:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">when</span> (memq window-system '(mac ns))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))  <span style="color: #969896;">; </span> <span style="color: #969896;">nil for dark text</span>
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t)))
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/transparent-emacs-titlebars-on-macos/transparent-emacs-titlebars-macos.png" alt="transparent-emacs-titlebars-macos.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/transparent-emacs-titlebars-on-macos/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/transparent-emacs-titlebars-on-macos/index.html</guid>
  <pubDate>Thu, 24 May 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Train Emacs to open files externally</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgf976155" class="outline-2">
 <h2 id="train-emacs-to-open-files-externally"> <span class="timestamp-wrapper"> <span class="timestamp">23 May 2018</span></span> Train Emacs to open files externally</h2>
 <div class="outline-text-2" id="text-train-emacs-to-open-files-externally">
 <p>
TIL about the  <a href="https://bitbucket.org/jpkotta/openwith">openwith</a> package. It enables Emacs to defer to external programs for certain files. You choose which ones. Neat.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">openwith</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:config</span>
  (csetq openwith-associations
         '(( <span style="color: #183691;">"\\.</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">mp4</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">|</span> <span style="color: #183691;">mp3</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">|</span> <span style="color: #183691;">webm</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">|</span> <span style="color: #183691;">avi</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">|</span> <span style="color: #183691;">flv</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">|</span> <span style="color: #183691;">mov</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">$"</span>  <span style="color: #183691;">"open"</span> (file))))
  (openwith-mode 1))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/train-emacs-to-open-files-externally/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/train-emacs-to-open-files-externally/index.html</guid>
  <pubDate>Wed, 23 May 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Debugging Emacs binary</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org70afabd" class="outline-2">
 <h2 id="debugging-emacs-binary"> <span class="timestamp-wrapper"> <span class="timestamp">19 April 2018</span></span> Debugging Emacs binary</h2>
 <div class="outline-text-2" id="text-debugging-emacs-binary">
 <p>
From  <a href="https://emacs.stackexchange.com/questions/14354/how-do-i-debug-an-emacs-crash">How do I debug an emacs crash? (Emacs Stack Exchange)</a>, disable optimizations when configuring and build:
</p>

 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #333333;">CFLAGS</span>= <span style="color: #183691;">"-O0 -g3"</span> ./configure ...
make
</pre>
</div>

 <p>
And good 'ol gdb (lldb works too):
</p>

 <div class="org-src-container">
 <pre class="src src-sh">gdb ../nextstep/Emacs.app/Contents/MacOS/Emacs
</pre>
</div>
</div>

 <div id="outline-container-orgab6df5e" class="outline-3">
 <h3 id="orgab6df5e">Reference</h3>
 <div class="outline-text-3" id="text-orgab6df5e">
 <ul class="org-ul"> <li> <a href="https://git.savannah.gnu.org/cgit/emacs.git/tree/etc/DEBUG">etc/DEBUG: Debugging GNU Emacs</a>.</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/debugging-emacs-binary/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/debugging-emacs-binary/index.html</guid>
  <pubDate>Thu, 19 Apr 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Hammerspoon bookmarks</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgde16ac3" class="outline-2">
 <h2 id="hammerspoon-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">14 April 2018</span></span> Hammerspoon bookmarks</h2>
 <div class="outline-text-2" id="text-hammerspoon-bookmarks">
 <span class="modified-timestamp">   <em>updated: 22 April 2019  </em></span>
 <ul class="org-ul"> <li> <a href="https://github.com/peterpme/dotfiles/blob/master/hammerspoon/grid.lua">dotfiles/grid.lua at master</a> for simple functions to resize windows.</li>
 <li> <a href="https://gist.github.com/justintanner/71d640be159c2a76e85d5196cf22e98a">Emacs keys everywhere Hammerspoon Script</a>.</li>
 <li> <a href="http://zzamboni.org/post/getting-started-with-hammerspoon/">Getting Started With Hammerspoon (by Diego Martín Zamboni)</a>.</li>
 <li> <a href="https://github.com/agzam/spacehammer">Hammerspoon config inspired by Spacemacs</a>.</li>
 <li> <a href="http://zzamboni.org/post/just-enough-lua-to-be-productive-in-hammerspoon-part-1/">Just Enough Lua to Be Productive in Hammerspoon, Part 1</a>.</li>
 <li> <a href="http://zzamboni.org/post/just-enough-lua-to-be-productive-in-hammerspoon-part-2/">Just Enough Lua to Be Productive in Hammerspoon, Part 2</a>.</li>
 <li> <a href="https://github.com/anandpiyer/.dotfiles/blob/fb7bdf5d6382515f36587f2ada83330d83983624/.hammerspoon/init.lua#L200">launchOrFocusByBundleID</a> for global key bindings (there are Emacs goodies there too).</li>
 <li> <a href="https://github.com/schilken/dot-hammerspoon">My configuration with init.lua and the require()ed modules</a>.</li>
 <li> <a href="http://www.hammerspoon.org/Spoons/Seal.html">Seal</a>. Helm-like for hammerspoon.</li>
 <li> <a href="https://blog.kalis.me/setup-hyper-key-hammerspoon-macos/">Set up a Hyper Key with Hammerspoon on macOS</a>.</li>
 <li> <a href="https://github.com/asmagill/hammerspoon-config/blob/07ec892ab1351d2a7659d802e4cbfa8e8a0d5702/_scratch/zerobrane.lua">ZeroBrane completion</a> and  <a href="https://github.com/cmsj/hammerspoon-config/blob/master/init.lua">here</a> also.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/hammerspoon-bookmarks/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/hammerspoon-bookmarks/index.html</guid>
  <pubDate>Sat, 14 Apr 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Trying out ShellCheck</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org393fe60" class="outline-2">
 <h2 id="trying-out-shellcheck"> <span class="timestamp-wrapper"> <span class="timestamp">08 April 2018</span></span> Trying out ShellCheck</h2>
 <div class="outline-text-2" id="text-trying-out-shellcheck">
 <p>
 <a href="https://github.com/koalaman/shellcheck">ShellCheck</a> gives you automatic warnings/suggestions in bash/sh shell scripts.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">$ brew install shellcheck
</pre>
</div>

 <p>
Bonus: If using Emacs's  <a href="https://github.com/flycheck/flycheck">flycheck</a>, you get ShellCheck support out of the box.</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/trying-out-shellcheck/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/trying-out-shellcheck/index.html</guid>
  <pubDate>Sun, 08 Apr 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Getting macOS app bundle ID</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org25c55a3" class="outline-2">
 <h2 id="getting-macos-app-bundle-id"> <span class="timestamp-wrapper"> <span class="timestamp">04 April 2018</span></span> Getting macOS app bundle ID</h2>
 <div class="outline-text-2" id="text-getting-macos-app-bundle-id">
 <p>
From  <a href="https://stackoverflow.com/questions/39464668/how-to-get-bundle-id-of-mac-application#39464824">stack overflow</a>:
</p>

 <p>
Option 1
</p>

 <div class="org-src-container">
 <pre class="src src-sh">osascript -e  <span style="color: #183691;">'id of app "Emacs"'</span>
</pre>
</div>

 <p>
Option 2
</p>

 <div class="org-src-container">
 <pre class="src src-sh">mdls -name kMDItemCFBundleIdentifier -r SomeApp.app
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/getting-macos-app-bundle-id/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/getting-macos-app-bundle-id/index.html</guid>
  <pubDate>Wed, 04 Apr 2018 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>org-babel Objective-C support</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org2306620" class="outline-2">
 <h2 id="org-babel-objective-c-support"> <span class="timestamp-wrapper"> <span class="timestamp">16 November 2017</span></span> org-babel Objective-C support</h2>
 <div class="outline-text-2" id="text-org-babel-objective-c-support">
 <p>
Wanted to quickly execute an Objective-C snippet. org-babel didn't support it out of the box, but adding it was straightforward (looked at ob-C.el and ob-java.el):
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">ob</span>)

( <span style="color: #a71d5d;">defcustom</span>  <span style="color: #333333;">org-babel-objc-compile-command</span>  <span style="color: #183691;">"clang -x objective-c -framework Foundation"</span>
   <span style="color: #183691;">"For example: \"clang -x objective-c -framework Foundation\"."</span>
   <span style="color: #a71d5d;">:group</span> 'org-babel
   <span style="color: #a71d5d;">:version</span>  <span style="color: #183691;">"24.3"</span>
   <span style="color: #a71d5d;">:type</span> 'string)

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">org-babel-execute:objc</span> (body params)
   <span style="color: #183691;">"Compile Objective-C BODY with org PARAMS and execute binary."</span>
  ( <span style="color: #a71d5d;">let*</span> ((src-file (org-babel-temp-file  <span style="color: #183691;">"org-babel-objc-block-"</span>  <span style="color: #183691;">".m"</span>))
         (cmpflag ( <span style="color: #a71d5d;">or</span> (cdr (assq  <span style="color: #a71d5d;">:cmpflag</span> params))  <span style="color: #183691;">""</span>))
         (full-body (org-babel-expand-body:generic body params))
         (bin-file
          (org-babel-process-file-name
           (org-babel-temp-file  <span style="color: #183691;">"org-babel-objc-block"</span> org-babel-exeext))))
    ( <span style="color: #a71d5d;">with-temp-file</span> src-file (insert full-body))
    (org-babel-eval
     (concat org-babel-objc-compile-command  <span style="color: #183691;">" "</span> cmpflag  <span style="color: #183691;">" "</span> src-file  <span style="color: #183691;">" "</span>  <span style="color: #183691;">"-o"</span>  <span style="color: #183691;">" "</span> bin-file)  <span style="color: #183691;">""</span>)

     <span style="color: #969896;">;; </span> <span style="color: #969896;">Using 2>&1 since org babel does not include stderr in output from NSLog.</span>
    ( <span style="color: #a71d5d;">let</span> ((results (org-babel-eval (concat (org-babel-process-file-name bin-file)  <span style="color: #183691;">" 2>&1"</span>)   <span style="color: #183691;">""</span>)))
      (org-babel-reassemble-table
       ( <span style="color: #a71d5d;">org-babel-result-cond</span> (cdr (assq  <span style="color: #a71d5d;">:result-params</span> params))
         (org-babel-read results)
         ( <span style="color: #a71d5d;">let</span> ((tmp-file (org-babel-temp-file  <span style="color: #183691;">"c-"</span>)))
           ( <span style="color: #a71d5d;">with-temp-file</span> tmp-file (insert results))
           (org-babel-import-elisp-from-file tmp-file)))
       (org-babel-pick-name
        (cdr (assq  <span style="color: #a71d5d;">:colname-names</span> params)) (cdr (assq  <span style="color: #a71d5d;">:colnames</span> params)))
       (org-babel-pick-name
        (cdr (assq  <span style="color: #a71d5d;">:rowname-names</span> params)) (cdr (assq  <span style="color: #a71d5d;">:rownames</span> params)))))))

( <span style="color: #a71d5d;">provide</span> ' <span style="color: #0086b3;">ob-objc</span>)
</pre>
</div>

 <p>
Add  <i>objc</i> to  <i>org-babel-load-languages</i>, and you can subsequently compile and run Objective-C blocks like:
</p>

 <div class="org-src-container">
 <pre class="src src-objc"> <span style="color: #a71d5d;">#import</span>  <span style="color: #183691;"><Foundation/Foundation.h></span>

 <span style="color: #0086b3;">int</span>  <span style="color: #795da3;">main</span>() {
  NSLog(@ <span style="color: #183691;">"Hello World"</span>);
   <span style="color: #a71d5d;">return</span> 0;
}
</pre>
</div>

 <pre class="example">
2017-11-16 01:47:28.923 org-babel-objc-block-Aai8ux[15319:346480] Hello World
</pre>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/org-babel-objective-c-support/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/org-babel-objective-c-support/index.html</guid>
  <pubDate>Thu, 16 Nov 2017 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Eshell pcomplete company completion</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgaff97b9" class="outline-2">
 <h2 id="eshell-pcomplete-company-completion"> <span class="timestamp-wrapper"> <span class="timestamp">01 November 2017</span></span> Eshell pcomplete company completion</h2>
 <div class="outline-text-2" id="text-eshell-pcomplete-company-completion">
 <p>
Howard Abrams's  <a href="https://www.youtube.com/watch?v=RhYNu6i_uY4">Introduction to eshell video</a> prompted me to poke at eshell some more. This time, I got eshell context aware completion by glueing the excellent  <a href="https://company-mode.github.io">company</a> and  <a href="https://masteringemacs.org/article/pcomplete-context-sensitive-completion-emacs">pcomplete</a> packages.
</p>


 <div class="figure">
 <p> <img src="../images/eshell-pcomplete-company-completion/company-pcomplete.png" alt="company-pcomplete.png" width="75%" height="75%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">cl-lib</span>)
( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">company</span>)
( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">dash</span>)
( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">pcomplete</span>)
( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">s</span>)

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-pcomplete--overlap-tail</span> (a b)
   <span style="color: #183691;">"When A is \"SomeDev\" and B is \"Developer\\n"</span>, return \"eloper\". <span style="color: #183691;">"</span>
 <span style="color: #183691;">  (let ((prefix a)</span>
 <span style="color: #183691;">        (remaining nil))</span>
 <span style="color: #183691;">    (while (and (not remaining) (> (length prefix) 0))</span>
 <span style="color: #183691;">      (when (s-starts-with? prefix b)</span>
 <span style="color: #183691;">        (setq remaining (substring b (length prefix))))</span>
 <span style="color: #183691;">      (setq prefix (substring prefix 1)))</span>
 <span style="color: #183691;">    remaining))</span>

 <span style="color: #183691;">(defun company-pcomplete--candidates (prefix)</span>
 <span style="color: #183691;">  "</span>Get candidates for PREFIX company completion using ` <span style="color: #0086b3;">pcomplete</span>'. <span style="color: #183691;">"</span>
 <span style="color: #183691;">  ;; When prefix is: "</span>~/Down <span style="color: #183691;">" and completion is "</span>Downloads\n <span style="color: #183691;">", need</span>
 <span style="color: #183691;">  ;; to find common string and join into "</span>~/Downloads/ <span style="color: #183691;">".</span>
 <span style="color: #183691;">  (-map (lambda (item)</span>
 <span style="color: #183691;">          (if (s-starts-with? prefix item)</span>
 <span style="color: #183691;">              item</span>
 <span style="color: #183691;">            (concat prefix (company-pcomplete--overlap-tail prefix item))))</span>
 <span style="color: #183691;">        (all-completions prefix (pcomplete-completions))))</span>

 <span style="color: #183691;">(defun company-pcomplete (command &optional arg &rest ignored)</span>
 <span style="color: #183691;">  "</span>Complete using pcomplete. See ` <span style="color: #0086b3;">company</span>''s COMMAND ARG and IGNORED for details. <span style="color: #183691;">"</span>
 <span style="color: #183691;">  (interactive (list 'interactive))</span>
 <span style="color: #183691;">  (case command</span>
 <span style="color: #183691;">    (interactive (company-begin-backend 'company-pcomplete))</span>
 <span style="color: #183691;">    (prefix (company-grab-symbol))</span>
 <span style="color: #183691;">    (candidates</span>
 <span style="color: #183691;">     (company-pcomplete--candidates arg))))</span>
</pre>
</div>

 <p>
Don't forget to add  <i>company-pcomplete</i> to  <i>company-backends,</i> and if you want an explicit binding, use something like:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">bind-key</span>  <span style="color: #183691;">"<backtab>"</span> #'company-complete eshell-mode-map)
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/eshell-pcomplete-company-completion/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/eshell-pcomplete-company-completion/index.html</guid>
  <pubDate>Wed, 01 Nov 2017 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Basic imenu in helpful-mode</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org1a2577b" class="outline-2">
 <h2 id="basic-imenu-in-helpful-mode"> <span class="timestamp-wrapper"> <span class="timestamp">10 September 2017</span></span> Basic imenu in helpful-mode</h2>
 <div class="outline-text-2" id="text-basic-imenu-in-helpful-mode">
 <p>
I'm finding Wilfred Hughes's  <a href="https://github.com/Wilfred/helpful">helpful-mode</a>, well… rather helpful. However, I'm missing imenu support. Here's a hacky way to get basic imenu.
</p>


 <div class="figure">
 <p> <img src="../images/basic-imenu-for-helpful-mode/helpful-imenu.png" alt="helpful-imenu.png" width="75%" height="75%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">helpful--create-imenu-index</span> ()
   <span style="color: #183691;">"Create an `</span> <span style="color: #0086b3;">imenu</span> <span style="color: #183691;">' index for helpful."</span>
  (beginning-of-buffer)
  ( <span style="color: #a71d5d;">let</span> ((imenu-items '()))
    ( <span style="color: #a71d5d;">while</span> ( <span style="color: #a71d5d;">progn</span>
             (beginning-of-line)
              <span style="color: #969896;">;; </span> <span style="color: #969896;">Not great, but determine if looking at heading:</span>
              <span style="color: #969896;">;; </span> <span style="color: #969896;">1. if it has bold face.</span>
              <span style="color: #969896;">;; </span> <span style="color: #969896;">2. if it is capitalized.</span>
             ( <span style="color: #a71d5d;">when</span> ( <span style="color: #a71d5d;">and</span> (eq 'bold (face-at-point))
                        (string-match-p
                          <span style="color: #183691;">"[A-Z]"</span>
                         (buffer-substring (line-beginning-position)
                                           (line-end-position))))
               (add-to-list 'imenu-items
                            (cons (buffer-substring (line-beginning-position)
                                                    (line-end-position))
                                  (line-beginning-position))))
             (= 0 (forward-line 1))))
    imenu-items))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">helpful-mode-hook-function</span> ()
   <span style="color: #183691;">"A hook function for `</span> <span style="color: #0086b3;">helpful-mode</span> <span style="color: #183691;">'."</span>
  ( <span style="color: #a71d5d;">setq</span> imenu-create-index-function #'helpful--create-imenu-index))

(add-hook 'helpful-mode-hook
          #'helpful-mode-hook-function)
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/basic-imenu-in-helpful-mode/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/basic-imenu-in-helpful-mode/index.html</guid>
  <pubDate>Sun, 10 Sep 2017 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Projectile shell dir company completion</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org9e05bfa" class="outline-2">
 <h2 id="projectile-shell-dir-company-completion"> <span class="timestamp-wrapper"> <span class="timestamp">19 August 2017</span></span> Projectile shell dir company completion</h2>
 <div class="outline-text-2" id="text-projectile-shell-dir-company-completion">
 <p>
 <a href="https://github.com/bbatsov/projectile">Projectile</a> and  <a href="https://company-mode.github.io">company</a> are just amazing Emacs packages. Projectile gives random access to files, while company completes well… anything. For shells, Emacs has a handful of options.
</p>

 <p>
Standing on the shoulders of package giants ( <a href="https://github.com/magnars/dash.el">dash</a> and  <a href="https://github.com/rejeep/f.el">f</a> included) and some elisp, we can bring random access to project directories from the shell.
</p>


 <div class="figure">
 <p> <img src="../images/projectile-shell-dir-company-completion/company-projectile-cd.png" alt="company-projectile-cd.png" width="75%" height="75%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">cl-lib</span>)
( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">company</span>)
( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">dash</span>)
( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">f</span>)
( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">projectile</span>)

( <span style="color: #a71d5d;">defvar-local</span>  <span style="color: #333333;">company-projectile-cd-prefix</span>  <span style="color: #183691;">"cd "</span>)

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-projectile-cd</span> (command  <span style="color: #0086b3;">&optional</span> arg  <span style="color: #0086b3;">&rest</span> ignored)
   <span style="color: #183691;">"Company shell completion for any projectile path."</span>
  ( <span style="color: #a71d5d;">interactive</span> (list 'interactive))
  ( <span style="color: #a71d5d;">case</span> command
    ( <span style="color: #a71d5d;">interactive</span> (company-begin-backend 'company-projectile-cd))
    (prefix
     (company-grab-symbol-cons company-projectile-cd-prefix
                               (length company-projectile-cd-prefix)))
    (candidates
     (company-projectile-cd--candidates
      (company-grab-symbol-cons company-projectile-cd-prefix
                                (length company-projectile-cd-prefix))))
    (post-completion
     (company-projectile-cd--expand-inserted-path arg))))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-projectile-cd--candidates</span> (input)
   <span style="color: #183691;">"Return candidates for given INPUT."</span>
  (company-projectile-cd--reset-root)
  ( <span style="color: #a71d5d;">when</span> (consp input)
    ( <span style="color: #a71d5d;">let</span> ((search-term (substring-no-properties
                        (car input) 0 (length (car input))))
          (prefix-found (cdr input)))
      ( <span style="color: #a71d5d;">when</span> prefix-found
        ( <span style="color: #a71d5d;">if</span> (projectile-project-p)
            (company-projectile-cd--projectile search-term)
          (company-projectile-cd--find-fallback search-term))))))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-projectile-cd--projectile</span> (search-term)
  (-filter ( <span style="color: #a71d5d;">lambda</span> (path)
             (string-match-p (regexp-quote
                              search-term)
                             path))
           (-snoc
            (projectile-current-project-dirs)
             <span style="color: #969896;">;; </span> <span style="color: #969896;">Throw project root in there also.</span>
            (projectile-project-root))))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-projectile-cd--find-fallback</span> (search-term)
  ( <span style="color: #a71d5d;">ignore-errors</span>
    (-map ( <span style="color: #a71d5d;">lambda</span> (path)
            (string-remove-prefix  <span style="color: #183691;">"./"</span> path))
          (apply #'process-lines
                 (list  <span style="color: #183691;">"find"</span>  <span style="color: #183691;">"."</span>  <span style="color: #183691;">"-type"</span>  <span style="color: #183691;">"d"</span>   <span style="color: #183691;">"-maxdepth"</span>  <span style="color: #183691;">"2"</span>  <span style="color: #183691;">"-iname"</span>
                       (format  <span style="color: #183691;">"</span> <span style="color: #333333;">\</span> <span style="color: #183691;">*%s</span> <span style="color: #333333;">\</span> <span style="color: #183691;">*"</span> search-term))))))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-projectile-cd--expand-inserted-path</span> (path)
   <span style="color: #183691;">"Replace relative PATH insertion with its absolute equivalent if needed."</span>
  ( <span style="color: #a71d5d;">unless</span> (f-exists-p path)
    (delete-region (point) (- (point) (length path)))
    (insert (concat (projectile-project-root) path))))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">company-projectile-cd--reset-root</span> ()
   <span style="color: #183691;">"Reset project root. Useful when cd'ing in and out of projects."</span>
  (projectile-reset-cached-project-root)
  ( <span style="color: #a71d5d;">when</span> (projectile-project-p)
    (projectile-project-root)))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/projectile-shell-dir-company-completion/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/projectile-shell-dir-company-completion/index.html</guid>
  <pubDate>Sat, 19 Aug 2017 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Search/insert one-liners with Emacs helm-ag</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org052f860" class="outline-2">
 <h2 id="search-insert-one-liners-with-emacs-helm-ag"> <span class="timestamp-wrapper"> <span class="timestamp">07 July 2017</span></span> Search/insert one-liners with Emacs helm-ag</h2>
 <div class="outline-text-2" id="text-search-insert-one-liners-with-emacs-helm-ag">
 <p>
Emacs  <a href="https://github.com/emacs-helm/helm">helm</a> is awesome.  <a href="https://github.com/syohex/emacs-helm-ag">helm-ag</a> is double awesome. Searching for one-liners in your codebase, narrowing down with helm, and easily inserting is triple awesome.
</p>


 <div class="figure">
 <p> <img src="../images/search-and-insert-one-liners-with-helm-ag/helm-ag-insert.gif" alt="helm-ag-insert.gif" width="75%" height="75%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/helm-ag</span> (arg)
   <span style="color: #183691;">"Helm-ag search remembering last location.  With ARG, forget the last location."</span>
  ( <span style="color: #a71d5d;">interactive</span>  <span style="color: #183691;">"P"</span>)
  ( <span style="color: #a71d5d;">defvar</span>  <span style="color: #333333;">ar/helm-ag--default-locaction</span> nil)
  ( <span style="color: #a71d5d;">setq</span> ar/helm-ag--default-locaction
                 (read-directory-name  <span style="color: #183691;">"search in: "</span> ( <span style="color: #a71d5d;">if</span> arg
                                                        default-directory
                                                      ar/helm-ag--default-locaction)  <span style="color: #333333;">nil t))</span>
  (helm-do-ag ar/helm-ag--default-locaction))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/helm-ag-insert</span> (arg)
   <span style="color: #969896;">;; </span> <span style="color: #969896;">Helm-ag and insert match.</span>
  ( <span style="color: #a71d5d;">interactive</span>  <span style="color: #183691;">"P"</span>)
  ( <span style="color: #a71d5d;">let*</span> ((actions (helm-make-actions
                    <span style="color: #183691;">"Insert"</span>
                   ( <span style="color: #a71d5d;">lambda</span> (candidate)
                      <span style="color: #969896;">;; </span> <span style="color: #969896;">Drop file:line:column. For example:</span>
                      <span style="color: #969896;">;; </span> <span style="color: #969896;">arc_hostlink.c:13:2:#include <linux/fs.h></span>
                      <span style="color: #969896;">;; </span> <span style="color: #969896;">=> #include <linux/fs.h></span>
                     (insert (replace-regexp-in-string  <span style="color: #183691;">"^[</span> <span style="color: #a71d5d;">^</span> <span style="color: #183691;"> ]*:"</span>  <span style="color: #183691;">""</span> candidate)))))
         (helm-source-do-ag (helm-build-async-source  <span style="color: #183691;">"The Silver Searcher"</span>
                               <span style="color: #a71d5d;">:init</span> 'helm-ag--do-ag-set-command
                               <span style="color: #a71d5d;">:candidates-process</span> 'helm-ag--do-ag-candidate-process
                               <span style="color: #a71d5d;">:persistent-action</span>  'helm-ag--persistent-action
                               <span style="color: #a71d5d;">:action</span> actions
                               <span style="color: #a71d5d;">:nohighlight</span> t
                               <span style="color: #a71d5d;">:requires-pattern</span> 3
                               <span style="color: #a71d5d;">:candidate-number-limit</span> 9999
                               <span style="color: #a71d5d;">:keymap</span> helm-do-ag-map
                               <span style="color: #a71d5d;">:follow</span> ( <span style="color: #a71d5d;">and</span> helm-follow-mode-persistent 1))))
    (call-interactively #'ar/helm-ag)))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/search-insert-one-liners-with-emacs-helm-ag/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/search-insert-one-liners-with-emacs-helm-ag/index.html</guid>
  <pubDate>Fri, 07 Jul 2017 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>GnuPG and macOS</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgf801f16" class="outline-2">
 <h2 id="gnupg-and-macos"> <span class="timestamp-wrapper"> <span class="timestamp">23 April 2017</span></span> GnuPG and macOS</h2>
 <div class="outline-text-2" id="text-gnupg-and-macos">
 <p>
Had problems installing and using GnuPG on macOS, primarily for Emacs use:
</p>

 <pre class="example">
gpg: problem with the agent: Inappropriate ioctl for device
gpg: error creating passphrase: Operation cancelled
gpg: symmetric encryption of '[stdin]' failed: Operation cancelled
</pre>

 <p>
Basic installation required:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew install gnupg
</pre>
</div>

 <p>
But worked around the error above by using pinentry-mac (UI), instead of Emacs prompts.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">brew install pinentry-mac
</pre>
</div>

 <p>
Edited ~/.gnupg/gpg-agent.conf with:
</p>

 <pre class="example">
pinentry-program path/to/homebrew/bin/pinentry-mac
</pre>

 <p>
May need to kill gpg-agent to reload config.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">gpgconf --kill gpg-agent
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/gnupg-and-macos/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/gnupg-and-macos/index.html</guid>
  <pubDate>Sun, 23 Apr 2017 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Fuzzy search Emacs compile history</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org6fbb107" class="outline-2">
 <h2 id="fuzzy-search-emacs-compile-history"> <span class="timestamp-wrapper"> <span class="timestamp">15 September 2016</span></span> Fuzzy search Emacs compile history</h2>
 <div class="outline-text-2" id="text-fuzzy-search-emacs-compile-history">
 <p>
I wrote about  <a href="../search-bash-history-with-emacs-helm">searching bash history with Emacs Helm</a> some time ago. Since then, I've learned about  <i>completing-read</i> to generically handle simple Emacs completions (very handy for supporting Helm, Ivy, and Ido completions).
</p>

 <p>
Here's a simple way to combine  <i>completing-read</i> and the  <i>compile</i> command to enable fuzzy searching your compile history:
</p>


 <div class="figure">
 <p> <img src="../images/fuzzy-search-emacs-compile-history/fuzzy_compile.gif" alt="fuzzy_compile.gif" width="75%" height="75%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/compile-completing</span> ()
   <span style="color: #183691;">"Compile with completing options."</span>
  ( <span style="color: #a71d5d;">interactive</span>)
  ( <span style="color: #a71d5d;">let</span> ((compile-command (completing-read  <span style="color: #183691;">"Compile command: "</span> compile-history)))
    (compile compile-command)
    (add-to-list 'compile-history compile-command)))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/fuzzy-search-emacs-compile-history/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/fuzzy-search-emacs-compile-history/index.html</guid>
  <pubDate>Thu, 15 Sep 2016 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Jumping on the Emacs 25 bandwagon</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org15f009e" class="outline-2">
 <h2 id="jumping-on-emacs-25-bandwagon"> <span class="timestamp-wrapper"> <span class="timestamp">05 September 2016</span></span> Jumping on the Emacs 25 bandwagon</h2>
 <div class="outline-text-2" id="text-jumping-on-emacs-25-bandwagon">
 <p>
Can't miss out on all the new fun. Emacs 25 RC2 is out and lots of people already using it. Since I'm mostly on MacOS these days, installing via homebrew with –devel, gets you RC2:
</p>
 <div class="org-src-container">
 <pre class="src src-sh">brew install emacs --devel --with-cocoa --with-gnutls --with-librsvg --with-imagemagick
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/jumping-on-emacs-25-bandwagon/emacs25.png" alt="emacs25.png" width="75%" height="75%"></img></p>
</div>

 <p>
The only hiccup so far's been org mode failing to export, which was fixed by re-installing it (follow  <a href="https://lists.gnu.org/archive/html/emacs-orgmode/2015-08/msg00320.html">this thread</a>).</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/jumping-on-emacs-25-bandwagon/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/jumping-on-emacs-25-bandwagon/index.html</guid>
  <pubDate>Mon, 05 Sep 2016 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emacs and emotional vocab</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org1787319" class="outline-2">
 <h2 id="emacs-and-emotional-vocab"> <span class="timestamp-wrapper"> <span class="timestamp">17 June 2016</span></span> Emacs and emotional vocab</h2>
 <div class="outline-text-2" id="text-emacs-and-emotional-vocab">
 <p>
Having read  <a href="http://www.nytimes.com/2016/06/05/opinion/sunday/are-you-in-despair-thats-good.html">Are You in Despair? That’s Good</a>, I was encouraged to expand my emotional vocabulary. As a  <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/play/zone.el">zone.el</a> fan (checkout  <a href="https://github.com/wasamasa/zone-nyan">nyan</a>,  <a href="https://github.com/kawabata/zone-sl">sl</a>, and  <a href="https://github.com/kawabata/zone-rainbow">rainbow</a>), I looked into writing a zone  <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/play/zone.el#L52">program</a>. When  <i>zone-when-idle</i> is set, zone acts as a screensaver of sorts. We can use this to display random emotional vocab whenever Emacs is idle for a period of time. Let's get to it…
</p>

 <p>
Zone keeps a list of programs to choose from when kicked off. Below is a basic  <i>zone-hello</i> program, along with an interactive command for previewing. Not much to these. The tiny program prepares the screen for zoning and inserts text while no input is pending.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">zone-hello</span> ()
  (delete-other-windows)
  ( <span style="color: #a71d5d;">setq</span> mode-line-format nil)
  (zone-fill-out-screen (window-width) (window-height))
  (delete-region (point-min) (point-max))
  (goto-char (point-min))
  ( <span style="color: #a71d5d;">while</span> (not (input-pending-p))
    (insert  <span style="color: #183691;">"hello zone\n"</span>)
    (zone-park/sit-for (point-min) 0.2)))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">zone-hello-preview</span> ()
  ( <span style="color: #a71d5d;">interactive</span>)
  ( <span style="color: #a71d5d;">let</span> ((zone-programs [zone-hello]))
    (zone)))
</pre>
</div>

 <p>
Here's what  <i>zone-hello</i> looks like:
</p>


 <div class="figure">
 <p> <img src="../images/emacs-and-emotional-vocab/minimal-zone.gif" alt="minimal-zone.gif" width="75%" height="75%"></img></p>
</div>

 <p>
Back to improving our emotional vocabulary, we'll need a dictionary for our goal. A quick search yields a potential list of  <a href="http://www.psychpage.com/learning/library/assess/feelings.html">words</a>. We can use  <a href="http://wordnet.princeton.edu/">WordNet</a> to define them while offline. These two sources will do for now. We tie it all together in  <a href="https://github.com/xenodium/dotfiles/blob/master/emacs/ar/zone-words.el">zone-words.el</a> and the resulting zone program looks as follow:
</p>


 <div class="figure">
 <p> <img src="../images/emacs-and-emotional-vocab/emotions.gif" alt="emotions.gif" width="75%" height="75%"></img></p>
</div>

 <p>
UPDATE: Just came across  <a href="http://blog.josephwilk.net/art/emacs-animation.html">Animations With Emacs</a>. A post with awesome zone examples.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-and-emotional-vocab/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-and-emotional-vocab/index.html</guid>
  <pubDate>Fri, 17 Jun 2016 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emacs: Find number of days between dates</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgd85765d" class="outline-2">
 <h2 id="emacs-find-number-of-days-between-dates"> <span class="timestamp-wrapper"> <span class="timestamp">10 May 2016</span></span> Emacs: Find number of days between dates</h2>
 <div class="outline-text-2" id="text-emacs-find-number-of-days-between-dates">
 <p>
Needed to find the number of days between two dates. Emacs calendar must know this…
</p>

 <ul class="org-ul"> <li>Fire up the manual (M-x info-emacs-manual or C-h r).</li>
 <li>Info-goto-node (or g).</li>
 <li>Type "counting days" and voilá:</li>
</ul> <blockquote>
 <p>
To determine the number of days in a range, set the mark on one date
using `C-<SPC>', move point to another date, and type `M-='
(`calendar-count-days-region').  The numbers of days shown is
 <span class="underline">inclusive</span>; that is, it includes the days specified by mark and point.
</p>
</blockquote>


 <div class="figure">
 <p> <img src="../images/emacs-find-number-of-days-between-dates/emacs-days-between-dates.gif" alt="emacs-days-between-dates.gif" width="75%" height="75%"></img></p>
</div>

 <p>
 <i>Note: you can use the mouse to jump to another date, or "g d" (calendar-goto-date).</i></p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-find-number-of-days-between-dates/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-find-number-of-days-between-dates/index.html</guid>
  <pubDate>Tue, 10 May 2016 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emacs Objective-C tagging with RTags</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgb79abcc" class="outline-2">
 <h2 id="emacs-objective-c-tagging-with-rtags"> <span class="timestamp-wrapper"> <span class="timestamp">28 March 2016</span></span> Emacs Objective-C tagging with RTags</h2>
 <div class="outline-text-2" id="text-emacs-objective-c-tagging-with-rtags">
</div>
 <div id="outline-container-org940c62a" class="outline-3">
 <h3 id="org940c62a">Install libclang on Mac</h3>
 <div class="outline-text-3" id="text-org940c62a">
 <div class="org-src-container">
 <pre class="src src-sh">brew install llvm --with-clang
</pre>
</div>
</div>
</div>

 <div id="outline-container-org07b98f7" class="outline-3">
 <h3 id="org07b98f7">Install RTags</h3>
 <div class="outline-text-3" id="text-org07b98f7">
 <div class="org-src-container">
 <pre class="src src-sh">git clone --recursive https://github.com/Andersbakken/rtags.git
 <span style="color: #a71d5d;">cd</span> rtags
cmake -DCMAKE_PREFIX_PATH=/Users/your-user-name/homebrew/opt/llvm -DCMAKE_EXPORT_COMPILE_COMMANDS=1 .
make
</pre>
</div>
</div>
</div>

 <div id="outline-container-org9da47bc" class="outline-3">
 <h3 id="org9da47bc">Start RTags daemon</h3>
 <div class="outline-text-3" id="text-org9da47bc">
 <div class="org-src-container">
 <pre class="src src-sh">path/to/rtags/bin/rdm 2> /tmp/rdm.log
</pre>
</div>
</div>
</div>

 <div id="outline-container-orge1c7f8f" class="outline-3">
 <h3 id="orge1c7f8f">Compilation database</h3>
 <div class="outline-text-3" id="text-orge1c7f8f">
</div>
 <div id="outline-container-org1919551" class="outline-4">
 <h4 id="org1919551">Install xctool</h4>
 <div class="outline-text-4" id="text-org1919551">
 <div class="org-src-container">
 <pre class="src src-sh">brew install xctool
</pre>
</div>
</div>
</div>
 <div id="outline-container-orge72bd99" class="outline-4">
 <h4 id="orge72bd99">Generate a compilation database</h4>
 <div class="outline-text-4" id="text-orge72bd99">
 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #a71d5d;">cd</span> path/to/your/objc-project
xctool -sdk iphonesimulator -arch x86_64 -scheme SomeScheme -reporter pretty -reporter json-compilation-database:compile_commands.json clean build
</pre>
</div>
</div>
</div>
</div>

 <div id="outline-container-orgd54f01e" class="outline-3">
 <h3 id="orgd54f01e">Load compilation database</h3>
 <div class="outline-text-3" id="text-orgd54f01e">
 <div class="org-src-container">
 <pre class="src src-sh">path/to/rtags/bin/rc -J path/to/your/objc-project/compile_commands.json
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgfe7a98e" class="outline-3">
 <h3 id="orgfe7a98e">Install RTags Emacs package</h3>
 <div class="outline-text-3" id="text-orgfe7a98e">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">rtags</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:config</span>
  ( <span style="color: #a71d5d;">setq</span> rtags-use-helm t)  <span style="color: #969896;">;; </span> <span style="color: #969896;">Optional. Enable if helm fan (I am!).</span>
  ( <span style="color: #a71d5d;">setq</span> rtags-path  <span style="color: #183691;">"path/to/rtags/bin/"</span>))
</pre>
</div>
</div>
</div>

 <div id="outline-container-orgee27a78" class="outline-3">
 <h3 id="orgee27a78">Ready to go</h3>
 <div class="outline-text-3" id="text-orgee27a78">
 <p>
Use any of the rtags interactive commands. For example:
</p>

 <pre class="example">
M-x rtags-find-symbol
</pre>
</div>
</div>

 <div id="outline-container-org02e2948" class="outline-3">
 <h3 id="org02e2948">References</h3>
 <div class="outline-text-3" id="text-org02e2948">
 <ul class="org-ul"> <li> <a href="https://github.com/Andersbakken/rtags#tldr-quickstart">RTags TLDR Quickstart</a>.</li>
 <li> <a href="http://syamajala.github.io/c-ide.html">Emacs as C++ IDE</a>.</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-objective-c-tagging-with-rtags/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-objective-c-tagging-with-rtags/index.html</guid>
  <pubDate>Mon, 28 Mar 2016 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emacs lisp snippets</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgc447d98" class="outline-2">
 <h2 id="emacs-lisp-snippets"> <span class="timestamp-wrapper"> <span class="timestamp">02 March 2016</span></span> Emacs lisp snippets</h2>
 <div class="outline-text-2" id="text-emacs-lisp-snippets">
</div>
 <div id="outline-container-orgb136485" class="outline-3">
 <h3 id="orgb136485">Find file upwards, up parents, up hierarchy</h3>
 <div class="outline-text-3" id="text-orgb136485">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(locate-dominating-file FILE NAME)
</pre>
</div>
</div>
</div>
 <div id="outline-container-org533151f" class="outline-3">
 <h3 id="org533151f">Find executable in PATH</h3>
 <div class="outline-text-3" id="text-org533151f">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(executable-find COMMAND)
</pre>
</div>
</div>
</div>
 <div id="outline-container-orge41b162" class="outline-3">
 <h3 id="orge41b162">Read string with completion (helm/ido/ivy friendly)</h3>
 <div class="outline-text-3" id="text-orge41b162">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(completing-read PROMPT COLLECTION  <span style="color: #0086b3;">&optional</span> PREDICATE REQUIRE-MATCH INITIAL-INPUT HIST DEF INHERIT-INPUT-METHOD)
</pre>
</div>
</div>
</div>
 <div id="outline-container-org22413cc" class="outline-3">
 <h3 id="org22413cc">Execute command/process and return list (similar to shell-command-to-string)</h3>
 <div class="outline-text-3" id="text-org22413cc">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(process-lines PROGRAM  <span style="color: #0086b3;">&rest</span> ARGS)
</pre>
</div>
</div>
</div>
 <div id="outline-container-org1007b74" class="outline-3">
 <h3 id="org1007b74">Iterating org buffer</h3>
 <div class="outline-text-3" id="text-org1007b74">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(org-element-map (org-element-parse-buffer) '(headline link)
  ( <span style="color: #a71d5d;">lambda</span> (element)
    ( <span style="color: #a71d5d;">cond</span>
     (( <span style="color: #a71d5d;">and</span> (eq (org-element-type element) 'headline)
           (= (org-element-property  <span style="color: #a71d5d;">:level</span> element) 1))
      (print  <span style="color: #183691;">"headline"</span>))
     ((eq (org-element-type element) 'link)
      (print  <span style="color: #183691;">"link"</span>)))
    nil))
</pre>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-lisp-snippets/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-lisp-snippets/index.html</guid>
  <pubDate>Wed, 02 Mar 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Defined elisp variables matching regexp</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgad3dc67" class="outline-2">
 <h2 id="defined-elisp-variables-matching-regexp"> <span class="timestamp-wrapper"> <span class="timestamp">14 February 2016</span></span> Defined elisp variables matching regexp</h2>
 <div class="outline-text-2" id="text-defined-elisp-variables-matching-regexp">
 <p>
You can use "M-x  <i>apropos-variable</i>" to get documentation for variables matching a pattern. For more flexibility, some elisp can help with getting a list of all variables matching a regexp:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/variables-matching-pattern</span> (pattern)
   <span style="color: #183691;">"Get a list of all variables matching PATTERN."</span>
  ( <span style="color: #a71d5d;">let</span> ((matched-variables '()))
    (mapatoms
     ( <span style="color: #a71d5d;">lambda</span> (symbol)
        <span style="color: #969896;">;; </span> <span style="color: #969896;">Symbol is variable?</span>
       ( <span style="color: #a71d5d;">when</span> ( <span style="color: #a71d5d;">and</span> (boundp symbol)
                  (string-match pattern (symbol-name symbol)))
         (add-to-list 'matched-variables symbol))))
    matched-variables))

( <span style="color: #a71d5d;">let</span> ((variables  <span style="color: #183691;">""</span>))
  (mapc ( <span style="color: #a71d5d;">lambda</span> (variable-symbol)
          ( <span style="color: #a71d5d;">setq</span> variables
                (concat variables
                        (format  <span style="color: #183691;">"%s => %s\n"</span>
                                (symbol-name variable-symbol)
                                (symbol-value variable-symbol)))))
        (ar/variables-matching-pattern  <span style="color: #183691;">"^tern-.*"</span>))
  variables)
</pre>
</div>

 <pre class="example">
tern-mode-keymap => (keymap (3 keymap (4 . tern-get-docs) (3 . tern-get-type) (18 . tern-rename-variable)) (27 keymap (44 . tern-pop-find-definition) (67108910 . tern-find-definition-by-name) (46 . tern-find-definition)))
tern-update-argument-hints-async => nil
tern-known-port => nil
tern-mode => nil
tern-activity-since-command => -1
tern-project-dir => nil
tern-last-point-pos => nil
tern-last-completions => nil
tern-explicit-port => nil
tern-idle-time => 2.5
tern-find-definition-stack => nil
tern-last-argument-hints => nil
tern-idle-timer => nil
tern-server => nil
tern-last-docs-url => nil
tern-buffer-is-dirty => nil
tern-command-generation => 0
tern-flash-timeout => 0.5
tern-update-argument-hints-timer => 500
tern-mode-hook => nil
tern-command => (tern)
</pre>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/defined-elisp-variables-matching-regexp/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/defined-elisp-variables-matching-regexp/index.html</guid>
  <pubDate>Sun, 14 Feb 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Proselint via Emacs flycheck</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org2f37fa6" class="outline-2">
 <h2 id="proselint-via-emacs-flycheck"> <span class="timestamp-wrapper"> <span class="timestamp">13 February 2016</span></span> Proselint via Emacs flycheck</h2>
 <div class="outline-text-2" id="text-proselint-via-emacs-flycheck">
 <p>
Based on  <a href="http://unconj.ca/blog/linting-prose-in-emacs.html">Linting Prose in Emacs</a>…
</p>

 <p>
Needs proselint installed:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">pip install proselint
</pre>
</div>

 <p>
Also needs a flycheck checker defined:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(flycheck-define-checker proselint
   <span style="color: #183691;">"A linter for prose."</span>
   <span style="color: #a71d5d;">:command</span> ( <span style="color: #183691;">"proselint"</span> source-inplace)
   <span style="color: #a71d5d;">:error-patterns</span>
  ((warning line-start (file-name)  <span style="color: #183691;">":"</span> line  <span style="color: #183691;">":"</span> column  <span style="color: #183691;">": "</span>
            (id (one-or-more (not (any  <span style="color: #183691;">" "</span>))))
            (message) line-end))
   <span style="color: #a71d5d;">:modes</span> (gfm-mode
          markdown-mode
          org-mode
          text-mode))

(add-to-list 'flycheck-checkers 'proselint)
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/proselint-via-emacs-flycheck/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/proselint-via-emacs-flycheck/index.html</guid>
  <pubDate>Sat, 13 Feb 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Doh! undo last commit (Magit edition)</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org6440adc" class="outline-2">
 <h2 id="doh-undo-last-commit-magit-edition"> <span class="timestamp-wrapper"> <span class="timestamp">11 February 2016</span></span> Doh! undo last commit (Magit edition)</h2>
 <div class="outline-text-2" id="text-doh-undo-last-commit-magit-edition">
 <p>
I previously noted  <a href="../doh-undo-last-git-commit">how to undo your last git commit (ie. soft reset)</a>. Using Magit:
</p>

 <ol class="org-ol"> <li>M-x  <i>magit-log-current</i>.</li>
 <li>Move point to prior revision.</li>
 <li>M-x  <i>magit-reset-soft</i> (defaults to revision at point).</li>
</ol> <p>
Or if you want a single function:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">magit</span>)

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/magit-soft-reset-head~1</span> ()
   <span style="color: #183691;">"Soft reset current git repo to HEAD~1."</span>
  ( <span style="color: #a71d5d;">interactive</span>)
  (magit-reset-soft  <span style="color: #183691;">"HEAD~1"</span>))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/doh-undo-last-commit-magit-edition/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/doh-undo-last-commit-magit-edition/index.html</guid>
  <pubDate>Thu, 11 Feb 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emacs lisp tips backlog</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org9e116eb" class="outline-2">
 <h2 id="emacs-lisp-tips-backlog"> <span class="timestamp-wrapper"> <span class="timestamp">06 February 2016</span></span> Emacs lisp tips backlog</h2>
 <div class="outline-text-2" id="text-emacs-lisp-tips-backlog">
 <span class="modified-timestamp">   <em>updated: 27 December 2018  </em></span>
</div>
 <ul class="org-ul"> <li> <a id="org846e141"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/mola-T/signal">Signal: a library offering enriched hook-like features</a>. <br></br></li>
 <li> <a id="orgf204bf7"></a> <span class="todo TODO">TODO</span>  <a href="http://mbork.pl/2016-05-15_debug-on-whatever">Debugging tips</a>. <br></br></li>
 <li> <a id="orgb5d9d5e"></a> <span class="todo TODO">TODO</span>  <a href="http://article.gmane.org/gmane.emacs.devel/202535">Examples of Emacs modules</a>. <br></br></li>
 <li> <a id="orgf860920"></a> <span class="todo TODO">TODO</span>  <a href="https://gitlab.com/RobertCochran/neato-graph-bar">htop-like CPU and memory graphs for Emacs</a>. <br></br></li>
 <li> <a id="org6807761"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/mola-T/timp">Timp: multithreading library</a>. <br></br></li>
 <li> <a id="orgc87cd94"></a> <span class="todo TODO">TODO</span>  <a href="http://www.wilfred.me.uk/blog/2016/04/28/effortless-major-mode-development/">Effortless Major Mode Development</a>. <br></br></li>
 <li> <a id="org99e977b"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/tkych/cl-spark">cl-spark implementation of Zach Holman's spark and Gil Gonçalves' vspark with little extension</a>. <br></br></li>
 <li> <a id="org04a6701"></a> <span class="todo TODO">TODO</span>  <a href="http://endlessparentheses.com/new-in-emacs-25-1-map-el-library.html">map.el for map-like collections built-in as of 25.1</a>. <br></br></li>
 <li> <a id="orgb047f98"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/emacs-mirror/emacs/blob/master/lisp/emacs-lisp/map.el">Standard library for key/value data structures</a>. <br></br></li>
 <li> <a id="org487d3ca"></a> <span class="todo TODO">TODO</span>  <a href="http://oremacs.com/2015/01/11/pretty-elisp-regex/">Making Elisp regex look nicer</a>. <br></br></li>
 <li> <a id="org79e9a30"></a> <span class="todo TODO">TODO</span>  <a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Porting-old-advices.html#Porting-old-advices">Adapting code using the old defadvice</a>. <br></br></li>
 <li> <a id="org148d523"></a> <span class="todo TODO">TODO</span>  <a href="http://endlessparentheses.com/new-on-elpa-and-in-emacs-25-1-seq-el.html">seq.el sequence library built-in as of 25.1</a>. <br></br></li>
 <li> <a id="org9b3aabe"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/syohex/emacs-parson">Binding of parson JSON parser</a>. <br></br></li>
 <li> <a id="orgf44abad"></a> <span class="todo TODO">TODO</span>  <a href="http://puntoblogspot.blogspot.co.uk/2016/02/with-this-little-trick-helm-dash-gets.html?m=1">Helm-dash find-as-you-type</a>. <br></br></li>
 <li> <a id="orge5c16f7"></a> <span class="todo TODO">TODO</span>  <a href="http://emacs.stackexchange.com/questions/12121/org-mode-parsing-rich-html-directly-when-pasting">Org mode - Parsing rich HTML directly when pasting? (Stack Overflow)</a>. <br></br></li>
 <li> <a id="org5dc78d3"></a> <span class="todo TODO">TODO</span> From  <a href="https://twitter.com/_wilfredh/status/694643167056916480">@_wilfredh</a>, use (interactive "*") for commands that edit the buffer, so they show a helpful error if the buffer is read only. <br></br></li>
</ul></div>
</div>]]></description>
  <link>http://xenodium.com/emacs-lisp-tips-backlog/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-lisp-tips-backlog/index.html</guid>
  <pubDate>Sat, 06 Feb 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Entering accents in Emacs</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org70027a6" class="outline-2">
 <h2 id="entering-accents-in-emacs"> <span class="timestamp-wrapper"> <span class="timestamp">04 February 2016</span></span> Entering accents in Emacs</h2>
 <div class="outline-text-2" id="text-entering-accents-in-emacs">
 <p>
Via Irreal's  <a href="http://irreal.org/blog/?p=4945">Entering Accented Characters in Emacs</a>, a reminder on how to enter accents using  <b>C-x 8</b>. For example:
</p>

 <pre class="example">
C-x 8 ' A -> Á
</pre>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/entering-accents-in-emacs/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/entering-accents-in-emacs/index.html</guid>
  <pubDate>Thu, 04 Feb 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emacs dired for batch byte compilation</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org5288ed7" class="outline-2">
 <h2 id="emacs-dired-for-batch-byte-compilation"> <span class="timestamp-wrapper"> <span class="timestamp">01 February 2016</span></span> Emacs dired for batch byte compilation</h2>
 <div class="outline-text-2" id="text-emacs-dired-for-batch-byte-compilation">
 <p>
Recently updated org-mode and started seeing an invalid function error:
</p>

 <blockquote>
 <p>
Error (use-package): ob :config: Invalid function: org-babel-header-args-safe-fn
</p>
</blockquote>

 <p>
Just learned dired enables you to mark files and byte compile via  <i>M-x dired-do-byte-compile</i>.</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-dired-for-batch-byte-compilation/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-dired-for-batch-byte-compilation/index.html</guid>
  <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Echo Emacs keybiding from function name</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org187b92e" class="outline-2">
 <h2 id="echo-emacs-keybiding-from-function-name"> <span class="timestamp-wrapper"> <span class="timestamp">01 February 2016</span></span> Echo Emacs keybiding from function name</h2>
 <div class="outline-text-2" id="text-echo-emacs-keybiding-from-function-name">
 <p>
Picked up via Emacs Redux's  <a href="http://emacsredux.com/blog/2016/02/01/display-the-keybinding-for-a-command-with-substitute-command-keys/">Display the Keybinding for a Command With Substitute-command-keys</a>, with my own example:
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(message (substitute-command-keys  <span style="color: #183691;">"Press \\[</span> <span style="color: #0086b3;">ar/ox-html-export</span> <span style="color: #183691;">] to export org file"</span>))
</pre>
</div>

 <pre class="example">
Press <f6> to export org file
</pre>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/echo-emacs-keybiding-from-function-name/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/echo-emacs-keybiding-from-function-name/index.html</guid>
  <pubDate>Mon, 01 Feb 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Added Emacs zone-rainbow</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgb26a55a" class="outline-2">
 <h2 id="added-emacs-zone-rainbow"> <span class="timestamp-wrapper"> <span class="timestamp">19 January 2016</span></span> Added Emacs zone-rainbow</h2>
 <div class="outline-text-2" id="text-added-emacs-zone-rainbow">
 <p>
 <a href="http://twitter.com/kawabata">kawabata's</a>  <a href="https://github.com/kawabata/zone-rainbow">zone-rainbow</a> popped up on melpa today. Added to zone-programs. Just because :)
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">zone-rainbow</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:after</span> zone
   <span style="color: #a71d5d;">:config</span>
  ( <span style="color: #a71d5d;">setq</span> zone-programs (vconcat [zone-rainbow] zone-programs)))
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/added-emacs-zone-rainbow/zone-rainbow.gif" alt="zone-rainbow.gif" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/added-emacs-zone-rainbow/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/added-emacs-zone-rainbow/index.html</guid>
  <pubDate>Tue, 19 Jan 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Basic Emacs keybindings on Linux desktop</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org8e8d36f" class="outline-2">
 <h2 id="basic-emacs-keybindings-on-linux-desktop"> <span class="timestamp-wrapper"> <span class="timestamp">11 January 2016</span></span> Basic Emacs keybindings on Linux desktop</h2>
 <div class="outline-text-2" id="text-basic-emacs-keybindings-on-linux-desktop">
 <p>
Miss C-a, C-e in your browser and other Linux apps? You can enable the GTK Emacs key theme:
</p>
 <div class="org-src-container">
 <pre class="src src-sh">$ gsettings set org.gnome.desktop.interface gtk-key-theme  <span style="color: #183691;">"Emacs"</span>
</pre>
</div>
 <p>
or if on Cinnamon:
</p>
 <div class="org-src-container">
 <pre class="src src-sh">$ gsettings set org.cinnamon.desktop.interface gtk-key-theme Emacs
</pre>
</div>
 <p>
If your desktop environment is not running gnome-settings-daemon, start it with:
</p>
 <div class="org-src-container">
 <pre class="src src-sh">$ gnome-settings-daemon
</pre>
</div>
 <p>
More at  <a href="http://www.jefftk.com/p/emacs-keybindings-in-chrome-without-gnome">Emacs Keybindings in Chrome Without Gnome</a> and  <a href="http://promberger.info/linux/2010/02/16/how-to-get-emacs-key-bindings-in-ubuntu/">How to get Emacs key bindings in Ubuntu</a>.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/basic-emacs-keybindings-on-linux-desktop/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/basic-emacs-keybindings-on-linux-desktop/index.html</guid>
  <pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emacs Objective-C completion with Irony</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orga4b377f" class="outline-2">
 <h2 id="emacs-objective-c-completion-with-irony"> <span class="timestamp-wrapper"> <span class="timestamp">08 January 2016</span></span> Emacs Objective-C completion with Irony</h2>
 <div class="outline-text-2" id="text-emacs-objective-c-completion-with-irony">
</div>
 <div id="outline-container-orgfbdd764" class="outline-3">
 <h3 id="orgfbdd764">Install libclang on Mac</h3>
 <div class="outline-text-3" id="text-orgfbdd764">
 <div class="org-src-container">
 <pre class="src src-sh">brew install llvm --with-clang
</pre>
</div>
</div>
</div>
 <div id="outline-container-org96c2918" class="outline-3">
 <h3 id="org96c2918">Configure Emacs</h3>
 <div class="outline-text-3" id="text-org96c2918">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">irony</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:config</span>
  (add-hook 'objc-mode-hook 'irony-mode)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">company-irony</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:config</span>
  (add-hook  'objc-mode-hook ( <span style="color: #a71d5d;">lambda</span> ()
                               ( <span style="color: #a71d5d;">setq-local</span> company-backends '((company-irony)))))
  (add-hook 'irony-mode-hook 'company-irony-setup-begin-commands))
</pre>
</div>
</div>
</div>
 <div id="outline-container-org731ae7c" class="outline-3">
 <h3 id="org731ae7c">install irony server</h3>
 <div class="outline-text-3" id="text-org731ae7c">
 <p>
Run:
</p>
 <pre class="example">
M-x irony-install-server
</pre>
 <p>
NOTE: Needs libclang: Install with "brew install llvm –with-clang" By default, irony-install-server did not find libclang on Mac OS.  <i>irony-install-server</i> invokes cmake for you. Work around by adding:
</p>
 <pre class="example">
-DCMAKE_PREFIX_PATH=/Users/your-user-name/homebrew/opt/llvm
</pre>
 <p>
For example:
</p>
 <pre class="example">
cmake -DCMAKE_PREFIX_PATH=/Users/your-user-name/homebrew/opt/llvm -DCMAKE_INSTALL_PREFIX\=/Users/your-user-name/.emacs.d/irony/ /Users/your-user-name/.emacs.d/elpa/irony-20160106.1223/server && cmake --build . --use-stderr --config Release --target install
</pre>
</div>
</div>
 <div id="outline-container-orga8a8b20" class="outline-3">
 <h3 id="orga8a8b20">Compilation database</h3>
 <div class="outline-text-3" id="text-orga8a8b20">
</div>
 <div id="outline-container-orge391f0f" class="outline-4">
 <h4 id="orge391f0f">Install xctool</h4>
 <div class="outline-text-4" id="text-orge391f0f">
 <div class="org-src-container">
 <pre class="src src-sh">brew install xctool
</pre>
</div>
</div>
</div>
 <div id="outline-container-org805205f" class="outline-4">
 <h4 id="org805205f">Generate compilation database</h4>
 <div class="outline-text-4" id="text-org805205f">
 <div class="org-src-container">
 <pre class="src src-sh">xctool -sdk iphonesimulator -arch x86_64 -scheme SomeScheme -reporter pretty -reporter json-compilation-database:compile_commands.json clean build
</pre>
</div>
</div>
</div>
</div>
 <div id="outline-container-orga942c8d" class="outline-3">
 <h3 id="orga942c8d">Set Irony's database path</h3>
 <div class="outline-text-3" id="text-orga942c8d">
 <blockquote>
 <p>
M-x irony-cdb-json-add-compile-commands-path
</p>
</blockquote>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-objective-c-completion-with-irony/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-objective-c-completion-with-irony/index.html</guid>
  <pubDate>Fri, 08 Jan 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emacs highlight-symbol-mode</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org8ed9e85" class="outline-2">
 <h2 id="emacs-highlight-symbol-mode"> <span class="timestamp-wrapper"> <span class="timestamp">03 January 2016</span></span> Emacs highlight-symbol-mode</h2>
 <div class="outline-text-2" id="text-emacs-highlight-symbol-mode">
 <p>
Been a fan of  <a href="https://github.com/fgeller/highlight-thing.el">highlight-thing-mode</a>. It automatically highlights all instances of symbol at point. Today, I gave  <a href="https://github.com/nschum/highlight-symbol.el">highlight-symbol</a> a try. Similar concept, but also adds the ability to jump to next/previous instances of symbol at point.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">highlight-symbol</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:config</span>
  (set-face-attribute 'highlight-symbol-face nil
                       <span style="color: #a71d5d;">:background</span>  <span style="color: #183691;">"default"</span>
                       <span style="color: #a71d5d;">:foreground</span>  <span style="color: #183691;">"#FA009A"</span>)
  ( <span style="color: #a71d5d;">setq</span> highlight-symbol-idle-delay 0)
  ( <span style="color: #a71d5d;">setq</span> highlight-symbol-on-navigation-p t)
  (add-hook 'prog-mode-hook #'highlight-symbol-mode)
  (add-hook 'prog-mode-hook #'highlight-symbol-nav-mode))
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/emacs-highlight-symbol-mode/highlight-symbol.gif" alt="highlight-symbol.gif" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-highlight-symbol-mode/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-highlight-symbol-mode/index.html</guid>
  <pubDate>Sun, 03 Jan 2016 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Find in $PATH with type and which</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org798d187" class="outline-2">
 <h2 id="find-in-path-with-type-and-which"> <span class="timestamp-wrapper"> <span class="timestamp">30 December 2015</span></span> Find in $PATH with type and which</h2>
 <div class="outline-text-2" id="text-find-in-path-with-type-and-which">
 <p>
I typically use  <i>which</i> to figure out the first binary found in $PATH:
</p>
 <div class="org-src-container">
 <pre class="src src-sh">which -a emacsclient
</pre>
</div>

 <pre class="example">
/Users/user/homebrew/bin/emacsclient
/usr/bin/emacsclient
</pre>


 <p>
I always forget about  <i>type</i> though:
</p>

 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #a71d5d;">type</span> -a emacsclient
</pre>
</div>

 <pre class="example">
emacsclient is /Users/user/homebrew/bin/emacsclient
emacsclient is /usr/bin/emacsclient
</pre>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/find-in-path-with-type-and-which/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/find-in-path-with-type-and-which/index.html</guid>
  <pubDate>Wed, 30 Dec 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Search bash history with Emacs helm</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org7cae83d" class="outline-2">
 <h2 id="search-bash-history-with-emacs-helm"> <span class="timestamp-wrapper"> <span class="timestamp">20 December 2015</span></span> Search bash history with Emacs helm</h2>
 <div class="outline-text-2" id="text-search-bash-history-with-emacs-helm">
 <p>
Following up from  <a href="../change-emacs-shells-cwd-with-helm-projectile">changing CWD with helm projectile</a>, here's a way to search your bash history with helm:
</p>


 <div class="figure">
 <p> <img src="../images/search-bash-history-with-emacs-helm/helm-bash-history.gif" alt="helm-bash-history.gif" width="75%" height="75%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/helm-helm</span> (title candidates on-select-function)
   <span style="color: #183691;">"Helm with TITLE CANDIDATES and ON-SELECT-FUNCTION."</span>
  (helm  <span style="color: #a71d5d;">:sources</span> `((name . ,title)
                   (candidates . ,candidates)
                   (action . ,on-select-function))
         <span style="color: #a71d5d;">:buffer</span>  <span style="color: #183691;">"*helm-exec*"</span>
         <span style="color: #a71d5d;">:candidate-number-limit</span> 10000))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/shell-send-command</span> (command)
   <span style="color: #183691;">"Send COMMAND to shell mode."</span>
  ( <span style="color: #a71d5d;">assert</span> (string-equal mode-name  <span style="color: #183691;">"Shell"</span>) nil  <span style="color: #183691;">"Not in Shell mode"</span>)
  (goto-char (point-max))
  (comint-kill-input)
  (insert command)
  (comint-send-input))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/helm-shell-search-history</span> ()
   <span style="color: #183691;">"Narrow down bash history with helm."</span>
  ( <span style="color: #a71d5d;">interactive</span>)
  ( <span style="color: #a71d5d;">assert</span> (string-equal mode-name  <span style="color: #183691;">"Shell"</span>) nil  <span style="color: #183691;">"Not in Shell mode"</span>)
  (ar/helm-helm  <span style="color: #183691;">"bash history"</span>
                ( <span style="color: #a71d5d;">with-temp-buffer</span>
                  (insert-file-contents  <span style="color: #183691;">"~/.bash_history"</span>)
                  (reverse
                   (delete-dups
                    (split-string (buffer-string)  <span style="color: #183691;">"\n"</span>))))
                #'ar/shell-send-command))
</pre>
</div>

 <p>
Bonus: Replace existing M-r binding to use ar/helm-shell-search-history.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">bind-key</span>  <span style="color: #183691;">"M-r"</span> #'ar/helm-shell-search-history shell-mode-map)
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/search-bash-history-with-emacs-helm/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/search-bash-history-with-emacs-helm/index.html</guid>
  <pubDate>Sun, 20 Dec 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Drill down Emacs dired with dired-subtree</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgcec7059" class="outline-2">
 <h2 id="drill-down-emacs-dired-with-dired-subtree"> <span class="timestamp-wrapper"> <span class="timestamp">14 December 2015</span></span> Drill down Emacs dired with dired-subtree</h2>
 <div class="outline-text-2" id="text-drill-down-emacs-dired-with-dired-subtree">
 <p>
JCS, from  <a href="http://irreal.org/blog">Irreal</a>, recently  <a href="http://irreal.org/blog/?p%3D4777">highlighted</a> fuco's  <a href="https://github.com/Fuco1/dired-hacks">dired-hacks</a>.  <a href="https://github.com/Fuco1/dired-hacks/blob/master/dired-subtree.el">dired-subtree</a> is super handy for drilling subdirectories down. Bound <tab> and <backtab> to toggle and cycle subtrees.
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">dired-subtree</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:after</span> dired
   <span style="color: #a71d5d;">:config</span>
  ( <span style="color: #a71d5d;">bind-key</span>  <span style="color: #183691;">"<tab>"</span> #'dired-subtree-toggle dired-mode-map)
  ( <span style="color: #a71d5d;">bind-key</span>  <span style="color: #183691;">"<backtab>"</span> #'dired-subtree-cycle dired-mode-map))
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/drill-down-emacs-dired-with-dired-subtree/dired-subtree.gif" alt="dired-subtree.gif" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/drill-down-emacs-dired-with-dired-subtree/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/drill-down-emacs-dired-with-dired-subtree/index.html</guid>
  <pubDate>Mon, 14 Dec 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emacs text faces</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgc990b3f" class="outline-2">
 <h2 id="emacs-text-faces"> <span class="timestamp-wrapper"> <span class="timestamp">12 December 2015</span></span> Emacs text faces</h2>
 <div class="outline-text-2" id="text-emacs-text-faces">
 <ul class="org-ul"> <li>Text faces = Text styles.</li>
 <li>Face attributes: font, height, weight, slant, foreground/background color, and underlining or overlining.</li>
 <li>Font lock mode automatically assigns faces to text.</li>
 <li>M-x list-faces-display: Shows faces defined.</li>
 <li>M-x helm-colors: Also handy.</li>
 <li>Unspecified attributes are taken from 'default' face.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-text-faces/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-text-faces/index.html</guid>
  <pubDate>Sat, 12 Dec 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Installing Emacs spaceline</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org93119b2" class="outline-2">
 <h2 id="installing-emacs-spaceline"> <span class="timestamp-wrapper"> <span class="timestamp">30 November 2015</span></span> Installing Emacs spaceline</h2>
 <div class="outline-text-2" id="text-installing-emacs-spaceline">
 <p>
Gave  <a href="https://github.com/TheBB/spaceline/">Spaceline</a> a try.  <a href="https://github.com/syl20bnr/spacemacs">Spacemacs</a>'s powerline theme. Setup was super simple (Thanks  <a href="https://github.com/TheBB">Eivind Fonn</a> and  <a href="https://github.com/syl20bnr/spacemacs">Sylvain Benner</a>):
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">spaceline</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:config</span>
  ( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">spaceline-config</span>
     <span style="color: #a71d5d;">:config</span>
    (spaceline-toggle-minor-modes-off)
    (spaceline-toggle-buffer-encoding-off)
    (spaceline-toggle-buffer-encoding-abbrev-off)
    ( <span style="color: #a71d5d;">setq</span> powerline-default-separator 'rounded)
    ( <span style="color: #a71d5d;">setq</span> spaceline-highlight-face-func 'spaceline-highlight-face-evil-state)
    (spaceline-define-segment line-column
       <span style="color: #183691;">"The current line and column numbers."</span>
       <span style="color: #183691;">"l:%l c:%2c"</span>)
    (spaceline-define-segment time
       <span style="color: #183691;">"The current time."</span>
      (format-time-string  <span style="color: #183691;">"%H:%M"</span>))
    (spaceline-define-segment date
       <span style="color: #183691;">"The current date."</span>
      (format-time-string  <span style="color: #183691;">"%h %d"</span>))
    (spaceline-toggle-time-on)
    (spaceline-emacs-theme 'date 'time))
</pre>
</div>


 <div class="figure">
 <p> <img src="../images/installing-emacs-spaceline/spaceline.png" alt="spaceline.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/installing-emacs-spaceline/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/installing-emacs-spaceline/index.html</guid>
  <pubDate>Mon, 30 Nov 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>package.el incomprehensible buffer</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org732a28a" class="outline-2">
 <h2 id="package-el-incomprehensible-buffer"> <span class="timestamp-wrapper"> <span class="timestamp">29 November 2015</span></span> package.el incomprehensible buffer</h2>
 <div class="outline-text-2" id="text-package-el-incomprehensible-buffer">
 <p>
Came across "incomprehensible buffer" error in package.el.  <a href="http://osdir.com/ml/general/2015-11/msg22232.html">Workaround patch</a>:
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">--- a/lisp/emacs-lisp/package.el
+++ b/lisp/emacs-lisp/package.el
@@ -1161,6 +1161,7 @@ package--with-work-buffer
( <span style="color: #a71d5d;">let*</span> ((url (concat ,url-1 ,file))
       (callback ( <span style="color: #a71d5d;">lambda</span> (status)
                   ( <span style="color: #a71d5d;">let</span> ((b (current-buffer)))
+                    (goto-char (point-min))
                     ( <span style="color: #a71d5d;">unwind-protect</span> (wrap-errors
                                      ( <span style="color: #a71d5d;">when-let</span> ((er (plist-get
                                                      status  <span style="color: #a71d5d;">:error</span>)))
                                        ( <span style="color: #333333;">error</span>  <span style="color: #183691;">"Error retrieving: %s %S"</span> url er))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/package-el-incomprehensible-buffer/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/package-el-incomprehensible-buffer/index.html</guid>
  <pubDate>Sun, 29 Nov 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Installing Emacs 25 devel on Mac OS X</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orga924393" class="outline-2">
 <h2 id="installing-emacs-on-mac-os-x"> <span class="timestamp-wrapper"> <span class="timestamp">26 November 2015</span></span> Installing Emacs 25 devel on Mac OS X</h2>
 <div class="outline-text-2" id="text-installing-emacs-on-mac-os-x">
</div>
 <div id="outline-container-orgfe1bc8d" class="outline-3">
 <h3 id="orgfe1bc8d">Stable</h3>
 <div class="outline-text-3" id="text-orgfe1bc8d">
 <div class="org-src-container">
 <pre class="src src-sh">brew update
brew install emacs --HEAD --use-git-head --with-cocoa --with-srgb --with-gnutls
brew linkapps emacs
</pre>
</div>
</div>
</div>
 <div id="outline-container-org5936801" class="outline-3">
 <h3 id="org5936801">Development</h3>
 <div class="outline-text-3" id="text-org5936801">
 <div class="org-src-container">
 <pre class="src src-sh">  brew update
  brew install emacs --devel --with-cocoa --with-srgb --with-gnutls
  brew linkapps emacs
 <span style="color: #a71d5d;">then</span>
</pre>
</div>
 <p>
Had problems loading seq. Removed byte-compiled packages:
</p>
 <div class="org-src-container">
 <pre class="src src-sh">$ find ~/.emacs.d/elpa -iname *.elc -exec rm  <span style="color: #183691;">'{}'</span>  <span style="color: #183691;">\;</span>
</pre>
</div>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/installing-emacs-on-mac-os-x/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/installing-emacs-on-mac-os-x/index.html</guid>
  <pubDate>Thu, 26 Nov 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Recover from an unresponsive Emacs</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgece8a5d" class="outline-2">
 <h2 id="recover-from-an-unresponsive-emacs"> <span class="timestamp-wrapper"> <span class="timestamp">04 November 2015</span></span> Recover from an unresponsive Emacs</h2>
 <div class="outline-text-2" id="text-recover-from-an-unresponsive-emacs">
 <p>
 <a href="https://twitter.com/_wilfredh">Wilfred Hughes</a> has a handy  <a href="https://twitter.com/_wilfredh/status/659499112677642242?refsrc%3Demail&s%3D11">tip</a> to bail you out of a hung Emacs instance:
</p>

 <div class="org-src-container">
 <pre class="src src-sh">pkill -SIGUSR2 emacs
</pre>
</div>

 <p>
ps. Not had a chance to try it, but next time it happens…
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/recover-from-an-unresponsive-emacs/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/recover-from-an-unresponsive-emacs/index.html</guid>
  <pubDate>Wed, 04 Nov 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Get Emacs to gather links in posts</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgad8c84e" class="outline-2">
 <h2 id="get-emacs-to-gather-links-in-posts"> <span class="timestamp-wrapper"> <span class="timestamp">17 October 2015</span></span> Get Emacs to gather links in posts</h2>
 <div class="outline-text-2" id="text-get-emacs-to-gather-links-in-posts">
 <p>
Comments in posts can be a great source of recommendations. Here's a way to extract post links using Emacs and  <a href="http://github.com/zweifisch/enlive">enlive</a>.
</p>


 <div class="figure">
 <p> <img src="../images/get-emacs-to-gather-urls-in-posts/emacs-enlive-url-fetch.gif" alt="emacs-enlive-url-fetch.gif" width="75%" height="75%"></img></p>
</div>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">enlive</span>)  <span style="color: #969896;">;; </span> <span style="color: #969896;">https://github.com/zweifisch/enlive</span>
( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">org</span>)

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/input-clipboard-url-or-prompt</span> ()
   <span style="color: #183691;">"Return a URL from clipboard or prompt user for one."</span>
  ( <span style="color: #a71d5d;">let*</span> ((clipboard (current-kill 0))
         (url ( <span style="color: #a71d5d;">if</span> (string-match  <span style="color: #183691;">"^https?://"</span> clipboard)
                  clipboard
                (read-string  <span style="color: #183691;">"URL: "</span>))))
    ( <span style="color: #a71d5d;">unless</span> (string-match  <span style="color: #183691;">"^https?://"</span> url)
      ( <span style="color: #333333;">error</span>  <span style="color: #183691;">"Not a URL"</span>))
    url))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/url-fetch-anchor-elements</span> (url)
   <span style="color: #183691;">"Fetch anchor elements in URL as list of alist:</span>
 <span style="color: #183691;">\((title . \"my title\")</span>
 <span style="color: #183691;"> (url . \"http://some.location.com\"))."</span>
  ( <span style="color: #a71d5d;">let</span> ((elements (enlive-query-all (enlive-fetch url) [a])))
    (mapcar ( <span style="color: #a71d5d;">lambda</span> (element)
              `((title . ,(enlive-text element))
                (url . ,(enlive-attr element 'href))))
            elements)))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/url-view-links-at</span> ()
   <span style="color: #183691;">"View external links in HTML from prompted URL or clipboard."</span>
  ( <span style="color: #a71d5d;">interactive</span>)
  ( <span style="color: #a71d5d;">with-current-buffer</span> (get-buffer-create  <span style="color: #183691;">"*links*"</span>)
    (org-mode)
    (view-mode -1)
    (erase-buffer)
    (mapc ( <span style="color: #a71d5d;">lambda</span> (anchor)
            ( <span style="color: #a71d5d;">let-alist</span> anchor
              ( <span style="color: #a71d5d;">when</span> ( <span style="color: #a71d5d;">and</span> .url (string-match  <span style="color: #183691;">"^http"</span> .url))
                (insert (org-make-link-string .url
                                              .title)  <span style="color: #183691;">"\n"</span>))))
          (ar/url-fetch-anchor-elements
           (ar/input-clipboard-url-or-prompt)))
    (delete-duplicate-lines (point-min) (point-max))
    (goto-char (point-min))
    (toggle-truncate-lines +1)
    (view-mode +1)
(switch-to-buffer (current-buffer))))
</pre>
</div>

 <p>
UPDATE(2019-04-13): Refreshed post with latest code from my  <a href="https://github.com/xenodium/dotsies/blob/9cf32157c5fec140218898dfcb11e74f623fec6c/emacs/ar/ar-url.el#L35">init</a>. Thanks to  <a href="https://twitter.com/sjig">Gĳs</a> for pinging.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/get-emacs-to-gather-links-in-posts/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/get-emacs-to-gather-links-in-posts/index.html</guid>
  <pubDate>Sat, 17 Oct 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Change Emacs shell's CWD with helm projectile</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgcd72ba0" class="outline-2">
 <h2 id="change-emacs-shells-cwd-with-helm-projectile"> <span class="timestamp-wrapper"> <span class="timestamp">08 October 2015</span></span> Change Emacs shell's CWD with helm projectile</h2>
 <div class="outline-text-2" id="text-change-emacs-shells-cwd-with-helm-projectile">
 <p>
If using Emacs shell and helm projectile, you can wire these up to quickly change your current working directory.
</p>


 <div class="figure">
 <p> <img src="../images/change-emacs-shells-cwd-with-helm-projectile/change-cwd-with-helm-projectile.gif" alt="change-cwd-with-helm-projectile.gif" width="75%" height="75%"></img></p>
</div>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">helm-projectile</span>)

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/shell-cd</span> (dir-path)
 <span style="color: #183691;">"Like shell-pop--cd-to-cwd-shell, but without recentering."</span>
  ( <span style="color: #a71d5d;">unless</span> (string-equal mode-name  <span style="color: #183691;">"Shell"</span>)
    ( <span style="color: #333333;">error</span>  <span style="color: #183691;">"Not in Shell mode"</span>))
  (message mode-name)
  (goto-char (point-max))
  (comint-kill-input)
  (insert (concat  <span style="color: #183691;">"cd "</span> (shell-quote-argument dir-path)))
  ( <span style="color: #a71d5d;">let</span> ((comint-process-echoes t))
    (comint-send-input)))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/helm-projectile-shell-cd</span> ()
   <span style="color: #183691;">"Change shell current working directory using helm projectile."</span>
  ( <span style="color: #a71d5d;">interactive</span>)
  ( <span style="color: #a71d5d;">unless</span> (string-equal mode-name  <span style="color: #183691;">"Shell"</span>)
    ( <span style="color: #333333;">error</span>  <span style="color: #183691;">"Not in Shell mode"</span>))
  ( <span style="color: #a71d5d;">let</span> ((helm-dir-source (copy-tree  helm-source-projectile-directories-list)))
    (add-to-list 'helm-dir-source '(action . ar/shell-cd))
    (add-to-list 'helm-dir-source '(keymap . nil))
    (add-to-list 'helm-dir-source '(header-line .  <span style="color: #183691;">"cd to directory..."</span>))
    (helm  <span style="color: #a71d5d;">:sources</span> helm-dir-source
           <span style="color: #a71d5d;">:buffer</span>  <span style="color: #183691;">"*helm-dirs*"</span>
           <span style="color: #a71d5d;">:candidate-number-limit</span> 10000)))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/change-emacs-shells-cwd-with-helm-projectile/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/change-emacs-shells-cwd-with-helm-projectile/index.html</guid>
  <pubDate>Thu, 08 Oct 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>React bookmarks</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org6fc401c" class="outline-2">
 <h2 id="react-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">18 September 2015</span></span> React bookmarks</h2>
 <div class="outline-text-2" id="text-react-bookmarks">
 <span class="modified-timestamp">   <em>updated: 12 July 2018  </em></span>
 <ul class="org-ul"> <li> <a href="https://medium.com/dailyjs/11-mistakes-ive-made-during-react-native-redux-app-development-8544e2be9a9">11 mistakes I’ve made during React Native / Redux app development</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=10962784">9 things every React.js beginner should know (Hacker News)</a>.</li>
 <li> <a href="https://camjackson.net/post/9-things-every-reactjs-beginner-should-know">9 things every React.js beginner should know</a>.</li>
 <li> <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/">A Complete Guide to Flexbox</a>.</li>
 <li> <a href="https://github.com/wix/react-native-navigation">A complete native navigation solution for React Native with optional redux support - nav bars, tabs, drawer, modals</a>.</li>
 <li> <a href="http://mrn.js.org/">A Material Design style React Native component library</a>.</li>
 <li> <a href="https://github.com/syrusakbary/react-native-refresher/blob/master/README.md">A pull to refresh ListView for React Native</a>.</li>
 <li> <a href="http://nerds.airbnb.com/facebook-react-native/">Adam Wolf's React Native talk</a>.</li>
 <li> <a href="http://moduscreate.com/aligning-children-using-flexbox-in-react-native/">Aligning Children using Flexbox in React Native</a>.</li>
 <li> <a href="https://egghead.io/lessons/react-applying-basic-styles-in-react-native">Applying baisc styles in react native (video)</a>.</li>
 <li> <a href="https://egghead.io/lessons/react-applying-basic-styles-in-react-native">Applying Basic Styles in React Native</a>.</li>
 <li> <a href="https://twitter.com/floydophone/status/649786438330945536">Avoid premature fluxing</a>.</li>
 <li> <a href="https://github.com/enaqx/awesome-react/">Awesome React: a collection of awesome things regarding React ecosystem</a>.</li>
 <li> <a href="https://github.com/babel/babel-eslint">babel-eslint</a>.</li>
 <li> <a href="https://medium.com/infinite-red/beginner-s-guide-to-using-cocoapods-with-react-native-46cb4d372995#.i87ebbwl0">Beginner’s Guide to Using CocoaPods with React Native</a>.</li>
 <li> <a href="https://medium.com/delivery-com-engineering/react-native-in-an-existing-ios-app-delivered-874ba95a3c52#.kin2ke23s">Beyong React Native's "getting started guide"</a>.</li>
 <li> <a href="http://blog.bonnieeisenman.com/">Bonnie Eisenman's blog (some react)</a>.</li>
 <li> <a href="https://corbt.com/posts/2015/12/22/breaking-up-heavy-processing-in-react-native.html">Breaking up Heavy Processing in React Native (Blog post)</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=cI9bDvDEsYE">Brent Vatne - Building li.st for Android with Exponent and React Native at react-europe 2016</a>.</li>
 <li> <a href="http://tadeuzagallo.com/blog/react-native-bridge/">Bridging in React Native: An in-depth look into React Native's core</a>.</li>
 <li> <a href="http://tech.taskrabbit.com/blog/2015/10/18/building-react-native-apps/">Building React Native Apps</a>.</li>
 <li> <a href="http://makeitopen.com/tutorials/building-the-f8-app">Bulding the F8 app</a>.</li>
 <li> <a href="https://github.com/adamterlson/cairn">Cairn: a tiny library for React Native replacing default styling syntax</a>.</li>
 <li> <a href="https://medium.com/the-exponent-log/coding-apps-with-react-native-at-exponent-7a5922da27bf#.udrk6kz05">Coding Apps with React Native at Exponent</a>.</li>
 <li> <a href="http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html">Configuring Emacs to use eslint and babel with flycheck for javascript and React.js JSX</a>.</li>
 <li> <a href="https://github.com/markerikson/react-redux-links">Curated tutorial and resource links I've collected on React, Redux, ES6, and more</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=xsSnOQynTHs">Dan Abramov - Live React: Hot Reloading with Time Travel at react-europe 2015</a>.</li>
 <li> <a href="https://medium.com/@shaheenghiassy/deep-diving-react-native-debugging-ea406ed3a691">Deep Diving React Native Debugging</a>.</li>
 <li> <a href="http://ilikekillnerds.com/2015/02/developing-react-js-components-using-es6/">Developing React.js Components Using ES6</a>.</li>
 <li> <a href="https://github.com/rebeccahughes/react-native-device-info">Device Information for React Native iOS and Android</a>.</li>
 <li> <a href="https://engineering.hexacta.com/didact-learning-how-react-works-by-building-it-from-scratch-51007984e5c5">Didact: a DIY guide to build your own React – Hexacta Engineering</a>.</li>
 <li> <a href="http://ejohn.org/blog/ecmascript-5-strict-mode-json-and-more/">ECMAScript 5 Strict Mode, JSON, and More</a>.</li>
 <li> <a href="https://github.com/Intellicode/eslint-plugin-react-native">ESLint plugin for React Native</a>.</li>
 <li> <a href="https://github.com/gcazaciuc/eslint-plugin-flowtype">eslint-plugin-flowtype</a>.</li>
 <li> <a href="https://exponentjs.com/">Exponentjs</a>.</li>
 <li> <a href="https://github.com/coodoo/flowery">Flowery: prettifies the result generated by Facebook Flow</a>.</li>
 <li> <a href="http://blog.krawaller.se/img/flux-diagram.png">Flux diagram</a>.</li>
 <li> <a href="https://egghead.io/series/getting-started-with-redux">Getting Started with Redux (30 lessons)</a>.</li>
 <li> <a href="https://gist.github.com/joshdover/235714771d94509a83609b16d232014a">Idiomatic React Testing Patterns</a>.</li>
 <li> <a href="https://github.com/facebook/react-native/commit/1303e6d0392e8bc4da1198c98fc8cd7ad488b81c">Implement XHR timeout for Android and IOS natively</a>.</li>
 <li> <a href="https://github.com/facebook/react-native/commit/e4c53c28aea7e067e48f5c8c0100c7cafc031b06">Improved shadow performance on iOS</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=11093275">Learn Raw React – No JSX, No Flux, No ES6, No Webpack (Hacker News)</a>.</li>
 <li> <a href="https://github.com/DianQK/LearnRxSwift/blob/master/README.md">LearnRxSwift</a>.</li>
 <li> <a href="https://github.com/facebook/react-native/issues/499#issuecomment-128836161">ListView rendering issue</a>.</li>
 <li> <a href="https://github.com/marcshilling/react-native-image-picker">Native image/photo picker for react native</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=dOSwHABLvdM">Native react navigation in every platform</a>.</li>
 <li> <a href="https://github.com/geirman/offlineMovies">OfflineMovies: retrieves movies from an api and caches the result offline</a>.</li>
 <li> <a href="https://corbt.com/posts/2015/09/16/one-day-with-react-native-for-android.html">One day with React Native for Android</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v%3Dfh_Y4mPivuM">Optimizing React Native views (Screencast)</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=fh_Y4mPivuM">Optimizing React Native views (Screencast)</a>.</li>
 <li> <a href="https://facebook.github.io/react/docs/context.html">Passing info automatically through a tree</a>.</li>
 <li> <a href="https://medium.com/@sharathprabhal/progressive-image-loading-in-react-native-ecc88e724343#.ffudiaxf3">Progressive image loading</a>.</li>
 <li> <a href="http://reactscript.com/categories/layout/">React and React Native Layout Components - ReactScript</a>.</li>
 <li> <a href="https://github.com/kriasoft/react-component-starter">React Component Starter Kit</a>.</li>
 <li> <a href="http://iamdustan.com/2016/01/18/react-custom-renderers/">React Custom Renderers (Blog post)</a>.</li>
 <li> <a href="https://facebook.github.io/react/contributing/design-principles.html">React Design Principles</a>.</li>
 <li> <a href="https://github.com/naoufal/react-native-accordion">React Native accordion</a>.</li>
 <li> <a href="https://github.com/mastermoo/react-native-action-button">React Native action button</a>.</li>
 <li> <a href="https://medium.com/react-weekly/react-native-and-typescript-ad57b7413ead#.w5lky7jol">React Native and Typescript</a>.</li>
 <li> <a href="http://browniefed.com/blog/2015/08/01/react-native-animated-listview-row-swipe/">React Native Animated ScrollView Row Swipe Actions</a>.</li>
 <li> <a href="http://zaicheng.me/2016/06/20/react-native-initial-setup/">React Native App initial setup</a>.</li>
 <li> <a href="https://medium.com/delivery-com-engineering/react-native-in-an-existing-ios-app-dynamic-routing-7013e03fa9ad#.cyv7v7oez">React Native in an Existing iOS App: Dynamic Routing</a>.</li>
 <li> <a href="https://github.com/ericvicenti/react-native-community/">React Native in the Github Community</a>.</li>
 <li> <a href="http://moduscreate.com/react-native-layout-system/">React Native Layout System</a>.</li>
 <li> <a href="https://github.com/lelandrichardson/react-native-maps">React Native Mapview component for iOS + Android</a>.</li>
 <li> <a href="https://github.com/react-native-material-design/react-native-material-design">React Native Material Design (react-native-material-design)</a>.</li>
 <li> <a href="https://github.com/xinthink/react-native-material-kit">React Native Material Design (xinthink)</a>.</li>
 <li> <a href="http://us10.campaign-archive2.com/?u%3Ddb0dd948e2b729ee62625b1a8&id%3Dfbfe8b6010&e%3Dc7b5ce9f56">React Native Newsletter - Issue #24</a>.</li>
 <li> <a href="http://us10.campaign-archive2.com/?u%3Ddb0dd948e2b729ee62625b1a8&id%3D674b414994&e%3Dc7b5ce9f56">React Native Newsletter - Issue #25</a>.</li>
 <li> <a href="https://github.com/rnpm/rnpm">React Native Package Manager (rnpn)</a>.</li>
 <li> <a href="https://rnplay.org/">React Native Playground</a>.</li>
 <li> <a href="http://npm.taobao.org/package/react-native-scrollable-decorator">React Native scrollable decorator</a>.</li>
 <li> <a href="https://github.com/marty-wang/react-native-toolkit">React Native Toolkit (navigation examples)</a>.</li>
 <li> <a href="http://www.raywenderlich.com/99473/introducing-react-native-building-apps-javascript">React Native Tutorial: Building Apps with JavaScript</a>.</li>
 <li> <a href="https://medium.com/@Jpoliachik/react-native-s-layoutanimation-is-awesome-4a4d317afd3e#.97zx978rl">React Native’s LayoutAnimation is Awesome</a>.</li>
 <li> <a href="http://aeflash.com/2015-02/react-tips-and-best-practices.html">React Tips and Best Practices</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=14144142">React-Move – Animate anything in React (Hacker News)</a>.</li>
 <li> <a href="https://github.com/lwansbrough/react-native-camera">react-native-camera: A Camera component for React Native</a>.</li>
 <li> <a href="https://github.com/aksonov/react-native-redux-router">react-native-redux-router (replace push/pop screens with easy syntax)</a>.</li>
 <li> <a href="http://www.reactjsprogram.com/">React.js Program: A project based, linear approach to learning React.js and the React.js ecosystem</a>.</li>
 <li> <a href="https://react.parts/native">react.parts/native feed</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=dwP1TNXE6fc">Reactive Programming Overview</a>.</li>
 <li> <a href="https://github.com/aerofs/react-native-auto-updater">ReactNativeAutoUpdater</a>.</li>
 <li> <a href="https://github.com/rackt/redux">Redux: Predictable state container for JavaScript apps</a>.</li>
 <li> <a href="http://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome">Removing User Interface Complexity, or Why React is Awesome</a>.</li>
 <li> <a href="https://medium.com/@elieslama/responsive-design-in-react-native-876ea9cd72a8#.cjpedynak">Responsive Design in React Native</a>.</li>
 <li> <a href="https://rnplay.org/">rnplay.org: Test and share React Native code samples</a>.</li>
 <li> <a href="https://github.com/bartonhammond/snowflake">Snowflake (React iOS/Android + Redux + Jest testable + parse.com + bitrise.io)</a>.</li>
 <li> <a href="http://hharnisc.github.io/2015/04/15/react-native-and-meteor.html">Some Thoughts On Gluing React Native and Meteor (Blog post)</a>.</li>
 <li> <a href="http://www.schibsted.pl/2015/10/testing-react-native-components-with-jest/">Testing react Native with jest</a>.</li>
 <li> <a href="https://www.firebase.com/blog/2016-01-20-tutorial-firebase-react-native.html">The beginners guide to React Native and Firebase (Blog post)</a>.</li>
 <li> <a href="https://medium.com/swlh/the-case-for-flux-379b7d1982c6#.109lf7s2a">The Case for Flux</a>.</li>
 <li> <a href="https://github.com/Reactive-Extensions/RxJS">The Reactive Extensions for JavaScript</a>.</li>
 <li> <a href="http://www.reactivemanifesto.org/">The reactive manifesto</a>.</li>
 <li> <a href="https://facebook.github.io/react/docs/thinking-in-react.html">Thinking in React</a>.</li>
 <li> <a href="https://getsiphon.com/blog/2016/01/20/future-of-app-development/">Thoughts on the future of mobile app development (Blog post)</a>.</li>
 <li> <a href="https://medium.com/the-react-native-log/tips-for-styling-your-react-native-apps-3f61608655eb#.tg2qh13vd">Tips for styling your React Native apps</a>.</li>
 <li> <a href="http://stanleycyang.github.io/technology/reactjs/native/ios/2015/10/04/react-native-tutorial-with-navigation-and-animation.html">Tutorial: Handcrafting an iOS Application with React Native (and lots of love)</a>.</li>
 <li> <a href="https://medium.com/@jcfrancisco/unit-testing-react-native-components-a-firsthand-guide-cea561df242b#.arff9dygw">Unit Testing React Native Components: A Firsthand Guide</a>.</li>
 <li> <a href="https://medium.com/infinite-red/using-redux-saga-to-simplify-your-growing-react-native-codebase-2b8036f650de#.382a5inf8">Using redux-saga To Simplify Your Growing React Native Codebase</a>.</li>
 <li> <a href="https://medium.com/shoutem/ways-to-pass-objects-between-native-and-javascript-in-react-native-c3dcae7bf4f5">Ways to pass objects between native and JavaScript in React Native</a>.</li>
 <li> <a href="http://blog.zmxv.com/2015/09/what-i-learned-from-building-react.html">What I learned from building with React</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=QQRDcYsN4xs">Why React Native is Better than Native for Your Mobile Application</a>.</li>
 <li> <a href="http://addyosmani.com/writing-modular-js/">Writing Modular JavaScript With AMD, CommonJS & ES Harmony</a>.</li>
 <li> <a href="https://github.com/johnmastro/react-snippets.el">Yasnippets for React</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/react-bookmarks/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/react-bookmarks/index.html</guid>
  <pubDate>Fri, 18 Sep 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Open closest build file in Emacs</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org4d42590" class="outline-2">
 <h2 id="open-closest-build-file-in-emacs"> <span class="timestamp-wrapper"> <span class="timestamp">17 July 2015</span></span> Open closest build file in Emacs</h2>
 <div class="outline-text-2" id="text-open-closest-build-file-in-emacs">
 <p>
Whether it's Makefile, SConstruct, BUILD, or your favorite build file, chances are you have to tweak it from time to time.  <code>ar/open-build-file</code> searches your current and parent directories to find a build file.
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">defvar</span>  <span style="color: #333333;">ar/project-file-names</span> '( <span style="color: #183691;">"Makefile"</span>  <span style="color: #183691;">"SConstruct"</span>  <span style="color: #183691;">"BUILD"</span>))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/parent-directory</span> (path)
   <span style="color: #183691;">"Get parent directory for PATH."</span>
  ( <span style="color: #a71d5d;">unless</span> (equal  <span style="color: #183691;">"/"</span> path)
    (file-name-directory (directory-file-name path))))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/find-upwards</span> (path filename)
   <span style="color: #183691;">"Search upwards from PATH for a file named FILENAME."</span>
  ( <span style="color: #a71d5d;">let</span> ((file (concat path filename))
        (parent (ar/parent-directory (expand-file-name path))))
    ( <span style="color: #a71d5d;">if</span> (file-exists-p file)
        file
      ( <span style="color: #a71d5d;">when</span> parent
        (ar/find-upwards parent filename)))))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/open-closest</span> (filename)
   <span style="color: #183691;">"Open the closest FILENAME in current or parent dirs (handy for finding Makefiles)."</span>
  ( <span style="color: #a71d5d;">let</span> ((closest-file-path (ar/find-upwards (buffer-file-name)
                                                 filename)))
    ( <span style="color: #a71d5d;">when</span> closest-file-path
      (message closest-file-path)
      (switch-to-buffer (find-file-noselect closest-file-path)))
    closest-file-path))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/open-build-file</span> ()
   <span style="color: #183691;">"Open the closest project file in current or parent directory.</span>
 <span style="color: #183691;">For example: Makefile, SConstruct, BUILD, etc.</span>
 <span style="color: #183691;">Append `</span> <span style="color: #0086b3;">ar/project-file-names</span> <span style="color: #183691;">' to search for other file names."</span>
  ( <span style="color: #a71d5d;">interactive</span>)
  ( <span style="color: #a71d5d;">catch</span> ' <span style="color: #0086b3;">found</span>
    (mapc ( <span style="color: #a71d5d;">lambda</span> (filename)
            ( <span style="color: #a71d5d;">when</span> (ar/open-closest filename)
              ( <span style="color: #a71d5d;">throw</span> ' <span style="color: #0086b3;">found</span> t)))
          ar/project-file-names)
    ( <span style="color: #333333;">error</span>  <span style="color: #183691;">"No project file found"</span>)))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/open-closest-build-file-in-emacs/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/open-closest-build-file-in-emacs/index.html</guid>
  <pubDate>Fri, 17 Jul 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Recognize new password prompts in Emacs shell</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgebb1b54" class="outline-2">
 <h2 id="recognize-new-password-prompts-in-emacs-shell"> <span class="timestamp-wrapper"> <span class="timestamp">13 July 2015</span></span> Recognize new password prompts in Emacs shell</h2>
 <div class="outline-text-2" id="text-recognize-new-password-prompts-in-emacs-shell">
 <p>
At some point, you may come across a trusted command-line utility prompting you for a password, and Emacs shell happily displaying each typed character to the nearby-world to see. Luckily, you can train Emacs to recognize new password prompts and hide the typed characters in modes deriving from comint. Append the password prompt REGEXP:
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">setq</span> comint-password-prompt-regexp (concat comint-password-prompt-regexp
                                             <span style="color: #183691;">"</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">|</span> <span style="color: #183691;">"</span>
                                             <span style="color: #183691;">"Password for red alert:"</span>))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/recognize-new-password-prompts-in-emacs-shell/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/recognize-new-password-prompts-in-emacs-shell/index.html</guid>
  <pubDate>Mon, 13 Jul 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Fishing with Emacs</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orga214fe9" class="outline-2">
 <h2 id="fishing-with-emacs"> <span class="timestamp-wrapper"> <span class="timestamp">03 July 2015</span></span> Fishing with Emacs</h2>
 <div class="outline-text-2" id="text-fishing-with-emacs">
 <p>
OK not quite, but having recently learned about  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Appending-Kills.html">C-M-w (append-next-kill)</a>, I used it in a keyboard macro to fish out matching lines. This is similar to  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Other-Repeating-Search.html">flush-lines</a>, except the kill ring is also populated. This is handy, if you need the flushed lines. Here's an example.
</p>


 <div class="figure">
 <p> <img src="../images/fishing-with-emacs/fishing.gif" alt="fishing.gif" width="75%" height="75%"></img></p>
</div>

 <p>
Here's the equivalent in Emacs lisp:
</p>

 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">flush-kill-lines</span> (regex)
   <span style="color: #183691;">"Flush lines matching REGEX and append to kill ring.  Restrict to \</span>
 <span style="color: #183691;">region if active."</span>
  ( <span style="color: #a71d5d;">interactive</span>  <span style="color: #183691;">"sFlush kill regex: "</span>)
  ( <span style="color: #a71d5d;">save-excursion</span>
    ( <span style="color: #a71d5d;">save-restriction</span>
      ( <span style="color: #a71d5d;">when</span> (use-region-p)
        (narrow-to-region (point) (mark))
        (goto-char 0))
      ( <span style="color: #a71d5d;">while</span> (search-forward-regexp regex nil t)
        (move-beginning-of-line nil)
        (kill-whole-line)))))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/fishing-with-emacs/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/fishing-with-emacs/index.html</guid>
  <pubDate>Fri, 03 Jul 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Searchable ebooks in Emacs</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgfcee427" class="outline-2">
 <h2 id="searchable-ebooks-in-emacs"> <span class="timestamp-wrapper"> <span class="timestamp">30 June 2015</span></span> Searchable ebooks in Emacs</h2>
 <div class="outline-text-2" id="text-searchable-ebooks-in-emacs">
 <p>
If you haven't bought  <a href="https://www.masteringemacs.org/book">Mastering Emacs</a> by  <a href="https://twitter.com/mickeynp">Mickey Petersen</a>, you should. It's a wonderful source of Emacs tips. Having just finished the ebook on my Kindle, I was keen to go back and fish out some of that newly found wisdom. My immediate reaction was to figure out a way to make the ebook searchable from Emacs.
</p>

 <p>
The ebook is available in epub and pdf format. Though Emacs's docview is super handy for viewing pdf's, searching didn't feel as comfortable as searching in org mode. The epub, on the other hand, proved useful.  <a href="http://pandoc.org">Pandoc</a> can easily convert from epub to org.
</p>

 <div class="org-src-container">
 <pre class="src src-sh">pandoc  --from=epub --to=org mastering-emacs.epub > mastering-emacs.org
</pre>
</div>

 <p>
After a some tidying (mostly removing BEGIN_HTML/END_HTML blocks and adding TITLE/AUTHOR), the resulting org file is surprisingly clean and easy to search/navigate.  <a href="https://github.com/ShingoFukuyama/helm-swoop">helm-swoop</a> and  <a href="https://github.com/emacs-helm/helm/blob/199b9feb396eedc0e502dd767b19060f7dc09f6a/helm-org.el">helm-org-in-buffer-headings</a> are great for that.
</p>


 <div class="figure">
 <p> <img src="../images/searchable-ebooks-in-emacs/mastering-emacs-org-00.png" alt="mastering-emacs-org-00.png" width="75%" height="75%"></img></p>
</div>

 <div class="figure">
 <p> <img src="../images/searchable-ebooks-in-emacs/mastering-emacs-org-01.png" alt="mastering-emacs-org-01.png" width="75%" height="75%"></img></p>
</div>

 <div class="figure">
 <p> <img src="../images/searchable-ebooks-in-emacs/mastering-emacs-org-02.png" alt="mastering-emacs-org-02.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/searchable-ebooks-in-emacs/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/searchable-ebooks-in-emacs/index.html</guid>
  <pubDate>Tue, 30 Jun 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Xcode bookmarks</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org7cac06d" class="outline-2">
 <h2 id="xcode-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">02 June 2015</span></span> Xcode bookmarks</h2>
 <div class="outline-text-2" id="text-xcode-bookmarks">
 <span class="modified-timestamp">   <em>updated: 22 October 2015  </em></span>
 <ul class="org-ul"> <li> <a href="https://medium.com/ios-os-x-development/a-better-way-to-automatically-merge-changes-in-your-xcode-project-files-3d83b3583fe4#.hz33egjv1">A Better Way to Automatically Merge Changes in Your XCode Project Files</a>.</li>
 <li> <a href="http://www.amazon.co.uk/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?ie=UTF8&qid=1444472656&sr=8-1&keywords=Clean+Code%3A+A+Handbook+of+Agile+Software+Craftsmanship">Clean Code: A Handbook of Agile Software Craftsmanship (Book)</a>.</li>
 <li> <a href="https://github.com/FuzzyAutocomplete/FuzzyAutocompletePlugin/blob/master/README.md">Fuzzy autocomplete for Xcode</a>.</li>
 <li> <a href="https://github.com/kolinkrewinkel/Multiplex">Multiplex (like Emacs multiple cursor but for Xcode)</a>.</li>
 <li> <a href="http://chen.do/blog/2013/10/22/reverse-engineering-xcode-with-dtrace/">Reverse-engineering Xcode with dtrace</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/xcode-bookmarks/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/xcode-bookmarks/index.html</guid>
  <pubDate>Tue, 02 Jun 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Mastering Emacs is out</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org9740e4a" class="outline-2">
 <h2 id="mastering-emacs-is-out"> <span class="timestamp-wrapper"> <span class="timestamp">28 May 2015</span></span> Mastering Emacs is out</h2>
 <div class="outline-text-2" id="text-mastering-emacs-is-out">
 <p>
Emacs is amazingly alive. New packages are regularly listed on  <a href="http://melpa.org">melpa</a> and a new book just came out:  <a href="https://www.masteringemacs.org/book">Mastering Emacs</a> by  <a href="https://twitter.com/mickeynp">Mickey Petersen</a>.
</p>


 <div class="figure">
 <p> <a href="https://www.masteringemacs.org/book"> <img src="../images/mastering-emacs-is-out/cover.png" alt="cover.png"></img></a>
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/mastering-emacs-is-out/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/mastering-emacs-is-out/index.html</guid>
  <pubDate>Thu, 28 May 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>define-word</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgdf434b8" class="outline-2">
 <h2 id="define-word"> <span class="timestamp-wrapper"> <span class="timestamp">25 May 2015</span></span> define-word</h2>
 <div class="outline-text-2" id="text-define-word">
 <p>
Installed  <a href="https://github.com/abo-abo">Abo Abo's</a>  <a href="https://github.com/abo-abo/define-word">define-word</a> Emacs package. A handy package to define words at point.
</p>


 <div class="figure">
 <p> <img src="../images/define-word/define-word.png" alt="define-word.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/define-word/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/define-word/index.html</guid>
  <pubDate>Mon, 25 May 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>restclient.el</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org738db61" class="outline-2">
 <h2 id="restclient.el"> <span class="timestamp-wrapper"> <span class="timestamp">25 May 2015</span></span> restclient.el</h2>
 <div class="outline-text-2" id="text-restclient.el">
 <p>
Installed  <a href="https://github.com/pashky/restclient.el">Pashky's</a>  <a href="https://github.com/pashky/restclient.el">restclient.el</a> Emacs package. Super helpful when trying out REST APIs.
</p>


 <div class="figure">
 <p> <img src="../images/restclient.el/restclient.png" alt="restclient.png" width="75%" height="75%"></img></p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/restclient.el/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/restclient.el/index.html</guid>
  <pubDate>Mon, 25 May 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Regex bookmarks</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org573bb30" class="outline-2">
 <h2 id="regex-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">22 May 2015</span></span> Regex bookmarks</h2>
 <div class="outline-text-2" id="text-regex-bookmarks">
 <span class="modified-timestamp">   <em>updated: 06 August 2019  </em></span>
 <ul class="org-ul"> <li> <a href="http://ergoemacs.org/emacs/emacs_regex.html">Emacs: Text Pattern Matching (regex) tutorial</a>.</li>
 <li> <a href="https://dev.to/emmawedekind/regex-cheat-sheet-2j2a">Regex Cheat Sheet (DEV Community)</a>.</li>
 <li> <a href="http://regexrenamer.sourceforge.net/help/regex_quickref.html">Regex quick reference</a>: From regexrenamer.</li>
 <li> <a href="https://news.ycombinator.com/item">RegExr, see hacker news comments for other suggestions</a>.</li>
 <li> <a href="http://regexr.com/">RegExr: A website for interactive regex prototyping with syntax highlighting</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/regex-bookmarks/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/regex-bookmarks/index.html</guid>
  <pubDate>Fri, 22 May 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Flushing empty lines in Emacs</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org9b6f322" class="outline-2">
 <h2 id="flushing-empty-lines-in-emacs"> <span class="timestamp-wrapper"> <span class="timestamp">22 May 2015</span></span> Flushing empty lines in Emacs</h2>
 <div class="outline-text-2" id="text-flushing-empty-lines-in-emacs">
 <p>
Via  <a href="https://www.masteringemacs.org">masteringemacs.org</a>,  <a href="https://www.masteringemacs.org/article/removing-blank-lines-buffer">removing blank lines in a buffer</a>:
</p>
 <pre class="example">
M-x flush-lines RET ^$ RET
</pre>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/flushing-empty-lines-in-emacs/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/flushing-empty-lines-in-emacs/index.html</guid>
  <pubDate>Fri, 22 May 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emacs key bindings and maps</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org1689458" class="outline-2">
 <h2 id="emacs-key-bindings-and-maps"> <span class="timestamp-wrapper"> <span class="timestamp">23 April 2015</span></span> Emacs key bindings and maps</h2>
 <div class="outline-text-2" id="text-emacs-key-bindings-and-maps">
</div>
 <div id="outline-container-org9bf977d" class="outline-3">
 <h3 id="org9bf977d">based on  <a href="http://www.masteringemacs.org/article/mastering-key-bindings-emacs">masteringemacs.org</a>.</h3>
</div>
 <div id="outline-container-org0b704b6" class="outline-3">
 <h3 id="org0b704b6">bonus tip</h3>
 <div class="outline-text-3" id="text-org0b704b6">
 <p>
prefix key, followed by c-h, lists keys in prefix.
</p>
</div>
</div>
 <div id="outline-container-orged41625" class="outline-3">
 <h3 id="orged41625">keymap</h3>
 <div class="outline-text-3" id="text-orged41625">
 <p>
maps key to action.
</p>
</div>
</div>
 <div id="outline-container-orgbce7bd3" class="outline-3">
 <h3 id="orgbce7bd3">keymap found in buffer and most major modes.</h3>
</div>
 <div id="outline-container-org8307fd1" class="outline-3">
 <h3 id="org8307fd1">keys</h3>
 <div class="outline-text-3" id="text-org8307fd1">
 <ul class="org-ul"> <li>undefined: self explanatory.</li>
 <li>prefix key: ie. c-x (part of complete key).</li>
 <li>complete key: complete input executes associated command.</li>
</ul></div>
</div>
 <div id="outline-container-orge9e62c4" class="outline-3">
 <h3 id="orge9e62c4">mapping</h3>
 <div class="outline-text-3" id="text-orge9e62c4">
 <ul class="org-ul"> <li>(define-key keymap key def): add to current buffer map.</li>
 <li>(local-set-key key command): add to active buffer (no map option).</li>
 <li>(local-unset-key key)</li>
 <li>(global-set-key key command): add to global keymap (all buffers).</li>
 <li>(global-unset-key key)</li>
</ul></div>
</div>
 <div id="outline-container-orgdd2b752" class="outline-3">
 <h3 id="orgdd2b752">key codes</h3>
 <div class="outline-text-3" id="text-orgdd2b752">
 <ul class="org-ul"> <li>kbd: macro transaltes human-readable key to emacs readable.</li>
 <li>function and navigation keys must be surrounded by <>.</li>
 <li>example: (kbd "c-c p") or (kbd "<f8>") of (kbd "<down>").</li>
</ul></div>
</div>
 <div id="outline-container-org8068968" class="outline-3">
 <h3 id="org8068968">remapping</h3>
 <div class="outline-text-3" id="text-org8068968">
 <ul class="org-ul"> <li>use remap to replace mapping (ie. kill-line with my/kill-line).</li>
 <li>(define-key keymap [remap original-function] 'my-own-function).</li>
</ul></div>
</div>
 <div id="outline-container-orgeabfbed" class="outline-3">
 <h3 id="orgeabfbed">reserved keys</h3>
 <div class="outline-text-3" id="text-orgeabfbed">
 <ul class="org-ul"> <li>"c-c ?" generally reserved for you, but third party packages use it.</li>
 <li>function keys (ie. f1-f12).</li>
 <li>hyper and super (ancient).</li>
</ul></div>
</div>
 <div id="outline-container-orga1531f6" class="outline-3">
 <h3 id="orga1531f6">lookup order</h3>
 <div class="outline-text-3" id="text-orga1531f6">
 <ul class="org-ul"> <li>in a nutshell: minor mode keys, local keys, global keys.</li>
 <li>full order:
 <ol class="org-ol"> <li>overriding-terminal-local-map: terminal-specific key binds.</li>
 <li>overriding-local-map: override all other local keymaps (avoid if possible).</li>
 <li>char property at point: useful for yasnippet.</li>
 <li>emulation-mode-map-alists: advanced multi-mode keymap.</li>
 <li>minor-mode-overriding-map-alist: minor modes in major modes.</li>
 <li>minor-mode-map-alist: as previous (preferred for minor modes) <–—</li>
 <li>current-local-map: buffers current local map.</li>
 <li>current-global-map: last place to look (ie. global).</li>
</ol></li>
</ul></div>
</div>
 <div id="outline-container-orgbbfb523" class="outline-3">
 <h3 id="orgbbfb523">mode hooks</h3>
 <div class="outline-text-3" id="text-orgbbfb523">
 <ul class="org-ul"> <li>(local-set-key (kbd "c-c q") 'my-awesome-method)) in hook-method.</li>
 <li>for key-chord-define, use current-local-map.</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-key-bindings-and-maps/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-key-bindings-and-maps/index.html</guid>
  <pubDate>Thu, 23 Apr 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Helm-describe-helm-attribute</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org69abaca" class="outline-2">
 <h2 id="helm-describe-helm-attribute"> <span class="timestamp-wrapper"> <span class="timestamp">14 April 2015</span></span> Helm-describe-helm-attribute</h2>
 <div class="outline-text-2" id="text-helm-describe-helm-attribute">
 <p>
 <a href="https://www.youtube.com/watch?v%3DXjKtkEMUYGc">Writing A Spotify Client in 16 Minutes</a> is fantastic for picking up helm and Emacs lisp tips. Of interest helm-describe-helm-attribute, second to the awesomeness of helm-spotify integration.
</p>
 <div class="org-src-container">
 <pre class="src src-html">< <span style="color: #795da3;">iframe</span>  <span style="color: #333333;">width</span>= <span style="color: #183691;">'420'</span>
         <span style="color: #333333;">height</span>= <span style="color: #183691;">'315'</span>
         <span style="color: #333333;">src</span>= <span style="color: #183691;">'https://www.youtube.com/embed/XjKtkEMUYGc'</span>
         <span style="color: #333333;">frameborder</span>= <span style="color: #183691;">'0'</span>
        allowfullscreen>
</ <span style="color: #795da3;">iframe</span>>
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/helm-describe-helm-attribute/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/helm-describe-helm-attribute/index.html</guid>
  <pubDate>Tue, 14 Apr 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Youtube videos in your org html export</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgae05e9c" class="outline-2">
 <h2 id="youtube-videos-in-your-org-html-export"> <span class="timestamp-wrapper"> <span class="timestamp">12 April 2015</span></span> Youtube videos in your org html export</h2>
 <div class="outline-text-2" id="text-youtube-videos-in-your-org-html-export">
 <p>
 <a href="https://twitter.com/sachachua">Sacha Chua</a> and  <a href="https://twitter.com/jwiegley">John Wiegley</a> posted a wonderful video on  <a href="http://sachachua.com/blog/2015/04/2015-04-08-emacs-lisp-development-tips-with-john-wiegley">Emacs lisp development tips</a>. Embedding the following raw HTML using #+BEGIN_HTML/#+END_HTML:
</p>
 <div class="org-src-container">
 <pre class="src src-html">< <span style="color: #795da3;">iframe</span>  <span style="color: #333333;">width</span>= <span style="color: #183691;">"420"</span>
         <span style="color: #333333;">height</span>= <span style="color: #183691;">"315"</span>
         <span style="color: #333333;">src</span>= <span style="color: #183691;">"https://www.youtube.com/embed/QRBcm6jFJ3Q"</span>
         <span style="color: #333333;">frameborder</span>= <span style="color: #183691;">"0"</span>
        allowfullscreen>
</ <span style="color: #795da3;">iframe</span>>
</pre>
</div>
 <p>
results in an embedded video when exporting your org file:
</p>
 <div class="org-src-container">
 <pre class="src src-html">< <span style="color: #795da3;">iframe</span>  <span style="color: #333333;">width</span>= <span style="color: #183691;">"420"</span>
         <span style="color: #333333;">height</span>= <span style="color: #183691;">"315"</span>
         <span style="color: #333333;">src</span>= <span style="color: #183691;">"https://www.youtube.com/embed/QRBcm6jFJ3Q"</span>
         <span style="color: #333333;">frameborder</span>= <span style="color: #183691;">"0"</span>
        allowfullscreen>
</ <span style="color: #795da3;">iframe</span>>
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/youtube-videos-in-your-org-html-export/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/youtube-videos-in-your-org-html-export/index.html</guid>
  <pubDate>Sun, 12 Apr 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Git commit message style</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org8bbb1b7" class="outline-2">
 <h2 id="git-commit-message-style"> <span class="timestamp-wrapper"> <span class="timestamp">09 April 2015</span></span> Git commit message style</h2>
 <div class="outline-text-2" id="text-git-commit-message-style">
 <p>
Adopted Tim Pope's Git commit message  <a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">style</a>. Also enabled Emacs's git-commit-training-wheels-mode:
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">git-commit-training-wheels-mode</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:commands</span> (git-commit-training-wheels-mode))

( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">git-commit-mode</span>  <span style="color: #a71d5d;">:ensure</span> t
   <span style="color: #a71d5d;">:config</span>
  (add-hook 'git-commit-mode-hook 'git-commit-training-wheels-mode)
   <span style="color: #a71d5d;">:commands</span> (git-commit-mode))
</pre>
</div>
 <p>
Another great  <a href="http://chris.beams.io/posts/git-commit/">post</a> by Chris Beams.
</p>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/git-commit-message-style/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/git-commit-message-style/index.html</guid>
  <pubDate>Thu, 09 Apr 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>fci-mode and org-html-export-to-html bug</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgc469ed3" class="outline-2">
 <h2 id="fci-mode-and-org-html-export-to-html-bug"> <span class="timestamp-wrapper"> <span class="timestamp">06 April 2015</span></span> fci-mode and org-html-export-to-html bug</h2>
 <div class="outline-text-2" id="text-fci-mode-and-org-html-export-to-html-bug">
 <p>
Having enabled fci-mode in most programing modes, org-html-export-to-html now exports an additional unicode character in source blocks. This  <a href="http://lists.gnu.org/archive/html/emacs-orgmode/2014-09/msg00777.html">thread</a> has a workaround:
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">org-html-fontify-code</span> (code lang)
   <span style="color: #969896;">;; </span> <span style="color: #969896;">...</span>
  (funcall lang-mode)
 <span style="color: #969896;">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
  ( <span style="color: #a71d5d;">when</span> ( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">fill-column-indicator</span> nil 'noerror)
    (fci-mode -1))
 <span style="color: #969896;">;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;</span>
  (insert code)
   <span style="color: #969896;">;; </span> <span style="color: #969896;">...</span>
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/fci-mode-and-org-html-export-to-html-bug/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/fci-mode-and-org-html-export-to-html-bug/index.html</guid>
  <pubDate>Mon, 06 Apr 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emacs init.el bookmarks</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org11e5503" class="outline-2">
 <h2 id="emacs-init.el-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">28 March 2015</span></span> Emacs init.el bookmarks</h2>
 <div class="outline-text-2" id="text-emacs-init.el-bookmarks">
 <span class="modified-timestamp">   <em>updated: 15 January 2020  </em></span>
 <ul class="org-ul"> <li> <a href="https://github.com/daschwa/emacs.d">Adam Schwartz's init</a>.</li>
 <li> <a href="https://github.com/apg/emacs-config/tree/master/lisp/activator.d">Andrew Gwozdziewycz's init.el</a>.</li>
 <li> <a href="http://www.cs.utah.edu/~aek/code/init.el.html">Andrew Kensler's init.el</a>.</li>
 <li> <a href="https://github.com/Droogans/.emacs.d/blob/mac/init.el">Andrew's .emacs</a>.</li>
 <li> <a href="https://github.com/ikame/.emacs.d-literate">Anler Hernandez's literate config</a>.</li>
 <li> <a href="https://github.com/redguardtoo/emacs.d/">Chen Bin's init.el</a>.</li>
 <li> <a href="https://github.com/eastwood/config/blob/master/emacs.d/org-init.org">Clinton Ryan's init (JS config)</a>.</li>
 <li> <a href="https://github.com/daviderestivo/emacs-config/blob/master/README.md">daviderestivo/emacs-config (clean/macOS)</a>.</li>
 <li> <a href="https://github.com/iocanel/dotfiles/blob/master/.config/emacs/config.org">dotfiles/config.org at master · iocanel/dotfiles · GitHub (mu4e config)</a>.</li>
 <li> <a href="https://www.emacswiki.org/emacs/StarterKits">EmacsWiki: Starter Kits</a>.</li>
 <li> <a href="https://github.com/ejmr/DotEmacs/blob/master/.emacs">Eric James Michael Ritz</a>.</li>
 <li> <a href="https://github.com/rememberYou/.emacs.d/">GitHub - FIXME rememberYou/.emacs.d: Personal GNU Emacs configuration</a>.</li>
 <li> <a href="https://github.com/Fuco1/.emacs.d">GitHub - Fuco1/.emacs.d: My emacs config</a>.</li>
 <li> <a href="https://github.com/zamansky/emacs.dz">GitHub - zamansky/emacs.dz: Awesome emacs config files</a>.</li>
 <li> <a href="https://github.com/grettke/home/blob/master/ALEC.txt">Grant Rettke's literate config</a>.</li>
 <li> <a href="http://doc.rix.si/org/fsem.html">Hardcore Freestyle Emacs</a>.</li>
 <li> <a href="https://github.com/huseyinyilmaz/emacs-config/blob/master/lisp/user-init.el">Huseyin Yilmaz</a>.</li>
 <li> <a href="https://github.com/ianpan870102/.personal-emacs.d/blob/master/init.el">ianpan870102/.personal-emacs.d</a>.</li>
 <li> <a href="http://ivanmalison.github.io/dotfiles/">Ivan Malison's Emacs init</a>.</li>
 <li> <a href="http://ivanmalison.github.io/dotfiles/#colorizecompliationbuffers">Ivan Malison's init.el</a>.</li>
 <li> <a href="http://www.john2x.com/emacs.html">John's Emacs Config (mu4e and ledger usage)</a>.</li>
 <li> <a href="https://justin.abrah.ms/dotfiles/emacs.html">Justin Abrahms: My Emacs Configuration</a>.</li>
 <li> <a href="https://ladicle.com/post/config/">Ladicle's Emacs Configuration</a>.</li>
 <li> <a href="https://github.com/MatthewZMD/.emacs.d#lsp">M-EMACS's lsp config</a>.</li>
 <li> <a href="https://github.com/msparks/dotfiles/blob/master/.emacs">Mark Sparks's init.el</a>.</li>
 <li> <a href="https://github.com/CQQL/dotfiles/blob/master/src/.emacs.d/init.el">Marten Lienen's init.el</a>.</li>
 <li> <a href="http://writequit.org/org/settings.html">Mathew Lee Hinman's Emacs settings file</a>.</li>
 <li> <a href="https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org">Mathieu Marques's wonderful literary config (uses tern for Javascript)</a>.</li>
 <li> <a href="https://github.com/abdullin/emacs.d/blob/master/emacs.org">Rinat Abdullin's literary config</a>.</li>
 <li> <a href="https://github.com/To1ne/temacco">Temacco's init</a>.</li>
 <li> <a href="https://gitlab.com/to1ne/temacco">Temacco's Plutonium empowered emacs</a>.</li>
 <li> <a href="https://github.com/wasamasa/dotemacs/blob/master/TODO.org">Wasamama's extensive init TODO </a>.</li>
 <li> <a href="http://zzamboni.org/post/my-emacs-configuration-with-commentary/">zzamboni.org | My Emacs Configuration, With Commentary</a>.</li>
 <li> <a href="https://etienne.depar.is/emacs.d/init.html">Étienne Deparis's Emacs Main Initialization File</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-init.el-bookmarks/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-init.el-bookmarks/index.html</guid>
  <pubDate>Sat, 28 Mar 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Helm buffer URLs</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org87e6102" class="outline-2">
 <h2 id="helm-buffer-urls"> <span class="timestamp-wrapper"> <span class="timestamp">26 March 2015</span></span> Helm buffer URLs</h2>
 <div class="outline-text-2" id="text-helm-buffer-urls">
 <p>
Venturing into Emacs lisp and  <a href="https://github.com/emacs-helm/helm">Helm</a>. Here's a go at listing all URLs in current buffer.
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">require</span> ' <span style="color: #0086b3;">goto-addr</span>)

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/helm-buffer-url-candidates</span> ()
   <span style="color: #183691;">"Generate helm candidates for all URLs in buffer."</span>
  ( <span style="color: #a71d5d;">save-excursion</span>
    (goto-char (point-min))
    ( <span style="color: #a71d5d;">let</span> ((helm-candidates '())
          (url))
      ( <span style="color: #a71d5d;">while</span> (re-search-forward goto-address-url-regexp
                                nil t)
        ( <span style="color: #a71d5d;">setq</span> url
              (buffer-substring-no-properties (match-beginning 0)
                                              (match-end 0)))
        (add-to-list 'helm-candidates
                     (cons url
                           url)))
      helm-candidates)))

( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/helm-buffer-urls</span> ()
   <span style="color: #183691;">"Narrow down and open a URL in buffer."</span>
  ( <span style="color: #a71d5d;">interactive</span>)
  (helm  <span style="color: #a71d5d;">:sources</span> `(((name .  <span style="color: #183691;">"Buffer URLs"</span>)
                    (candidates . ,(ar/helm-buffer-url-candidates))
                    (action . ( <span style="color: #a71d5d;">lambda</span> (url)
                                (browse-url url)))))))
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/helm-buffer-urls/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/helm-buffer-urls/index.html</guid>
  <pubDate>Thu, 26 Mar 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Org tips from 2015-03-18 Emacs hangout</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org4cc436c" class="outline-2">
 <h2 id="org-tips-from-2015-03-18-emacs-hangout"> <span class="timestamp-wrapper"> <span class="timestamp">19 March 2015</span></span> Org tips from 2015-03-18 Emacs hangout</h2>
 <div class="outline-text-2" id="text-org-tips-from-2015-03-18-emacs-hangout">
 <span class="modified-timestamp">   <em>updated: 22 March 2015  </em></span>
 <p>
Lots of great tips in  <a href="http://sachachua.com/blog/2015/03/emacs-hangout-2015-03-18-show-notes/">Emacs Hangout 2015-03-18</a>. Favorites:
</p>
 <ul class="org-ul"> <li>Private org drawer to prevent export:</li>
</ul> <div class="org-src-container">
 <pre class="src src-org">:PRIVATE:
My super duper secret text I don't want to export.
:END:
</pre>
</div>
 <ul class="org-ul"> <li>C-c C-p/C-c C-n Jump over sections.</li>
 <li>(setq org-hide-leading-stars t).</li>
 <li>(org-bullets-mode).</li>
 <li>(org-refile).</li>
 <li>C-u (org-refile) jumps, no refile.</li>
 <li>(helm-org-in-buffer-headings).</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/org-tips-from-2015-03-18-emacs-hangout/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/org-tips-from-2015-03-18-emacs-hangout/index.html</guid>
  <pubDate>Thu, 19 Mar 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emacs lisp debug on entry</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org81a803b" class="outline-2">
 <h2 id="emacs-lisp-debug-on-entry"> <span class="timestamp-wrapper"> <span class="timestamp">17 March 2015</span></span> Emacs lisp debug on entry</h2>
 <div class="outline-text-2" id="text-emacs-lisp-debug-on-entry">
 <p>
Wanted to track down which package was enabling ido-mode on my behalf. debug-on-entry to the rescue. Pass the method name in question and you're good to go.
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(debug-on-entry 'ido-mode)
</pre>
</div>
 <p>
When done, use cancel.
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(cancel-debug-on-entry 'ido-mode)
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-lisp-debug-on-entry/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-lisp-debug-on-entry/index.html</guid>
  <pubDate>Tue, 17 Mar 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Prefill Emacs swiper with current region</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org9db27c7" class="outline-2">
 <h2 id="prefill-emacs-swiper-with-current-region"> <span class="timestamp-wrapper"> <span class="timestamp">14 March 2015</span></span> Prefill Emacs swiper with current region</h2>
 <div class="outline-text-2" id="text-prefill-emacs-swiper-with-current-region">
 <p>
The new  <a href="https://github.com/abo-abo/swiper">swiper</a> Emacs package is proving to be a great alternative to  <a href="https://github.com/ShingoFukuyama/helm-swoop">helm-swoop</a>. Here's how to prefill with current region:
</p>
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">defun</span>  <span style="color: #795da3;">ar/prefilled-swiper</span> ()
   <span style="color: #183691;">"Pre-fill swiper input with region."</span>
  ( <span style="color: #a71d5d;">interactive</span>)
  ( <span style="color: #a71d5d;">if</span> (region-active-p)
      ( <span style="color: #a71d5d;">let</span> ((region-text (buffer-substring (region-beginning)
                                           (region-end))))
        (swiper region-text))
    (swiper)))

(global-set-key (kbd  <span style="color: #183691;">"C-s"</span>)
                #'ar/prefilled-swiper)
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/prefill-emacs-swiper-with-current-region/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/prefill-emacs-swiper-with-current-region/index.html</guid>
  <pubDate>Sat, 14 Mar 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Hack on Emacs London meetup bookmarks</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org6c4c37f" class="outline-2">
 <h2 id="hack-on-emacs-meetup"> <span class="timestamp-wrapper"> <span class="timestamp">11 March 2015</span></span> Hack on Emacs London meetup bookmarks</h2>
 <div class="outline-text-2" id="text-hack-on-emacs-meetup">
 <ul class="org-ul"> <li> <a href="http://www.european-lisp-symposium.org">European Lisp Symposium</a>.</li>
 <li> <a href="https://github.com/kai2nenobu/guide-key">guide-key</a> displays available key bindings.</li>
 <li> <a href="https://github.com/csrhodes/iplayer-el">iplayer-el</a> Emacs interface to the BBC's iPlayer.</li>
 <li> <a href="https://github.com/csrhodes/swankr">swankr</a> REPL (swank protocol for R).</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/hack-on-emacs-meetup/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/hack-on-emacs-meetup/index.html</guid>
  <pubDate>Wed, 11 Mar 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Working with OS X and Emacs tips</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orga971ca5" class="outline-2">
 <h2 id="working-with-os-x-and-emacs-tips"> <span class="timestamp-wrapper"> <span class="timestamp">09 March 2015</span></span> Working with OS X and Emacs tips</h2>
 <div class="outline-text-2" id="text-working-with-os-x-and-emacs-tips">
 <p>
From  <a href="http://emacsblog.org">M-x all-things-emacs</a>, Ryan McGeary's OS X/Emacs  <a href="http://emacsblog.org/2011/01/04/how-i-work-working-with-os-x-and-emacs/">workflow</a>.
</p>
</div>
 <div id="outline-container-org8719beb" class="outline-3">
 <h3 id="org8719beb">Frequently used apps:</h3>
 <div class="outline-text-3" id="text-org8719beb">
 <ul class="org-ul"> <li> <a href="https://agilebits.com/onepassword">1 password</a>.</li>
 <li> <a href="http://www.choosyosx.com/">Choosy</a>.</li>
 <li> <a href="http://mizage.com/divvy/">Divvy</a>.</li>
 <li> <a href="http://www.red-sweater.com/fastscripts">Fastscript</a>.</li>
 <li> <a href="http://fluidapp.com/">Fluid</a> (SSB).</li>
 <li> <a href="http://www.obdev.at/products/launchbar/index.html">Launchbar</a>.</li>
 <li> <a href="https://evernote.com/skitch/guide/mac/">Skitch (screenshots)</a>.</li>
 <li> <a href="http://smilesoftware.com/TextExpander/index.html">te (Text expander)</a>.</li>
</ul></div>
</div>
 <div id="outline-container-orgb9ea887" class="outline-3">
 <h3 id="orgb9ea887">Dotfiles</h3>
 <div class="outline-text-3" id="text-orgb9ea887">
 <ul class="org-ul"> <li> <a href="https://github.com/rmm5t/dotfiles">Github</a>.</li>
</ul></div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/working-with-os-x-and-emacs-tips/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/working-with-os-x-and-emacs-tips/index.html</guid>
  <pubDate>Mon, 09 Mar 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Org mode bookmarks</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org037c615" class="outline-2">
 <h2 id="org-mode-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">08 March 2015</span></span> Org mode bookmarks</h2>
 <div class="outline-text-2" id="text-org-mode-bookmarks">
 <span class="modified-timestamp">   <em>updated: 02 February 2020  </em></span>
 <ul class="org-ul"> <li> <a href="http://www.emacslife.com/baby-steps-org.html">A Baby Steps Guide to Managing Your Tasks with Org</a>.</li>
 <li> <a href="https://blog.aaronbieber.com/2016/09/24/an-agenda-for-life-with-org-mode.html">An Agenda for Life With Org Mode</a>.</li>
 <li> <a href="https://scripter.co/notes/org-table-spreadsheet/">An Org Table Spreadsheet cheatsheet</a>.</li>
 <li> <a href="http://stackoverflow.com/questions/13340616/assign-ids-to-every-entry-in-org-mode">Assigning ids to entries</a>.</li>
 <li> <a href="http://thewanderingcoder.com/2015/03/automating-boilerplate-in-org-mode-journalling/">Automating boilerplate in org-mode journalling</a>.</li>
 <li> <a href="https://zzamboni.org/post/beautifying-org-mode-in-emacs">Beautifying Org Mode in Emacs</a>.</li>
 <li> <a href="https://emacs-doctor.com/blogging-from-emacs.html">Blogging from GNU Emacs/org (with rss example)</a>.</li>
 <li> <a href="https://www.sadiqpk.org/blog/2018/08/08/blogging-with-org-mode.html">Blogging with Emacs org-mode</a>.</li>
 <li> <a href="https://gitlab.com/sadiq/sadiq.gitlab.io/blob/master/src/blog-atom.sh">Creating org atom xml feed with blog-atom.sh</a>.</li>
 <li> <a href="https://github.com/philipphoman/org-mode-poster">Creating scientific posters with org-mode</a>.</li>
 <li> <a href="https://github.com/dfeich/org-babel-examples/blob/master/README.org">dfeich/org-babel-examples (GitHub)</a>.</li>
 <li> <a href="https://github.com/dfeich/org-babel-examples/blob/master/README.org">Dfeich’s Org-babel, org-exporter, org-table example collection</a>.</li>
 <li> <a href="http://correl.phoenixinquis.net/2015/07/12/git-graphs.html">Drawing Git Graphs with Graphviz and Org-Mode</a>.</li>
 <li> <a href="http://ergoemacs.org/emacs/elisp_parse_org_mode.html">Elisp: Parse Org Mode (API examples by Xah Lee)</a>.</li>
 <li> <a href="http://ehneilsen.net/notebook/orgExamples/org-examples.html">Emacs org-mode examples and cookbook</a>.</li>
 <li> <a href="https://emacs.stackexchange.com/questions/51399/org-babel-tangle-with-function-in-header-arguments/51769#51769">Executing org source blocks when loading file (and defining file-local vars)</a>.</li>
 <li> <a href="https://github.com/nikclayton/ob-html-chrome">Export Org HTML SRC blocks as PNG files using Chrome</a>.</li>
 <li> <a href="https://gitlab.com/ambrevar/ambrevar.gitlab.io/blob/master/feed-builder/feed-builder.el">feed-builder/feed-builder.el an org/blog rss implementation</a>.</li>
 <li> <a href="https://github.com/alphapapa/helm-org-rifle">helm-org-rifle:  Rifle through your Org buffers and acquire your target</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/6mzgkg/how_can_orgbabel_be_configured_to_set_variables/">How can org-babel be configured to set variables across multiple language? (Reddit)</a>.</li>
 <li> <a href="https://www.miskatonic.org/2016/08/25/image-display-size-in-org/">Image display size in Org</a>.</li>
 <li> <a href="http://kelvinh.github.io/wiki/org-mode-manual/">Kevin's org notes</a>.</li>
 <li> <a href="http://howardism.org/Technical/Emacs/literate-devops.html">Literate DevOps with org source blocks (Howardism)</a>.</li>
 <li> <a href="http://www.howardism.org/Technical/Emacs/literate-devops.html">Literate DevOps</a>.</li>
 <li> <a href="http://cachestocaches.com/2018/6/org-literate-programming/">Literate Programming with Org-mode</a>.</li>
 <li> <a href="https://www.offerzen.com/blog/literate-programming-empower-your-writing-with-emacs-org-mode">Literate Programming: Empower Your Writing with Emacs Org-Mode</a>.</li>
 <li> <a href="http://www.newartisans.com/2007/08/using-org-mode-as-a-day-planner/">Lost in Technopolis (getting things done with org agenda)</a>.</li>
 <li> <a href="http://irreal.org/blog/?p=7651">Making a Poster with Org-mode (Irreal)</a>.</li>
 <li> <a href="https://www.bytedude.com/files/managing-your-life-with-org-mode.html">Managing Your Life With org-mode and Other Tools</a>.</li>
 <li> <a href="http://mbork.pl/2018-08-18_Embedding_files_in_Org-mode_revisited">Marcin Borkowski: 2018-08-18 Embedding files in Org-mode revisited</a>.</li>
 <li> <a href="https://fuco1.github.io/2018-12-23-Multiline-fontification-with-org-emphasis-alist.html">Multiline fontification (ie. bold) with org-emphasis-alist</a>.</li>
 <li> <a href="https://joshrollinswrites.com/emacsorg/org-capture-template-1/">My Org Capture Templates - Part 1 &middot; The Art of Not Asking Why</a>.</li>
 <li> <a href="https://joshrollinswrites.com/emacsorg/org-capture-template-3/">My Org Capture Templates - Part 3 &middot; The Art of Not Asking Why</a>.</li>
 <li> <a href="https://patrickskiba.com/org-mode/2019/05/22/uses-for-org-mode.html">My Org-mode use cases (Patrick Skiba)</a>.</li>
 <li> <a href="http://www.cachestocaches.com/2016/9/my-workflow-org-agenda/">My Workflow with Org-Agenda</a>.</li>
 <li> <a href="https://christiantietze.de/posts/2019/12/emacs-notifications/">Native macOS Notifications for Emacs Org Tasks and Appointments</a>.</li>
 <li> <a href="https://github.com/ndwarshuis/om.el/blob/master/README.md">om.el/README.md at master · ndwarshuis/om.el · GitHub</a>.</li>
 <li> <a href="https://github.com/dfeich/org-babel-examples">Org babel examples repo</a>.</li>
 <li> <a href="https://org-babel.readthedocs.io/en/latest/">Org Babel reference card</a>.</li>
 <li> <a href="https://raw.githubusercontent.com/eschulte/babel-dev/master/scraps.org">org babel scraps</a>.</li>
 <li> <a href="http://www.star.bris.ac.uk/bjm/org-basics.html">Org mode basics</a>.</li>
 <li> <a href="https://writepermission.com/org-blogging-rss-feed.html">Org mode blogging: RSS feed</a>.</li>
 <li> <a href="http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html">Org mode examples and cookbook</a>.</li>
 <li> <a href="http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html">Org mode examples</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/9d8i7y/org_mode_habits/">Org Mode Habits : emacs</a>.</li>
 <li> <a href="https://gist.github.com/drj42/1755992">Org mode reference card</a>.</li>
 <li> <a href="https://orgmode.org/worg/org-tutorials/">Org tutorials</a>.</li>
 <li> <a href="https://github.com/sprig/org-capture-extension/blob/master/README.md">org-capture-extension (GitHub)</a>.</li>
 <li> <a href="https://github.com/eschulte/org-ehtml">org-ehtml: Export Org-mode files as editable web pages</a>.</li>
 <li> <a href="https://github.com/theodorewiles/org-mind-map">org-mind-map: creates graphviz directed graphs from org-mode files</a>.</li>
 <li> <a href="http://pragmaticemacs.com/emacs/org-mode-basics-vii-a-todo-list-with-schedules-and-deadlines/">Org-mode basics VII: A TODO list with schedules and deadlines | Pragmatic Emacs</a>.</li>
 <li> <a href="https://bzg.fr/en/some-emacs-org-mode-features-you-may-not-know.html/">Org-mode features You May Not Know · Bastien Guerry - Liberté, informatique</a>.</li>
 <li> <a href="https://github.com/flexibeast/org-vcard/">org-mode support for vCard export and import</a>.</li>
 <li> <a href="https://github.com/weirdNox/org-noter">org-noter: Emacs document annotator, using Org-mode</a>.</li>
 <li> <a href="https://github.com/alphapapa/org-web-tools">org-web-tools: Commands and functions for retrieving web page content and processing it into and displaying it as Org-mode content.</a>.</li>
 <li> <a href="https://github.com/alphapapa/org-web-tools">org-web-tools: View, capture, and archive Web pages in Org-mode</a>.</li>
 <li> <a href="https://github.com/lyon0xd/uml/blob/master/org/test.org">org/uml examples</a>.</li>
 <li> <a href="https://www.zcl.space/tools/organize-you-life-in-org/">Organize you life in Emacs Org | ZCL.SPACE</a>.</li>
 <li> <a href="http://doc.norang.ca/org-mode.html">Organize your life in plain text</a>.</li>
 <li> <a href="https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE&app=desktop">OrgMode tutorial - YouTube channel</a>.</li>
 <li> <a href="https://medium.com/@tasshin/plan-your-day-daily-time-management-with-emacs-org-mode-and-google-calendar-a9162837fdb3">Plan your day: Daily Time Management with Emacs, Org-Mode, and Google Calendar</a>.</li>
 <li> <a href="https://vxlabs.com/2017/06/03/querying-restful-webservices-into-emacs-orgmode-tables/">Querying RESTful webservices into Emacs orgmode tables (vxlabs)</a>.</li>
 <li> <a href="https://www.youtube.com/playlist?list=PLVtKhBrRV_ZkPnBtt_TD1Cs9PJlU0IIdE">Rainer König's OrgMode YouTube tutorials</a>.</li>
 <li> <a href="https://fuco1.github.io/2019-02-10-Refiling-hydra-with-pre-defined-targets.html">Refiling hydra with pre-defined targets</a>.</li>
 <li> <a href="http://blog.lujun9972.win/emacs-document/blog/2018/10/22/ricing-up-org-mode/index.html">Ricing up Org Mode - EMACS-DOCUMENT</a>.</li>
 <li> <a href="https://lepisma.github.io/2017/10/28/ricing-org-mode/">Ricing up Org Mode</a>.</li>
 <li> <a href="https://www.arcadianvisions.com/blog/#orga597dcf">Robust Notes with Embedded Code (extensive org babel usage)</a>.</li>
 <li> <a href="https://orgmode.org/guide/">The compact Org-mode Guide</a>.</li>
 <li> <a href="http://www.flutterbys.com.au/stats/tut/tut16.1.html">Tutorial 16.1 - Emacs orgmode tables</a>.</li>
 <li> <a href="https://karl-voit.at/2017/01/15/org-clone-subtree-with-time-shift/">UOMF: Recurring Events with Org Mode</a>.</li>
 <li> <a href="http://www.sastibe.de/2018/05/2018-05-11-emacs-org-mode-rest-apis-stocks/">Use Emacs Org Mode and REST APIs for an up-to-date Stock Portfolio</a>.</li>
 <li> <a href="http://cestlaz.github.io/posts/using-emacs-24-capture-2/#.WTtEbXWw5pg">Using Emacs - 24 - Org Capture 2</a>.</li>
 <li> <a href="https://cestlaz.github.io/post/using-emacs-54-org-tables">Using Emacs 54 Org Tables</a>.</li>
 <li> <a href="http://www.diegoberrocal.com/blog/2015/08/19/org-protocol/">Using org-capture with org-protocol be like - Diego Berrocal</a>.</li>
 <li> <a href="http://kitchingroup.cheme.cmu.edu/blog/2019/02/12/Using-results-from-one-code-block-in-another-org-mode/">Using results from one code block in another org-mode</a>.</li>
 <li> <a href="http://katherine.cox-buday.com/blog/2015/03/14/writing-specs-with-org-mode/">Writing Specs with Org-mode</a>.</li>
 <li> <a href="https://www.youtube.com/watch">YouTube: org introduction</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/org-mode-bookmarks/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/org-mode-bookmarks/index.html</guid>
  <pubDate>Sun, 08 Mar 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Golang bookmarks</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgdc11a38" class="outline-2">
 <h2 id="golang-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">06 March 2015</span></span> Golang bookmarks</h2>
 <div class="outline-text-2" id="text-golang-bookmarks">
 <span class="modified-timestamp">   <em>updated: 10 March 2020  </em></span>
 <ul class="org-ul"> <li> <a href="http://spf13.com/presentation/7-common-mistakes-in-go-2015/?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+spf13+%28Steve+Francia%27s+Blog%29">7 Common mistakes in Go</a>.</li>
 <li> <a href="https://github.com/mingrammer/commonregex">A collection of common regular expressions for Go</a>.</li>
 <li> <a href="https://github.com/avelino/awesome-go">A curated list of awesome Go packages</a>.</li>
 <li> <a href="https://github.com/guardrailsio/awesome-golang-security">A curated list of awesome golang Security related resources</a>.</li>
 <li> <a href="https://iosexample.com/a-drawer-implement-on-swiftui/">A Drawer implement on SwiftUI</a>.</li>
 <li> <a href="https://github.com/montanaflynn/stats">A statistics package with common functions that are missing from the Golang standard library</a>.</li>
 <li> <a href="http://dave.cheney.net/2015/11/29/a-whirlwind-tour-of-gos-runtime-environment-variables">A whirlwind tour of Go’s runtime environment variables</a>.</li>
 <li> <a href="https://dev.to/shindakun/attempting-to-learn-go---now-sending-rest-requests-akp">Attempting to Learn Go - Now Sending GET/POST REST Requests</a>.</li>
 <li> <a href="https://stackoverflow.com/questions/59100973/python-grpc-equivalent-of-golangs-perrpccredentials">authentication - python gRPC equivalent of golang's PerRPCCredentials</a>.</li>
 <li> <a href="http://www.jerf.org/iri/post/2945">Avoiding Reflection (And Such) In Go</a>.</li>
 <li> <a href="https://github.com/iangudger/basicGoAPI">BasicGoAPI (ie. REST)</a>.</li>
 <li> <a href="https://chrislovecnm.com/golang/bazel/bazel-hello-world/">Bazel Golang Hello World (Kubernetes musings by chrislovecnm)</a>.</li>
 <li> <a href="http://beego.me/docs/intro/releases.md">Beego, platform for web apps</a>.</li>
 <li> <a href="https://gobuffalo.io/">Buffalo & Rapid Web Development in Go</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=eTjNtNnVOGY">Building a RESTful API in Go Using Only the Standard Library (Episode 1)</a>.</li>
 <li> <a href="http://blog.wercker.com/2013/08/07/building-an-api-with-golang-rethinkdb-wercker.html">Building an API with Golang, RethinkDB and wercker</a>.</li>
 <li> <a href="https://dev.to/codehakase/building-small-containers-for-kubernetes-290j">Building Small Containers for Kubernetes (golang http)</a>.</li>
 <li> <a href="https://godoc.org/golang.org/x/tools/cmd/vet">Command vet (reports suspicious constructs)</a>.</li>
 <li> <a href="http://www.kotancode.com/2015/09/10/complex-json-handling-in-go/">Complex json handling in Go</a>.</li>
 <li> <a href="https://github.com/adrianduke/configr">Configr: abstraction on top of configuration sources</a>.</li>
 <li> <a href="http://jen20.com/2015/02/06/configuring-emacs-for-go-part-1.html">Configuring emacs and evil mode for Go development (Part 1)</a>.</li>
 <li> <a href="https://www.scaledrone.com/blog/posts/creating-an-api-client-in-go">Creating an API Client in Go</a>.</li>
 <li> <a href="http://dave.cheney.net/2015/08/22/cross-compilation-with-go-1-5">Cross compilation with Go 1.5</a>.</li>
 <li> <a href="http://biasedbit.com/blog/golang-custom-transports/">Custom transports and timeouts</a>.</li>
 <li> <a href="https://medium.com/@deckarep/dancing-with-go-s-mutexes-92407ae927bf#.uixrkc790">Dancing with Go’s Mutexes</a>.</li>
 <li> <a href="https://medium.com/better-programming/debug-go-like-a-pro-213d4d74e940">Debug Go Like a Pro - Better Programming - Medium</a>.</li>
 <li> <a href="https://blog.gopheracademy.com/advent-2015/debugging-with-delve/">Debugging Go programs with Delve</a>.</li>
 <li> <a href="https://github.com/elcct/defaultproject">defaultproject (REST/web starter)</a>.</li>
 <li> <a href="https://blog.golang.org/defer-panic-and-recover">Defer, Panic, and Recover</a>.</li>
 <li> <a href="https://arenzana.org/2019/01/emacs-go-mode">Emacs Go Mode (Isma details his Emacs Golang setup)</a>.</li>
 <li> <a href="http://words.volant.is/articles/authentication-golang-web-applications/">End-user authentication for Go web applications</a>.</li>
 <li> <a href="https://entgo.io/">ent · An entity framework for Go</a>.</li>
 <li> <a href="https://blog.golang.org/error-handling-and-go">Error handling in Go</a>.</li>
 <li> <a href="http://www.darrencoxall.com/golang/executing-commands-in-go/">Executing commands in Go</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=17765413">Exploring Error Handling Patterns in Go (Hacker News)</a>.</li>
 <li> <a href="http://blog.matttproud.com/2015/02/exploring-gos-runtime-how-process.html">Exploring Go's runtime</a>.</li>
 <li> <a href="https://hackernoon.com/face-recognition-with-go-676a555b8a7e">Face recognition with Go – Hacker Noon</a>.</li>
 <li> <a href="https://github.com/valyala/fasthttp">fasthttp: Fast HTTP implementation for Go</a>.</li>
 <li> <a href="https://github.com/gorilla/mux">GitHub - gorilla/mux: A powerful URL router and dispatcher for golang.</a>.</li>
 <li> <a href="https://github.com/montanaflynn/stats">GitHub - montanaflynn/stats: A well tested and comprehensive Golang statistics library package with no dependencies.</a>.</li>
 <li> <a href="https://github.com/ndabAP/vue-go-example">GitHub - ndabAP/vue-go-example: Vue.js and Go example project</a>.</li>
 <li> <a href="https://github.com/sethgrid/multibar">GitHub - sethgrid/multibar: Display multiple progress bars in Go (golang).</a>.</li>
 <li> <a href="https://peter.bourgon.org/go-best-practices-2016/">Go best practices, six years in</a>.</li>
 <li> <a href="https://gobyexample.com/">Go by Example</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id%3D9399286">Go Challenge 3 HN comments</a>.</li>
 <li> <a href="https://github.com/golang/go/wiki/CodeReviewComments">Go Code Review Comments</a>.</li>
 <li> <a href="https://gotalks.googleplex.com/codelab/flag.article">Go command Line Flags</a>.</li>
 <li> <a href="http://blog.golang.org/pipelines">Go Concurrency Patterns: Pipelines and cancellation</a>.</li>
 <li> <a href="https://github.com/grpc/grpc-go/tree/master/examples/features/authentication">Go grpc authentication</a>.</li>
 <li> <a href="https://timr.co/go-interfaces-the-tricky-parts">Go interfaces, the tricky parts</a>.</li>
 <li> <a href="https://github.com/otium/ytdl">Go library for downloading YouTube videos</a>.</li>
 <li> <a href="https://github.com/alecthomas/gometalinter">Go Meta Linter</a>.</li>
 <li> <a href="http://www.gregosuri.com/2015/12/04/go-proverbs-illustrated/">Go Proverbs Illustrated</a>.</li>
 <li> <a href="https://blog.jpalardy.com/posts/go-slice-gotcha/">Go Slice Gotcha</a>.</li>
 <li> <a href="http://gohugo.io/templates/go-templates">Go Template Primer</a>.</li>
 <li> <a href="http://golang.rakyll.org/go-tool-flags/">Go tooling essentials (useful flags in tooling)</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=uBjoTxosSys">Go Tooling in Action - YouTube</a>.</li>
 <li> <a href="https://medium.com/go-walkthrough/go-walkthrough-encoding-json-package-9681d1d37a8f#.9rix3aqzg">Go Walkthrough: encoding/json package</a>.</li>
 <li> <a href="https://medium.com/go-walkthrough/go-walkthrough-fmt-55a14bbbfc53#.egmp9nwqv">Go Walkthrough: fmt (formatting strings)</a>.</li>
 <li> <a href="https://medium.com/@matzhouse/go-grpc-and-docker-c1fb2ec8e9f0">Go, gRPC and Docker</a>.</li>
 <li> <a href="http://go-bootstrap.io/">go-bootstrap to generate a lean and mean Go web project</a>.</li>
 <li> <a href="https://medium.com/@dgryski/go-fuzz-github-com-arolek-ase-3c74d5a3150c#.5ybv38lzm">go-fuzz github.com/arolek/ase tutorial</a>.</li>
 <li> <a href="https://github.com/cathalgarvey/go-minilock">Go-miniLock: The Minilock File Encryption System, Ported to Pure Go</a>.</li>
 <li>go-rename.</li>
 <li> <a href="https://github.com/emicklei/go-restful">Go-restful</a>.</li>
 <li> <a href="https://github.com/jroimartin/gocui/blob/master/README.md">GOCUI - Go Console User Interface</a>.</li>
 <li> <a href="http://goji.io/">Goji: A web microframework for Golang</a>.</li>
 <li> <a href="https://github.com/luciotato/golang-notes/blob/master/OOP.md">Golang concepts from an OOP point of view</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=12522652">Golang landmines</a>.</li>
 <li> <a href="http://golangtoolbox.com/">Golang toolbox (high quality Go packages)</a>.</li>
 <li> <a href="http://xahlee.info/golang/golang_index.html">Golang Tutorial (Xah Lee's)</a>.</li>
 <li> <a href="https://davidsbond.github.io/2019/06/14/creating-grpc-interceptors-in-go.html">Golang: Creating gRPC interceptors (David Bond)</a>.</li>
 <li> <a href="http://xahlee.info/golang/golang_rune.html">Golang: Rune</a>.</li>
 <li> <a href="https://www.youtube.com/playlist?list=PL2ntRZ1ySWBf-_z-gHCOR2N156Nw930Hm">GopherCon 2015 videos</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=5v2fqm_8jYI">GopherCon 2016: Jack Lindamood - Practical Advice for Go Library Authors (YouTube)</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=5v2fqm_8jYI">GopherCon 2016: Jack Lindamood - Practical Advice for Go Library Authors</a>.</li>
 <li> <a href="https://about.sourcegraph.com/go/gophercon-2018-how-to-write-a-parser-in-go/">GopherCon 2018 - How to Write a Parser in Go</a>.</li>
 <li> <a href="https://github.com/gopherjs/gopherjs">Gopherjs: A compiler from Go to JavaScript</a>.</li>
 <li> <a href="https://github.com/visualfc/goqt">GoQt: golang Qt bindings</a>.</li>
 <li>gorepl-mode.</li>
 <li> <a href="https://github.com/securego/gosec">gosec - Golang Security Checker</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=21603483">Go’s Features of Last Resort | Hacker News</a>.</li>
 <li> <a href="https://eli.thegreenplace.net/2020/graceful-shutdown-of-a-tcp-server-in-go/">Graceful shutdown of a TCP server in Go - Eli Bendersky's website</a>.</li>
 <li> <a href="https://github.com/levigross/grequests">GRequests: A Go "clone" of the great and famous Requests library</a>.</li>
 <li> <a href="https://grpc.io/docs/guides/auth/">gRPC authentication documentation</a>.</li>
 <li> <a href="https://github.com/apps/guardrails">GuardRails is a GitHub app that provides security feedback in your pull requests</a>.</li>
 <li> <a href="https://www.alexedwards.net/blog/how-to-hash-and-verify-passwords-with-argon2-in-go">How to Hash and Verify Passwords With Argon2 in Go - Alex Edwards</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=17061713">How to start a Go project in 2018 | Hacker News</a>.</li>
 <li> <a href="https://golang.org/doc/code.html">How to Write Go Code</a>.</li>
 <li> <a href="https://medium.com/pantomath/how-we-use-grpc-to-build-a-client-server-system-in-go-dd20045fa1c2">How we use gRPC to build a client/server system in Go (auth and TLS included)</a>.</li>
 <li> <a href="http://www.gohugo.io/">HUGO: a static website engine in Go</a>.</li>
 <li> <a href="http://nathanleclaire.com/blog/2015/10/10/interfaces-and-composition-for-effective-unit-testing-in-golang/">Interfaces and Composition for Effective Unit Testing in Golang</a>.</li>
 <li> <a href="https://github.com/kubernetes/kubernetes/blob/master/Godeps/Godeps.json">Kubernetes godeps</a>.</li>
 <li> <a href="https://commandcenter.blogspot.com/2012/06/less-is-exponentially-more.html">Less is exponentially more (Rob Pike's Go reasoning)</a>.</li>
 <li> <a href="https://lets-go.alexedwards.net/">Let's Go! Learn to Build Professional Web Applications With Golang</a>.</li>
 <li> <a href="http://dave.cheney.net/2015/11/05/lets-talk-about-logging">Let's talk about logging</a>.</li>
 <li> <a href="http://www.alexedwards.net/blog/making-and-using-middleware">Making and Using HTTP Middleware in Go</a>.</li>
 <li> <a href="https://github.com/alexflint/go-restructure">Match regular expressions into struct fields</a>.</li>
 <li> <a href="http://bouk.co/blog/monkey-patching-in-go/">Monkey Patching in Go</a>.</li>
 <li> <a href="https://github.com/golang/go/wiki/PanicAndRecover">PanicAndRecover</a>.</li>
 <li> <a href="http://maciekmm.net/html-golang-stream-processing/">Parsing HTML with Go using stream processing</a>.</li>
 <li> <a href="https://www.sohamkamani.com/blog/2018/02/25/golang-password-authentication-and-storage/">Password authentication and storage in Go (Golang)</a>.</li>
 <li> <a href="https://www.amazon.com/Peaceful-Parent-Happy-Kids-Connecting/dp/0399160280/">Peaceful Parent, Happy Kids: How to Stop Yelling and Start Connecting</a>.</li>
 <li> <a href="https://peter.bourgon.org/go-best-practices-2016/">Peter Bourgon · Go best practices, six years in</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=19218097">Practical Go: Real-world advice for writing maintainable Go programs (Hacker News)</a>.</li>
 <li> <a href="https://github.com/bradfitz/exp-httpclient/blob/master/problems.md">Problems with Go net/http Client API</a>.</li>
 <li> <a href="https://github.com/m3ng9i/ran">Ran: a simple static web server written in Go</a>.</li>
 <li> <a href="https://blog.gopheracademy.com/advent-2015/reducing-boilerplate-with-go-generate/">Reducing boilerplate with go generate</a>.</li>
 <li> <a href="https://research.swtch.com/interfaces">research!rsc: Go Data Structures: Interfaces</a>.</li>
 <li> <a href="https://www.youtube.com/watch?feature=youtu.be">RESTful Web API Basics in Go</a>.</li>
 <li> <a href="http://www.linkedin.com/pulse/restful-webservice-using-golang-sqlite-uttam-gandhi">Restful webservice using golang with sqlite</a>.</li>
 <li> <a href="http://revel.github.io/">Revel:</a> A high-productivity web framework for the Go language.</li>
 <li> <a href="https://github.com/bazelbuild/rules_go/blob/master/go/core.rst#go_binary">rules_go/core.rst at master · bazelbuild/rules_go</a>.</li>
 <li> <a href="https://golang.org/pkg/runtime/pprof/">runtime.pprof for profiling</a>.</li>
 <li> <a href="https://bitbucket.org/seanerussell/sashay">Sashay Go codegen</a>.</li>
 <li> <a href="https://syslog.ravelin.com/making-something-faster-56dd6b772b83">Seven steps to 100x faster Go</a>.</li>
 <li> <a href="https://github.com/grpc/grpc-go/issues/106">Simple password authentication example · Issue #106 · grpc/grpc-go</a>.</li>
 <li> <a href="https://github.com/dghubble/sling">Sling: Go REST client library for creating and sending API requests</a>.</li>
 <li> <a href="https://machiel.me/using-tags-in-go/">Small introduction to tags in Go</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=13213902">So you want to expose Go on the Internet (Hacker News)</a>.</li>
 <li> <a href="https://www.cockroachlabs.com/blog/rounding-implementations-in-go/">Survey of Rounding Implementations in Go | Cockroach Labs</a>.</li>
 <li> <a href="https://github.com/yvasiyarov/swagger">Swagger Go documentation generator</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id%3D9716964">Ten useful techniques in Go (HN comments)</a>.</li>
 <li> <a href="http://arslan.io/ten-useful-techniques-in-go">Ten useful techniques in Go</a>.</li>
 <li> <a href="https://github.com/gizak/termui">termui, Go terminal dashboard</a>.</li>
 <li> <a href="https://dev.to/dannypsnl/testing-in-go-35ei">Testing in Go - DEV Community</a>.</li>
 <li> <a href="https://sourcegraph.com/blog/live/gopherconindia/112025389257%20">The 5 stages of learning Go</a>.</li>
 <li> <a href="https://dave.cheney.net/2014/03/25/the-empty-struct">The empty struct (Dave Cheney)</a>.</li>
 <li> <a href="http://golangcookbook.com/">The Go Cookbook</a>.</li>
 <li> <a href="http://go-talks.appspot.com/github.com/ChrisHines/talks/structured-logging/structured-logging.slide#1">The Hunt for a Logger Interface</a>.</li>
 <li> <a href="https://dave.cheney.net/2017/04/29/there-is-no-pass-by-reference-in-go">There is no pass-by-reference in Go | Dave Cheney</a>.</li>
 <li> <a href="http://openmymind.net/Things-I-Wish-Someone-Had-Told-Me-About-Go/">Things I wish someone told me about Go</a>.</li>
 <li> <a href="https://scripter.co/time-formatting-in-go/">Time formatting in Go ❚ A Scripter's Notes</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=21225401">Uber Go Style Guide (Hacker News)</a>.</li>
 <li> <a href="http://divan.github.io/posts/go_concurrency_visualize/">Visualizing Concurrency in Go</a>.</li>
 <li> <a href="https://groups.google.com/forum/#!msg/golang-nuts/R7ryo7RdBPY/t7XFNGyRDQAJ">What's So Bad About Stdlib's Log Package? (Groups discussion)</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=YmbbmyxSlcg">Writing Unit Tests for your net/http Handlers</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/golang-bookmarks/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/golang-bookmarks/index.html</guid>
  <pubDate>Fri, 06 Mar 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Learning Emacs lisp</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org7f91710" class="outline-2">
 <h2 id="learning-emacs-lisp"> <span class="timestamp-wrapper"> <span class="timestamp">05 March 2015</span></span> Learning Emacs lisp</h2>
 <div class="outline-text-2" id="text-learning-emacs-lisp">
 <span class="modified-timestamp">   <em>updated: 13 April 2015  </em></span>
 <ul class="org-ul"> <li>Use nreverse and nconc to operate on lists in-place.</li>
 <li>Set buffer local variables:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">setq-local</span> my-clever-var)
</pre>
</div>
 <ul class="org-ul"> <li>Execute before saving buffer:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(add-hook 'write-file-hooks
          ( <span style="color: #a71d5d;">lambda</span> ()
            (message  <span style="color: #183691;">"about to save!"</span>)))
</pre>
</div>
 <ul class="org-ul"> <li>Possibly use to start processes and send file content:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(make-comint NAME PROGRAM  <span style="color: #0086b3;">&optional</span> STARTFILE  <span style="color: #0086b3;">&rest</span> SWITCHES)
</pre>
</div>
 <ul class="org-ul"> <li>Creating markers:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">setq</span> my-marker (copy-marker (point)))
  #<marker at 10251 in *ielm*>

(marker-buffer my-marker)
  #<buffer *ielm*>

(marker-position my-marker)
  10251 (#o24013, #x280b, ?⠋)
</pre>
</div>
 <ul class="org-ul"> <li>Get org heading at point:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(org-get-heading 'no-tags 'no-todo)
</pre>
</div>
 <ul class="org-ul"> <li>Remove string text properties. From manual:</li>
</ul> <blockquote>
 <p>
(substring-no-properties STRING &optional FROM TO)
</p>

 <p>
Return a substring of STRING, without text properties.
It starts at index FROM and ends before TO.
TO may be nil or omitted; then the substring runs to the end of STRING.
If FROM is nil or omitted, the substring starts at the beginning of STRING.
If FROM or TO is negative, it counts from the end.
</p>
</blockquote>
 <ul class="org-ul"> <li>Skip org entry metadata/drawers:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(org-end-of-meta-data-and-drawers)
</pre>
</div>
 <ul class="org-ul"> <li>Random access to org entry using id (or CUSTOM_ID):</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(org-open-link-from-string  <span style="color: #183691;">"[[#%exciting-custom-id]]"</span>)
</pre>
</div>
 <ul class="org-ul"> <li>From  <a href="http://endlessparentheses.com/debugging-emacs-lisp-part-1-earn-your-independence.html">Debugging Elisp Part 1: Earn your independence</a>:</li>
</ul> <blockquote>
 <ul class="org-ul"> <li>Go to where the function is defined.</li>
 <li>Press C-u C-M-x. Edebug breakpoint for function.</li>
 <li>Invoke function in question.</li>
 <li>n/c will get you around.</li>
 <li>q when done.</li>
</ul></blockquote>
 <ul class="org-ul"> <li>Pretty printing objects:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">let</span> ((my-var (list  <span style="color: #183691;">"val1"</span>
                     <span style="color: #183691;">"val2"</span>
                     <span style="color: #183691;">"val3"</span>)))
  (pp-to-string my-var))
</pre>
</div>
 <ul class="org-ul"> <li>Search and/or replace in curent buffer:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(re-search-forward  <span style="color: #183691;">"needle"</span>
                   nil t)
(match-beginning 0)  <span style="color: #969896;">;; </span> <span style="color: #969896;">Start location of match from last search.</span>
(match-end 0)  <span style="color: #969896;">;; </span> <span style="color: #969896;">End location of match from last search.</span>
(replace-match  <span style="color: #183691;">"love"</span>)

 <span style="color: #969896;">;; </span> <span style="color: #969896;">needle-in-haystack</span>
</pre>
</div>
 <ul class="org-ul"> <li>Restrict buffer editing to a region:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(narrow-to-region (point)
                  (point-max))
</pre>
</div>
 <ul class="org-ul"> <li>Restore restriction:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">save-restriction</span> (narrow-to-region (point)
                                    (point-max))
</pre>
</div>
 <ul class="org-ul"> <li>Restore point, mark, and current buffer:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">save-excursion</span> (goto-char (point-max))
                (insert  <span style="color: #183691;">"Hello elisp."</span>))
</pre>
</div>
 <ul class="org-ul"> <li>Concatenating strings:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(concat  <span style="color: #183691;">"Hello "</span>  <span style="color: #183691;">"elisp "</span>  <span style="color: #183691;">"world."</span>)
</pre>
</div>
 <ul class="org-ul"> <li>Grabbing thing at point:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(thing-at-point 'word)
(thing-at-point 'symbol)
(thing-at-point 'line)
</pre>
</div>
 <ul class="org-ul"> <li>Unit test with ert.</li>
 <li>Basic iteration with dolist:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">dolist</span> (v '( <span style="color: #183691;">"a"</span>  <span style="color: #183691;">"b"</span>  <span style="color: #183691;">"c"</span>))
  (print v))
</pre>
</div>
 <ul class="org-ul"> <li>Output to other buffer:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">with-current-buffer</span> (get-buffer-create  <span style="color: #183691;">"*some buffer*"</span>)
  (princ '(some list to print)
         (current-buffer)))
</pre>
</div>
 <ul class="org-ul"> <li>For a temporary buffer, use with-temp-buffer:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">with-temp-buffer</span>
  (insert  <span style="color: #183691;">"abc"</span>)
  (point))
</pre>
</div>
 <ul class="org-ul"> <li>Cons cells  <a href="http://emacslife.com/read-lisp-tweak-emacs/beginner-2-understand-emacs-lisp.html#sec-4-4">bookmark</a>.</li>
 <li>Check for substring:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(string-match-p REGEXP STRING  <span style="color: #0086b3;">&optional</span> START)
</pre>
</div>
 <ul class="org-ul"> <li>Matching substrings and accessing groups:</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">setq</span> haystack  <span style="color: #183691;">"Always click [[http://reddit.com/r/emacs][here]]."</span>)
( <span style="color: #a71d5d;">setq</span> needle-re  <span style="color: #183691;">"\\[\\[</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">.*</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">]\\[</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">.*</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">]]"</span>)
   <span style="color: #183691;">"\\[\\[</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">.*</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">]\\[</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">(</span> <span style="color: #183691;">.*</span> <span style="color: #969896;">\\</span> <span style="color: #a71d5d;">)</span> <span style="color: #183691;">]]"</span>

(string-match needle-re haystack)
  13 (#o15, #xd, ?\C-m)

(match-string 0 haystack)
   <span style="color: #183691;">"[[http://reddit.com/r/emacs][here]]"</span>

(match-string 1 haystack)
   <span style="color: #183691;">"http://reddit.com/r/emacs"</span>

(match-string 2 haystack)
   <span style="color: #183691;">"here"</span>
</pre>
</div>
 <ul class="org-ul"> <li>Return argument unchanged (noop):</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(identity ARG)
</pre>
</div>
 <ul class="org-ul"> <li>Org insert today's timestamp</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(org-insert-time-stamp (current-time))
</pre>
</div>
 <ul class="org-ul"> <li> <a href="http://ergoemacs.org/emacs/elisp_determine_OS_version.html">OS version in .emacs</a>: Determine OS in emacs lisp.</li>
 <li>First element</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(car LIST)
</pre>
</div>
 <ul class="org-ul"> <li>All but first element</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(cdr LIST)
</pre>
</div>
 <ul class="org-ul"> <li>Add NEWELT to front of PLACE</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">push</span> NEWELT PLACE)
</pre>
</div>
 <ul class="org-ul"> <li>Invoke 'FUNCTION for each in SEQUENCE</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">(mapcar FUNCTION SEQUENCE)
</pre>
</div>
 <ul class="org-ul"> <li>Search/replace</li>
</ul> <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">while</span> (search-forward  <span style="color: #183691;">"Hello"</span>)
  (replace-match  <span style="color: #183691;">"Bonjour"</span>))
</pre>
</div>
 <ul class="org-ul"> <li>Save to kill ring = copy.</li>
 <li>Point = cursor position.</li>
 <li>Mark = a buffer position.</li>
 <li>Kill = cut text.</li>
 <li>Yank = paste.</li>
 <li>Buffer:File = 1:1.</li>
 <li>Window:Buffer = 1:1.</li>
 <li>Frame:Window = 1:many.</li>
 <li>Font lock = syntax highlighting.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/learning-emacs-lisp/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/learning-emacs-lisp/index.html</guid>
  <pubDate>Thu, 05 Mar 2015 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Books backlog</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgc73ea03" class="outline-2">
 <h2 id="books-backlog"> <span class="timestamp-wrapper"> <span class="timestamp">30 December 2014</span></span> Books backlog</h2>
 <div class="outline-text-2" id="text-books-backlog">
 <span class="modified-timestamp">   <em>updated: 21 March 2020  </em></span>
</div>
 <ul class="org-ul"> <li> <a id="orga8c68c9"></a> <span class="todo TODO">TODO</span>  <a href="https://www.goodreads.com/book/show/37903770-norse-mythology">Norse Mythology by Neil Gaiman</a>. <br></br></li>
 <li> <a id="org94093ef"></a> <span class="todo TODO">TODO</span>  <a href="https://www.goodreads.com/book/show/18216145-auto">Auto by David Wailing</a>. <br></br></li>
 <li> <a id="orgb40d836"></a> <span class="todo TODO">TODO</span>  <a href="https://www.goodreads.com/book/show/28209634-autonomous">Autonomous by Annalee Newitz</a>. <br></br></li>
 <li> <a id="orgd6138e1"></a> <span class="todo TODO">TODO</span>  <a href="https://news.ycombinator.com/item?id=22573204">Ask HN: Book recommendations for understanding financial systems? | Hacker News</a>. <br></br></li>
 <li> <a id="orgddec2a1"></a> <span class="todo TODO">TODO</span>  <a href="https://en.wikipedia.org/wiki/Andromeda_(novel)">Andromeda (novel) - Wikipedia</a>. <br></br></li>
 <li> <a id="org871599b"></a> <span class="todo TODO">TODO</span>  <a href="https://medium.com/solarpunks/solarpunk-a-reference-guide-8bcf18871965">SOLARPUNK : A REFERENCE GUIDE - Solarpunks - Medium</a>. <br></br></li>
 <li> <a id="org54f7dba"></a> <span class="todo TODO">TODO</span>  <a href="https://en.wikipedia.org/wiki/The_Final_Circle_of_Paradise">The Final Circle of Paradise - Wikipedia</a>. <br></br></li>
 <li> <a id="org2bca5bb"></a> <span class="todo TODO">TODO</span>  <a href="https://twitter.com/mariskreizman/status/1193898883153354752">Here's a visual of my 35 favorite books of the decade.</a>. <br></br></li>
 <li> <a id="orgc5c805e"></a> <span class="todo TODO">TODO</span>  <a href="https://news.ycombinator.com/item?id=22559493">Cyberpunk: Then and Now | Hacker News</a>. <br></br></li>
 <li> <a id="org495bde1"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/Accelerate-Software-Performing-Technology-Organizations/dp/1942788339/ref=sr_1_1">Accelerate: The Science of Lean Software and Devops</a>. <br></br></li>
 <li> <a id="org731c898"></a> <span class="todo TODO">TODO</span>  <a href="https://hackernewsbooks.com/book/drive-the-surprising-truth-about-what-motivates-us/f10867f03ab0e2c362b3450119170a5a">Drive: The Surprising Truth About What Motivates Us | Hacker News Books</a>. <br></br></li>
 <li> <a id="org3488835"></a> <span class="todo TODO">TODO</span>  <a href="https://en.wikipedia.org/wiki/Pachinko_(novel)">Pachinko (novel) - Wikipedia</a>. <br></br></li>
 <li> <a id="org2085515"></a> <span class="todo TODO">TODO</span>  <a href="https://twitter.com/twostraws/status/1205416072058490880">Paul Hudson on Twitter: Can you recommend some manga?</a>. <br></br></li>
 <li> <a id="orge6d9905"></a> <span class="todo TODO">TODO</span>  <a href="https://twitter.com/dan_abramov/status/1190762799338790913">Dan Abramov: Please point me to a book about programming that isn't boring</a>. <br></br></li>
 <li> <a id="org175125c"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/gp/registry/wishlist/28JXH54TPGED7">John's Amazon wishlist</a>. <br></br></li>
 <li> <a id="org0bc5b63"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/Super-Thinking-Upgrade-Reasoning-Decisions-ebook/dp/B07FRXC3KN/ref=sr_1_2">Super Thinking: Upgrade Your Reasoning and Make Better Decisions with Mental Models</a>. <br></br></li>
 <li> <a id="orgd0d5693"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/s?k=Giulia+Enders">Gut: the inside story of our body's most under-rated organ</a>. <br></br></li>
 <li> <a id="orgebd08eb"></a> <span class="todo TODO">TODO</span>  <a href="https://twitter.com/evansandhoefner/status/1048426752404410368">Evan Sandhoefner on Twitter: Which books/papers/talks/etc have blown your mind / changed your worldview significantly?</a>. <br></br></li>
 <li> <a id="org9926b5f"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/Joy-Demand-Discovering-Happiness-Within/dp/0062378872/ref=sr_1_1">JOY ON DEMAND: The Art of Discovering the Happiness Within</a>. <br></br></li>
 <li> <a id="orge912469"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/Minute-Meditation-Expanded-Quiet-Change/dp/0399173420/ref=sr_1_2">8 Minute Meditation Expanded : Quiet Your Mind. Change Your Life</a>. <br></br></li>
 <li> <a id="org671c79e"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/Mindfulness-Plain-English-20th-Anniversary/dp/0861719069/ref=sr_1_1">Mindfulness in Plain English: 20th Anniversary Edition: Amazon.co.uk</a>. <br></br></li>
 <li> <a id="org18d8cab"></a> <span class="todo TODO">TODO</span>  <a href="https://twitter.com/bettina_bosch/status/1164430628852572161">Bettina Bauer: What is your favorite Science Fiction novel? (twitter)</a>. <br></br></li>
 <li> <a id="org5047143"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Altered-Traits-Science-Reveals-Meditation/dp/0399184384">Altered Traits: Science Reveals How Meditation Changes Your Mind, Brain, and Body</a>. <br></br></li>
 <li> <a id="org3e2bd88"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Junk-Food-Japan-Addictive-Kurobuta/dp/1472919920">Junk Food Japan: Addictive Food from Kurobuta</a>. <br></br></li>
 <li> <a id="org331db7d"></a> <span class="todo TODO">TODO</span>  <a href="https://news.ycombinator.com/item?id=20332455">Ask HN: Recommend one book I need to read this summer?</a>. <br></br></li>
 <li> <a id="orgf7acce9"></a> <span class="todo TODO">TODO</span> I am a cat (Soseki Natsume). <br></br></li>
 <li> <a id="org4fd3219"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/Thinking-Systems-Primer-Diana-Wright/dp/184407725X">Thinking in Systems: A Primer: Amazon.co.uk: Diana Wright, Donella H. Meadows: 9781844077250: Books</a>. <br></br></li>
 <li> <a id="orgbee5e0f"></a> <span class="todo TODO">TODO</span>  <a href="http://www.lisperati.com/casting-spels-emacs/html/casting-spels-emacs-1.html">Casting SPELs in Lisp (Emacs edition)</a>. <br></br></li>
 <li> <a id="orgefc530f"></a> <span class="todo TODO">TODO</span>  <a href="http://landoflisp.com/">Land of lisp</a>. <br></br></li>
 <li> <a id="orgf0c20b1"></a> <span class="todo TODO">TODO</span>  <a href="https://www.goodreads.com/book/show/558738.Juggling_for_the_Complete_Klutz">Juggling for the Complete Klutz by John Cassidy</a>. <br></br></li>
 <li> <a id="org47b983e"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/Positioning-Battle-Your-Al-Ries-ebook/">Positioning: The Battle for Your Mind</a>. <br></br></li>
 <li> <a id="orgb1e5dbc"></a> <span class="todo TODO">TODO</span>  <a href="https://en.wikipedia.org/wiki/Snow_Crash">Snow Crash - Wikipedia</a>. <br></br></li>
 <li> <a id="orgc8401dd"></a> <span class="todo TODO">TODO</span>  <a href="https://www.powells.com/book/-9781119404507">The Little Book of Common Sense Investing, Updated and Revised</a>. <br></br></li>
 <li> <a id="orgc6057be"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Little-LISPer-Third-Daniel-Friedman/dp/0023397632">The Little LISPer, Third Edition: 9780023397639: Computer Science Books @ Amazon.com</a>. <br></br></li>
 <li> <a id="org2e5fc9e"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Anatomy-Peace-Resolving-Heart-Conflict/dp/1626564310">The Anatomy of Peace: Resolving the Heart of Conflict</a>. <br></br></li>
 <li> <a id="orgc6abca5"></a> <span class="todo TODO">TODO</span>  <a href="https://superfastthebook.com/">Superfast Lead at speed</a>. <br></br></li>
 <li> <a id="org1114f80"></a> <span class="todo TODO">TODO</span>  <a href="https://ofone.co/">A company of one</a>. <br></br></li>
 <li> <a id="org64eaee5"></a> <span class="todo TODO">TODO</span>  <a href="https://www.goodreads.com/book/show/27220736-shoe-dog">Shoe Dog: A Memoir by the Creator of NIKE</a>. <br></br></li>
 <li> <a id="org5750b0b"></a> <span class="todo TODO">TODO</span>  <a href="https://twitter.com/thegooddeath/status/1077325245940289537?s=12">Caitlin Doughty's top 8 books from 2018</a>. <br></br></li>
 <li> <a id="org9b26235"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/Global-Economy-Youve-Never-Seen-ebook/dp/B07GVT67HB/ref=tmm_kin_swatch_0?_encoding=UTF8&qid=1545746296&sr=8-1">Global Economy as you've never seen it</a>. <br></br></li>
 <li> <a id="org6957671"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Replay-Ken-Grimwood/dp/068816112X">Replay</a>. <br></br></li>
 <li> <a id="orga24f604"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Siddhartha-Novel-Hermann-Hesse/dp/0553208845">Siddhartha: A Novel</a>. <br></br></li>
 <li> <a id="orgb75f2f1"></a> <span class="todo TODO">TODO</span>  <a href="https://en.wikipedia.org/wiki/Out_(novel)">Out (novel) by Natsuo Kirino</a>. <br></br></li>
 <li> <a id="org25661ed"></a> <span class="todo TODO">TODO</span>  <a href="https://www.pitt.edu/~dash/japantales.html">Folklore, Folktales, and Fairy Tales from Japan: A Digital Library</a>. <br></br></li>
 <li> <a id="org3368d3e"></a> <span class="todo TODO">TODO</span>  <a href="https://www.goodreads.com/book/show/15811545-a-tale-for-the-time-being">A Tale for the Time Being by Ruth Ozeki</a>. <br></br></li>
 <li> <a id="orgbf821cc"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/dp/0571171044/ref=rdr_ext_tmb">Kitchen by Banan Yashimoto</a>. <br></br></li>
 <li> <a id="orgcff37ee"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Overspent-American-Want-What-Dont/dp/0060977582/ref=sr_1_3/136-0317326-4068376?ie=UTF8&qid=1538250472&sr=8-3&keywords=juliet+schor&dpID=51%252BdTsv9XUL&preST=_SY291_BO1,204,203,200_QL40_&dpSrc=srch">The Overspent American: Why We Want What We Don't Need Paperback</a>. <br></br></li>
 <li> <a id="orgdbe75de"></a> <span class="todo TODO">TODO</span>  <a href="https://www.goodreads.com/book/show/13540802-enough">Enough by Patrick Rhone</a>. <br></br></li>
 <li> <a id="org9029454"></a> <span class="todo TODO">TODO</span>  <a href="https://hotair.tech/about/">Hot Air has a nice selection</a>. <br></br></li>
 <li> <a id="orgc6f5ee9"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215">Domain-Driven Design: Tackling Complexity in the Heart of Software 1st Edition</a>. <br></br></li>
 <li> <a id="org7635ec9"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Seeing-like-State-Certain-Condition/dp/0300078153">Seeing like a State: How Certain Schemes to Improve the Human Condition Have Failed Paperback</a>. <br></br></li>
 <li> <a id="orge5b7233"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Conquest-Abundance-Abstraction-versus-Richness/dp/0226245349">Conquest of Abundance: A Tale of Abstraction versus the Richness of Being 2nd Edition</a>. <br></br></li>
 <li> <a id="org7a08f06"></a> <span class="todo TODO">TODO</span>  <a href="https://books.google.co.uk/books?id=a6sRdYLlmqIC&pg=PA6&lpg=PA6&redir_esc=y">The Wisdom of No Escape: And the Path of Loving-Kindness</a>. <br></br></li>
 <li> <a id="org381b08b"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Anatomy-Peace-Resolving-Heart-Conflict/dp/1626564310">The Anatomy of Peace: Resolving the Heart of Conflict</a>. <br></br></li>
 <li> <a id="org0cb990b"></a> <span class="todo TODO">TODO</span>  <a href="https://en.wikipedia.org/wiki/The_Millionaire_Next_Door">The Millionaire Next Door</a>. <br></br></li>
 <li> <a id="org0fb6bd3"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.co.uk/Refactoring-Improving-Existing-Addison-Wesley-Technology-ebook/dp/B007WTFWJ6/ref=sr_1_1?s=digital-text&ie=UTF8&qid=1515533074&sr=1-1&keywords=refactoring+fowler">Refactoring: Improving the Design of Existing Code</a>. <br></br></li>
 <li> <a id="org7f3b80f"></a> <span class="todo TODO">TODO</span>  <a href="https://news.ycombinator.com/item?id=12896313">Touched by the Goddess: On Ramanujan (Hacker News)</a>. <br></br></li>
 <li> <a id="org3f52b07"></a> <span class="todo TODO">TODO</span>  <a href="https://www.amazon.com/Kundalini-Untold-Story-Himalayan/dp/0994002793">Kundalini – An Untold Story: A Himalayan Mystic's Insight into the Power of Kundalini and Chakra Sadhana</a>. <br></br></li>
 <li> <a id="org6801865"></a> <span class="todo TODO">TODO</span>  <a href="https://news.ycombinator.com/item?id=12365693">Show HN: Top books mentioned in comments on Hacker News</a>. <br></br></li>
 <li> <a id="orgff5dc53"></a> <span class="todo TODO">TODO</span>  <a href="https://en.wikipedia.org/wiki/The_Prime_of_Miss_Jean_Brodie_%2528novel%2529">The Prime of Miss Jean Brodie (novel)</a>. <br></br></li>
 <li> <a id="orgf06ce40"></a> <span class="todo TODO">TODO</span>  <a href="https://www.goodreads.com/book/show/53849.Plan_B">Plan B</a>. <br></br></li>
 <li> <a id="orgc66669f"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/Deskbound-Standing-Up-Sitting-World/dp/1628600586">Deskbound</a>. <br></br></li>
 <li> <a id="org0d1fca4"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/The-Way-Wanderlust-Writing-Travelers/dp/1609521056">The Way of Wanderlust: The Best Travel Writing of Don George (Travelers' Tales)</a>. <br></br></li>
 <li> <a id="org5d0f49a"></a> <span class="todo TODO">TODO</span>  <a href="https://en.m.wikipedia.org/wiki/We_%28novel%29">We (novel)</a>. <br></br></li>
 <li> <a id="org0a34cda"></a> <span class="todo TODO">TODO</span>  <a href="http://ramiro.org/vis/hn-most-linked-books/">Top Books on Amazon Based on Links in Hacker News Comments (Hacker News)</a>. <br></br></li>
 <li> <a id="orgf31286f"></a> <span class="todo TODO">TODO</span> I'm OK, You're OK (Thomas A. Harris). <br></br></li>
 <li> <a id="org170ca2d"></a> <span class="todo TODO">TODO</span> Mistakes Were Made (but not by me) (Tavris/Aronson). <br></br></li>
 <li> <a id="org25b1fac"></a> <span class="todo TODO">TODO</span> Crucial Conversations (Patterson, Kelly…). <br></br></li>
 <li> <a id="org10272ea"></a> <span class="todo TODO">TODO</span> When Prophecy Fails (Festinger). <br></br></li>
 <li> <a id="orgb6cdd70"></a> <span class="todo TODO">TODO</span> Influence (Robert Cialdini). <br></br></li>
 <li> <a id="org19c13a3"></a> <span class="todo TODO">TODO</span> The Seven Day Weekend (Ricardo Semler). <br></br></li>
 <li> <a id="orgf0c4ef4"></a> <span class="todo TODO">TODO</span> Elements of Style (various). <br></br></li>
 <li> <a id="org0bd3fcf"></a> <span class="todo TODO">TODO</span> The Man Who Sold the Eiffel Tower (various). <br></br></li>
 <li> <a id="org80c70c4"></a> <span class="todo TODO">TODO</span> How to talk to anyone (Leil Lowndes). <br></br></li>
 <li> <a id="org5e0150d"></a> <span class="todo TODO">TODO</span>  <a href="http://www.gutenberg.org/ebooks/1091?msg=welcome_stranger">On Heroes, Hero-Worship, and the Heroic in History by Thomas Carlyle</a>. <br></br></li>
 <li> <a id="org78b2087"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/Light-Asia-Sir-Edwin-Arnold/dp/1491290447/ref=sr_1_1?s=books&ie=UTF8&qid=1451846351&sr=1-1&keywords=the+light+of+asia+by+sir+edwin+arnold">Edwin Sir Arnold's The Light of Asia</a>. <br></br></li>
 <li> <a id="org144cff9"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/Song-Celestial-Bhagavad-Gita-From-Mahabharata/dp/1848301596">Edwin Sir Arnold's The Song Celestial or Bhagavad-Gita</a>. <br></br></li>
 <li> <a id="org706d5e0"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/great-curries-india-camellia-panjabi/dp/1904920357">50 great curries of india</a>. <br></br></li>
 <li> <a id="org97668ca"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/gp/product/034549802X?ie%3DUTF8&tag%3Doffsitoftimfe-20&linkCode%3Das2&camp%3D1789&creative%3D390957&creativeASIN%3D034549802X">8 Week to optimum health</a>. <br></br></li>
 <li> <a id="orgf3c3cdc"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/Guide-Good-Life-Ancient-Stoic/dp/0195374614">A Guide to the Good Life: The Ancient Art of Stoic Joy</a>. <br></br></li>
 <li> <a id="orgc87d327"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.co.uk/Building-Microservices-Sam-Newman/dp/1491950358/ref%3Dsr_1_1?ie%3DUTF8&qid%3D1442603949&sr%3D8-1&keywords%3Dbuilding%2Bmicroservices">Building Microservices</a>. <br></br></li>
 <li> <a id="orgfb28449"></a> <span class="todo TODO">TODO</span>  <a href="http://ocw.mit.edu/ans7870/21f/21f.027/opium_wars_01/ow1_essay.pdf">First Opium War essay</a>. <br></br></li>
 <li> <a id="orgf2d4e37"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/full-catastrophe-living-wisdom-illness/dp/0739358588">Full catastrophe living</a>. <br></br></li>
 <li> <a id="org7827e43"></a> <span class="todo TODO">TODO</span>  <a href="https://www.goodreads.com/">goodreads.com</a>. <br></br></li>
 <li> <a id="org0df5e39"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/gp/product/0061121088?ie%3DUTF8&tag%3Doffsitoftimfe-20&linkCode%3Das2&camp%3D1789&creative%3D390957&creativeASIN%3D0061121088">Leaving Microsoft to Change the world</a>. <br></br></li>
 <li> <a id="orgc51cd97"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/gp/product/0140442103?ie%3DUTF8&tag%3Doffsitoftimfe-20&linkCode%3Das2&camp%3D1789&creative%3D390957&creativeASIN%3D0140442103">Letters from a stoic</a>. <br></br></li>
 <li> <a id="org1a00ed6"></a> <span class="todo TODO">TODO</span>  <a href="http://www.goodreads.com/review/list/266149-michael?page=1&shelf=2014_read&view=covers">Michael's bookshelf</a>. <br></br></li>
 <li> <a id="org0742fb2"></a> <span class="todo TODO">TODO</span>  <a href="http://www.brainpickings.org/2014/12/29/neil-degrasse-tyson-reading-list/">Neil degrasse tyson's reading list</a>. <br></br></li>
 <li> <a id="org8fc5357"></a> <span class="todo TODO">TODO</span>  <a href="https://en.wikipedia.org/wiki/On_the_Road">On the Road, by Jack Kerouac</a>. <br></br></li>
 <li> <a id="orgd4fe784"></a> <span class="todo TODO">TODO</span>  <a href="https://librivox.org/search?primary_key=0&search_category=title&search_page=1&search_form=get_results">Public domain audio books</a>. <br></br></li>
 <li> <a id="orgac82e1a"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.co.uk/gp/product/1840001585/sr=8-1/qid=1419902519/ref=olp_product_details?ie=utf8&me=&qid=1419902519&sr=8-1">Royal horticultural society's organic Gardening</a>. <br></br></li>
 <li> <a id="orgeb23be4"></a> <span class="todo TODO">TODO</span>  <a href="http://www.salmanrushdie.com/books/">Salman Rushdie books</a>. <br></br></li>
 <li> <a id="org6fe5801"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.com/Technopoly-The-Surrender-Culture-Technology/dp/0679745408">Technopoly: The Surrender of Culture to Technology</a>. <br></br></li>
 <li> <a id="org680d14c"></a> <span class="todo TODO">TODO</span> The Songlines, Bruce Chatwin. <br></br></li>
 <li> <a id="orga5ee78a"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.co.uk/Walkers-Guide-Outdoor-Clues-Signs/dp/1444780085">The Walker's Guide to Outdoor Clues and Signs</a>. <br></br></li>
 <li> <a id="org55ed22f"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.co.uk/Thing-Explainer-Complicated-Stuff-Simple/dp/1473620910">Thing Explainer: Complicated Stuff in Simple Words</a>. <br></br></li>
 <li> <a id="org0eb22fc"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.co.uk/madhur-jaffreys-ultimate-curry-bible/dp/0091874157/ref=sr_1_3?ie=utf8&qid=1419973767&sr=8-3&keywords=madhur+jaffrey+curry">Ultimate curry bible</a>. <br></br></li>
 <li> <a id="org195dbf6"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.co.uk/gp/product/1840001585/sr=8-1/qid=1419902519/ref=olp_product_details?ie=utf8&me=&qid=1419902519&sr=8-1">Veg patch</a>. <br></br></li>
 <li> <a id="org661b4c6"></a> <span class="todo TODO">TODO</span>  <a href="http://www.amazon.co.uk/JavaScript-Developer-ECMAScript-OdeToCode-Programming-ebook/dp/B018D12X0C">What Every JavaScript Developer Should Know About ECMAScript 2015</a>. <br></br></li>
 <li> <a id="org5136c48"></a> <span class="todo TODO">TODO</span>  <a href="http://camdez.com/blog/2016/01/02/2016-reading-list/">Cameron Desautels's 2016 reading list</a>. <br></br></li>
 <li> <a id="orgd7df8ac"></a> <span class="todo TODO">TODO</span> Thinking Fast and Slow (Kahneman). <br></br></li>
 <li> <a id="org31a119c"></a> <span class="done DONE">DONE</span>  <a href="https://www.amazon.com/Why-We-Sleep-Unlocking-Dreams/dp/1501144316">Why we sleep</a> ( <a href="https://twitter.com/uberstuber/status/1138291707231887361?s=12">twitter outline</a>). <br></br></li>
 <li> <a id="org869b9ba"></a> <span class="done DONE">DONE</span>  <a href="http://www.amazon.com/Flow-Psychology-Experience-Perennial-Classics/dp/0061339202/">Flow: The Psychology of Optimal Experience</a>. <br></br></li>
 <li> <a id="org819d980"></a> <span class="done DONE">DONE</span>  <a href="http://www.harukimurakami.com/library/">Haruki Murakami</a>. <br></br></li>
 <li> <a id="org64ab96c"></a> <span class="done DONE">DONE</span>  <a href="http://www.amazon.com/gp/product/0812992180?ie%3DUTF8&tag%3Doffsitoftimfe-20&linkCode%3Das2&camp%3D1789&creative%3D390957&creativeASIN%3D0812992180">Vagabonding: An Uncommon Guide to the Art of Long-Term World Travel</a>. <br></br></li>
</ul></div>
</div>]]></description>
  <link>http://xenodium.com/books-backlog/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/books-backlog/index.html</guid>
  <pubDate>Tue, 30 Dec 2014 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Video backlog</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org541e18a" class="outline-2">
 <h2 id="online-video-backlog"> <span class="timestamp-wrapper"> <span class="timestamp">30 December 2014</span></span> Video backlog</h2>
 <div class="outline-text-2" id="text-online-video-backlog">
 <span class="modified-timestamp">   <em>updated: 12 January 2019  </em></span>
</div>
 <ul class="org-ul"> <li> <a id="org5b58390"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v=wBraurRo_bg">Frank Ostaseski: "Inviting the Wisdom of Death into Life"</a>. <br></br></li>
 <li> <a id="orgb2406f7"></a> <span class="todo TODO">TODO</span>  <a href="https://news.ycombinator.com/item?id=17210164">YouTube’s top creators are burning out (Hacker News)</a>. <br></br></li>
 <li> <a id="org85c8d23"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/playlist?list=PL94E35692EB9D36F3">Donald Knuth Lectures - YouTube</a>. <br></br></li>
 <li> <a id="org9e9d4b3"></a> <span class="todo TODO">TODO</span> Rashomon by Akira Kurosawa. <br></br></li>
 <li> <a id="orgddfa726"></a> <span class="todo TODO">TODO</span>  <a href="https://vimeo.com/97903574">Seeing spaces</a>. <br></br></li>
 <li> <a id="orgf19d250"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v=HHYs78uIx3M">An exclusive seminar with Julian Assange</a>. <br></br></li>
 <li> <a id="org5b7d7e6"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v=LrObZ_HZZUc">The (Secret) City of London, Part 1: History</a>. <br></br></li>
 <li> <a id="org7203435"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v=z1ROpIKZe-c">The (Secret) City of London, Part 2: History</a>. <br></br></li>
 <li> <a id="org013476e"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v=kXBJLH2xrBM">The UK Gold</a>. <br></br></li>
 <li> <a id="orgdb330b6"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v=Jio7DK15Q1E&feature=youtu.be">Terra Plana - Learning the skill of barefoot running</a>. <br></br></li>
 <li> <a id="org9df83a4"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v=Zwx1PaWbD4U">The Science of Compassion ॐ Mata Amritanandamayi ॐ Documentary</a>. <br></br></li>
 <li> <a id="orgb0459aa"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/playlist?list=PLZdCLR02grLrEwKaZv-5QbUzK0zGKOOcr">Rich Hickey Talks (clojure)</a>. <br></br></li>
 <li> <a id="org1002316"></a> <span class="todo TODO">TODO</span>  <a href="https://egghead.io/lessons/javascript-redux-the-single-immutable-state-tree">Redux: The Single Immutable State Tree screencast</a>. <br></br></li>
 <li> <a id="org5f4568a"></a> <span class="todo TODO">TODO</span>  <a href="https://channel9.msdn.com/Shows/Going+Deep/Anders-Hejlsberg-and-Lars-Bak-TypeScript-JavaScript-and-Dart">Anders Hejlsberg and Lars Bak: TypeScript, JavaScript, and Dart</a>. <br></br></li>
 <li> <a id="orgfa4dcee"></a> <span class="todo TODO">TODO</span>  <a href="http://www.slowhustle.com/how-to-travel-the-slow-hustle-way-insights-from-50-episodes/">How To Travel… The Slow Hustle Way</a>. <br></br></li>
 <li> <a id="org6c997e6"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?time_continue%3D1&v%3DnUjgKoOYxos">2015-12-10 Emacs Chat - John Wiegley</a>. <br></br></li>
 <li> <a id="org1b201e5"></a> <span class="todo TODO">TODO</span>  <a href="http://emacsnyc.org/2015/03/02/how-i-use-org-capture-and-stuff.html">How To Order Salads From Inside Emacs</a>. <br></br></li>
 <li> <a id="orgfcc0d2e"></a> <span class="todo TODO">TODO</span>  <a href="http://emacsnyc.org/2014/04/07/an-introduction-to-emacs-lisp.html">An introduction to Emacs Lisp</a>. <br></br></li>
 <li> <a id="org990e934"></a> <span class="todo TODO">TODO</span>  <a href="https://vimeo.com/139910837?ref%3Dtw-share">12 Challenging Steps to Being a Better Interviewer – Cate Huston at The Lead Developer 2015</a>. <br></br></li>
 <li> <a id="org8b78001"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v%3D8o46HH-TfNY">Born Rich: Children Of The Insanely Wealthy</a>. <br></br></li>
 <li> <a id="orgf6f9be0"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v%3DFtieBc3KptU&feature%3Dyoutu.be&a">Emacs for writers</a>. <br></br></li>
 <li> <a id="org58f1496"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v%3dbkdt9bfh5gs">Frugal fire 002: justin mccurry (rootofgood)</a>. <br></br></li>
 <li> <a id="org919b63e"></a> <span class="todo TODO">TODO</span> Graham Hancock – The War on Consciousness. <br></br></li>
 <li> <a id="org69a0c0c"></a> <span class="todo TODO">TODO</span>  <a href="http://www.nfb.ca/film/griefwalker?utm_content%3dbuffer24b02&utm_medium%3dsocial&utm_source%3dtwitter.com&utm_campaign%3dbuffer">Griefwalker</a>. <br></br></li>
 <li> <a id="org94fb691"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v%3DSwkjqGd8NC4">How to win the loser's game</a>. <br></br></li>
 <li> <a id="org7f98fae"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/playlist?list%3DPLBDA2E52FB1EF80C9">John Green's "Crash Course History" videos</a>. <br></br></li>
 <li> <a id="orgc76ab88"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v%3DunX4FQqM6vI">Matthieu Ricard Leads a Meditation on Altruistic Love and Compassion</a>. <br></br></li>
 <li> <a id="org45a0186"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v%3DjUlWDxhSlt8">Matthieu Ricard: "Altruism" | Talks at Google</a>. <br></br></li>
 <li> <a id="orgbd77afe"></a> <span class="todo TODO">TODO</span> Nick Hanauer – Rich People Don’t Create Jobs. <br></br></li>
 <li> <a id="orgb0bc7c0"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v%3DcsyL9EC0S0c">Programming is terrible — Lessons learned from a life wasted</a>. <br></br></li>
 <li> <a id="org7360f5d"></a> <span class="todo TODO">TODO</span> Rupert Sheldrake – The Science of Delusion. <br></br></li>
 <li> <a id="org173ce7b"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v%3DVXTpTRuPiPQ">Surya Namaskar stretches</a>. <br></br></li>
 <li> <a id="orgdb0ac37"></a> <span class="todo TODO">TODO</span>  <a href="http://audio-video.gnu.org/video/misc/2015-01__gnu_guix__the_emacs_of_distros.webm">The Emacs of distros</a>. <br></br></li>
 <li> <a id="org85e8634"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v%3D17jymDn0W6U&sns%3Dem">The Known Universe by AMNH</a>. <br></br></li>
 <li> <a id="orgbe208e7"></a> <span class="done DONE">DONE</span>  <a href="https://www.youtube.com/watch?v=ttLgyKk7yMA">Juliet Schor Iris Nights: Re-Thinking Materialism</a>. <br></br></li>
 <li> <a id="org52c7494"></a> <span class="done DONE">DONE</span>  <a href="https://archive.org/details/The.Internets.Own.Boy.The.Story.of.Aaron.Swartz.2014.WEBRiP.XViD.AC3LEGi0N">The Internets own boy</a>. <br></br></li>
 <li> <a id="org794347e"></a> <span class="done DONE">DONE</span>  <a href="https://www.youtube.com/watch?v%3DFw8BV4VFOwM">BBC's secret of levitation</a>. <br></br></li>
 <li> <a id="orgaa568d9"></a> <span class="done DONE">DONE</span>  <a href="https://vimeo.com/15351476">Hold Fast</a>. <br></br></li>
 <li> <a id="org74eef4c"></a> <span class="done DONE">DONE</span>  <a href="https://www.youtube.com/watch?v=8crol-ydfmi">This is water, commencement speech</a>. <br></br></li>
 <li> <a id="orga918d73"></a> <span class="done DONE">DONE</span>  <a href="https://www.youtube.com/watch?v=dkyjvv7huzw">This is water</a>. <br></br></li>
</ul></div>
</div>]]></description>
  <link>http://xenodium.com/online-video-backlog/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/online-video-backlog/index.html</guid>
  <pubDate>Tue, 30 Dec 2014 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emacs tips backlog</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org3f16450" class="outline-2">
 <h2 id="emacs-tips-backlog"> <span class="timestamp-wrapper"> <span class="timestamp">03 December 2014</span></span> Emacs tips backlog</h2>
 <div class="outline-text-2" id="text-emacs-tips-backlog">
 <span class="modified-timestamp">   <em>updated: 18 June 2017  </em></span>
</div>
 <ul class="org-ul"> <li> <a id="org4299767"></a> <span class="todo TODO">TODO</span> Try out  <a href="https://github.com/jacobdufault/cquery/blob/master/emacs/cquery.el">cquery</a>,  <a href="https://github.com/emacs-lsp/lsp-mode">emacs-lsp</a>, and  <a href="https://github.com/tigersoldier/company-lsp">company-lsp</a>. <br></br></li>
 <li> <a id="org15e7626"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/facetframer/orgnav">Drill down org files using orgnav (helm-based)</a>. <br></br></li>
 <li> <a id="org7e1affb"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/prettier/prettier-emacs">Pretier emacs</a>. <br></br></li>
 <li> <a id="org88eff29"></a> <span class="todo TODO">TODO</span>  <a href="http://amitp.blogspot.co.uk/search/label/emacs">Spaceline walkthrough</a>. <br></br></li>
 <li> <a id="org97c5f03"></a> <span class="todo TODO">TODO</span>  <a href="http://blog.jakoblind.no/2015/06/08/emacs-as-git-mergetool/">Emacs as git mergetool</a>. <br></br></li>
 <li> <a id="org95ec893"></a> <span class="todo TODO">TODO</span> Try out emacs Android debug (see this  <a href="http://gregorygrubbs.com/development/tips-on-android-development-using-emacs/">post</a>). <br></br></li>
 <li> <a id="org0c29d58"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/mrkkrp/typit">Typit: typing game for Emacs</a>. <br></br></li>
 <li> <a id="orge092c0b"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/jekor/hidepw">hidepw - an Emacs minor mode for hiding passwords</a>. <br></br></li>
 <li> <a id="org446404f"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/Wilfred/pyimport">pyimports</a>. <br></br></li>
 <li> <a id="org784a2f3"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/syohex/emacs-quickrun">quickrun.el</a>. <br></br></li>
 <li> <a id="org69da399"></a> <span class="todo TODO">TODO</span>  <a href="http://sriramkswamy.github.io/dotemacs/">Sriram Krishnaswamy's init</a>. <br></br></li>
 <li> <a id="org67d1b69"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/zakame/emacs-for-javascript">Emacs for JavaScript</a>. <br></br></li>
 <li> <a id="orge7ca9c7"></a> <span class="todo TODO">TODO</span>  <a href="http://williambert.online/2014/02/using-a-node-repl-with-emacs/">Using a Node repl in Emacs with nvm and npm</a>. <br></br></li>
 <li> <a id="orgbc9bb0f"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/iced/go-gopath/blob/master/README.md">go-gopath</a>. <br></br></li>
 <li> <a id="org582a720"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/alezost/shift-number.el">shift-number.el</a>. <br></br></li>
 <li> <a id="org67fa657"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/afainer/arview">arview</a>. <br></br></li>
 <li> <a id="org9baed10"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/xuchunyang/DevDocs.el">https://github.com/xuchunyang/DevDocs.el</a>. <br></br></li>
 <li> <a id="orgd027d2f"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/PythonNut/company-flx">company-flx: fuzzy matching to company</a>. <br></br></li>
 <li> <a id="org3265ba1"></a> <span class="todo TODO">TODO</span>  <a href="https://vxlabs.com/2016/04/11/step-by-step-guide-to-c-navigation-and-completion-with-emacs-and-the-clang-based-rtags/">Step-by-step guide to C++ navigation and completion with Emacs and the Clang-based rtags</a>. <br></br></li>
 <li> <a id="orgf5d491e"></a> <span class="todo TODO">TODO</span>  <a href="https://melpa.org/?utm_source=dlvr.it&utm_medium=twitter#/go-guru">Integration of the Go 'guru' analysis tool into Emacs</a>. <br></br></li>
 <li> <a id="org68f1b76"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/remyferre/comment-dwim-2/blob/master/README.md">comment-dwim</a>. <br></br></li>
 <li> <a id="orgd155781"></a> <span class="done DONE">DONE</span> (setq projectile-use-git-grep t).  <span class="timestamp-wrapper"> <span class="timestamp">27 December 2018</span></span> <br></br></li>
 <li> <a id="orgb7469e5"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/company-mode/company-statistics">company-mode/company-statistics: Sort completion candidates by previous completion choices</a>. <br></br></li>
 <li> <a id="orgd27b72d"></a> <span class="todo TODO">TODO</span> rats for Go testing. <br></br></li>
 <li> <a id="orge2fcf51"></a> <span class="todo TODO">TODO</span> go-impl. <br></br></li>
 <li> <a id="org8f8db3e"></a> <span class="todo TODO">TODO</span> go-gopath to guess GOPATH. <br></br></li>
 <li> <a id="org162f675"></a> <span class="todo TODO">TODO</span>  <a href="https://www.youtube.com/watch?v=mtliRYQd0j4&feature=youtu.be">Rewrite git history with Emacs, magit and git rebase</a>. <br></br></li>
 <li> <a id="orgd9088b8"></a> <span class="todo TODO">TODO</span>  <a href="https://www.reddit.com/r/emacs/comments/46lv2q/is_there_any_easy_way_to_make_org_files_password/">Is there any easy way to make .org files password protected? (Reddit)</a>. <br></br></li>
 <li> <a id="org1f2bc72"></a> <span class="todo TODO">TODO</span> use-package binding to different maps <br></br> <div class="outline-text-5" id="text-org1f2bc72">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">( <span style="color: #a71d5d;">use-package</span>  <span style="color: #0086b3;">term</span>
   <span style="color: #a71d5d;">:bind</span>
  ( <span style="color: #a71d5d;">:map</span>
   term-mode-map
   ( <span style="color: #183691;">"M-p"</span> . term-send-up)
   ( <span style="color: #183691;">"M-n"</span> . term-send-down)
    <span style="color: #a71d5d;">:map</span> term-raw-map
   ( <span style="color: #183691;">"M-o"</span> . other-window)
   ( <span style="color: #183691;">"M-p"</span> . term-send-up)
   ( <span style="color: #183691;">"M-n"</span> . term-send-down)))
</pre>
</div>
</div>
</li>
 <li> <a id="org7bea4ef"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/jasonm23/emacs-select-themes/blob/master/select-themes.el">select-themes</a>. <br></br></li>
 <li> <a id="orgf92f2a0"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/bmag/helm-purpose">Emacs purpose</a>. <br></br></li>
 <li> <a id="orgae835ae"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/trezona-lecomte/coverage">Code coverage highlighting for Emacs</a>. <br></br></li>
 <li> <a id="orgea14ff7"></a> <span class="todo TODO">TODO</span>  <a href="http://elpa.gnu.org/packages/tramp-theme.html">tramp-theme</a>. <br></br></li>
 <li> <a id="orgae2bd2f"></a> <span class="todo TODO">TODO</span>  <a href="http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/">Why are you changing gc-cons-threshold?</a>. <br></br></li>
 <li> <a id="org7623a3d"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/syohex/emacs-qrencode/blob/master/README.md">Emacs qrencode</a>. <br></br></li>
 <li> <a id="orgacfa6de"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/Fuco1/smartparens">Smartparens</a>. <br></br></li>
 <li> <a id="org50861ad"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/nivekuil/corral">Corral</a>. <br></br></li>
 <li> <a id="org9b1c1ce"></a> <span class="todo TODO">TODO</span>  <a href="https://gist.github.com/syohex/626af66ba3650252b0a2">Hash region</a>. <br></br></li>
 <li> <a id="org366286d"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/alexmurray/cstyle">cstyle</a>. <br></br></li>
 <li> <a id="orga26312f"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/lvillani/metafmt">metafmt</a>. <br></br></li>
 <li> <a id="orgd11c56a"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/nicklanasa/xcode-mode/blob/master/README.md">xcode-mode</a>. <br></br></li>
 <li> <a id="orgcd3298f"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/yuutayamada/commenter">commenter</a>. <br></br></li>
 <li> <a id="org50a9ab8"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/ustun/emacs-helpers-for-js/blob/master/uojs.el">Emacs JavaScript helpers</a>. <br></br></li>
 <li> <a id="org028738f"></a> <span class="todo TODO">TODO</span>  <a href="http://emacs.stackexchange.com/questions/7908/how-to-make-yasnippet-and-company-work-nicer">How to make yasnippet and company work nicer?</a>. <br></br></li>
 <li> <a id="org015f647"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/sigma/dotemacs/blob/master/lisp/config/go-config.el">A go Emacs config</a>. <br></br></li>
 <li> <a id="orgfd8136b"></a> <span class="todo TODO">TODO</span>  <a href="http://clubctrl.com/org/prog/howto.html">Try out ox-twbs</a>. <br></br></li>
 <li> <a id="org880e917"></a> <span class="todo TODO">TODO</span>  <a href="http://ergoemacs.org/emacs/function-frequency.html">Emacs Lisp function frequency</a>. <br></br></li>
 <li> <a id="org094eaae"></a> <span class="todo TODO">TODO</span>  <a href="http://emacs.stackexchange.com/questions/7908/how-to-make-yasnippet-and-company-work-nicer">How to make yasnippet and company work nicer? (Stack Exchange)</a>. <br></br></li>
 <li> <a id="org20af525"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/nekop/yasnippet-java-mode/blob/master/java-snippets.el">yasnippet-java-mode/java-snippets.el</a>. <br></br></li>
 <li> <a id="org7bc149f"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/Lindydancer/font-lock-studio">font-lock-studio</a>. <br></br></li>
 <li> <a id="org7bceff1"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/jorgenschaefer/emacs-buttercup">buttercup</a>. <br></br></li>
 <li> <a id="org1d49ae5"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/niku/markdown-preview-eww">markdown-preview-eww</a>. <br></br></li>
 <li> <a id="orgb0d9aa5"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/lujun9972/yahoo-weather-mode">yahoo-weather-mode</a>. <br></br></li>
 <li> <a id="orge53913a"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/peteyy/.emacs.d/blob/master/settings/language-javascript.el">Peek at peteyy's Javascript config</a>. <br></br></li>
 <li> <a id="orgc88bf6e"></a> <span class="todo TODO">TODO</span>  <a href="http://puntoblogspot.blogspot.co.uk/2016/01/til-ediff-revision.html?m=1">ediff-revision and magit-find-file to compare branches</a>. <br></br></li>
 <li> <a id="orgaa9971d"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/Gnouc/flycheck-checkbashisms/blob/master/README.md">Flycheck linter for sh using checkbashisms</a>. <br></br></li>
 <li> <a id="orgd0ccfdb"></a> <span class="todo TODO">TODO</span>  <a href="http://draketo.de/light/english/free-software/el-kanban-org-table">El Kanban Org: parse org-mode todo-states to use org-tables as Kanban tables</a>. <br></br></li>
 <li> <a id="org23a03db"></a> <span class="todo TODO">TODO</span>  <a href="http://qiita.com/fujimisakari/items/a6ff082f0e8eddc09511">Emacs iOS development (qiita)</a>. <br></br></li>
 <li> <a id="orgd907a81"></a> <span class="todo TODO">TODO</span>  <a href="http://blog.fujimisakari.com/Emacs%25E3%2581%25A6%25E3%2582%2599iOS%25E9%2596%258B%25E7%2599%25BA-objective-c-%25E3%2581%2599%25E3%2582%258B%25E3%2581%259F%25E3%2582%2581%25E3%2581%25AE%25E7%2592%25B0%25E5%25A2%2583%25E6%25A7%258B%25E7%25AF%2589/">Emacs iOS development (fujimisakari)</a>. <br></br></li>
 <li> <a id="orgd6e41da"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/trotzig/import-js">import-js</a>. <br></br></li>
 <li> <a id="org548460c"></a> <span class="todo TODO">TODO</span>  <a href="http://orgmode.org/worg/org-tutorials/encrypting-files.html">encrypting org files</a>. <br></br></li>
 <li> <a id="org179679d"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/flycheck/flycheck-pos-tip">flycheck-pos-tip</a>. <br></br></li>
 <li> <a id="org1a7cf01"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/CodyReichert/es6-snippets">ES6 yasnippets</a>. <br></br></li>
 <li> <a id="org23adb86"></a> <span class="todo TODO">TODO</span>  <a href="http://tiborsimko.org/emacs-epydoc-snippets.html">Writing Python Docstrings with Emacs</a>. <br></br></li>
 <li> <a id="orgc6efa80"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/To1ne/temacco/commit/6a084365ae137db2cdd035b7533847880d8c6cac">Try Completion for Objective-C (Github diff)</a>. <br></br></li>
 <li> <a id="org8dbff77"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/swank-js/swank-js">swank-js</a>. <br></br></li>
 <li> <a id="org65b62c9"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/steckerhalter/emacs-fasd">Emacs fasd support</a>. <br></br></li>
 <li> <a id="orgc557845"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/benma/visual-regexp.el">visual-regexp</a>. <br></br></li>
 <li> <a id="org2b2cb71"></a> <span class="todo TODO">TODO</span>  <a href="http://emacsredux.com/blog/2014/05/16/opening-large-files/">Open large files</a>. <br></br></li>
 <li> <a id="org38c55b4"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/nathankot/company-sourcekit">company-sourcekit</a> (Swift completion):  <a href="https://github.com/wiruzx/dotfiles/blob/master/.emacs#L24">sample config</a>. <br></br></li>
 <li> <a id="org2d3dbdf"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/dakrone/emacs-java-imports">emacs-java-imports</a>. <br></br></li>
 <li> <a id="orgeb27ac6"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/ananthakumaran/tide">TypeScript Interactive Development Environment for Emacs</a>. <br></br></li>
 <li> <a id="orgde7fa0a"></a> <span class="todo TODO">TODO</span> append-to-buffer. <br></br></li>
 <li> <a id="org2f6e8d0"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/wavexx/python-x.el">python-x: extras for interactive evaluation</a>. <br></br></li>
 <li> <a id="orgadd985d"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/emacsmirror/outlined-elisp-mode">outlined-elisp-mode</a>. <br></br></li>
 <li> <a id="orgd92f340"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/tj64/outline-magic">outlien-magic</a>. <br></br></li>
 <li> <a id="orgdfe4739"></a> <span class="todo TODO">TODO</span> Gutter and linum+ config (see  <a href="https://github.com/zvlex/dotfiles">zvlex/dotfiles</a>). <br></br></li>
 <li> <a id="orgb57fd55"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/emacsfodder/kurecolor">kurecolor</a>: Editing color. <br></br></li>
 <li> <a id="org9fca133"></a> <span class="todo TODO">TODO</span>  <a href="https://www.gnu.org/software/emacs/manual/html_node/autotype/Autoinserting.html">auto-insert-mode</a>. <br></br></li>
 <li> <a id="orgca49c1d"></a> <span class="todo TODO">TODO</span> Buffer local cursor color:  <a href="https://github.com/skk-dev/ddskk/blob/master/readmes/readme.ccc.org">ccc</a>. <br></br></li>
 <li> <a id="org68a3579"></a> <span class="todo TODO">TODO</span> clang indexing tool:  <a href="http://ffevotte.github.io/clang-tags/">clang-tags</a>. <br></br></li>
 <li> <a id="org01d1baf"></a> <span class="todo TODO">TODO</span> Create custom theme: Trường's  <a href="http://truongtx.me/2013/03/31/color-theming-in-emacs-24/">post</a>. <br></br></li>
 <li> <a id="org64a7de7"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/Fuco1/dired-hacks">dired-hacks</a>. <br></br></li>
 <li> <a id="org8fb60be"></a> <span class="todo TODO">TODO</span> emacs-index-search (lookup subject in Emacs manual). <br></br></li>
 <li> <a id="orge44191e"></a> <span class="todo TODO">TODO</span> gtd emacs workflow: Charles cave's  <a href="http://members.optusnet.com.au/~charles57/gtd/gtd_workflow.html">notes</a>. <br></br></li>
 <li> <a id="orgd275335"></a> <span class="todo TODO">TODO</span> info-apropos (lookup subject in all manuals). <br></br></li>
 <li> <a id="orgcbc7431"></a> <span class="todo TODO">TODO</span> Jumping around tips:  <a href="http://zerokspot.com/weblog/2015/01/07/jumping-around-in-emacs/">zerokspot</a>. <br></br></li>
 <li> <a id="org6f6997b"></a> <span class="todo TODO">TODO</span> Mac OS clipboard support (from terminal):  <a href="https://github.com/jkp/pbcopy.el">pbcopy</a>. <br></br></li>
 <li> <a id="org206e030"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/m0smith/malabar-mode">Malabar mode</a>: For Java. <br></br></li>
 <li> <a id="org0d291de"></a> <span class="todo TODO">TODO</span> Melpa recipe format: <a href="https://github.com/milkypostman/melpa#recipe-format">format</a>. <br></br></li>
 <li> <a id="org57aa956"></a> <span class="todo TODO">TODO</span> Naturaldocs for javascript:  <a href="http://naiquevin.github.io/naturaldocs-for-javascript-in-emacs.html">Vineet's post</a>. <br></br></li>
 <li> <a id="org2c5fa87"></a> <span class="todo TODO">TODO</span> Org protocol: see irreal's  <a href="http://irreal.org/blog/?p=3594">post</a> and oremacs's  <a href="http://oremacs.com/2015/01/07/org-protocol-1/">part 1</a> and  <a href="http://oremacs.com/2015/01/08/org-protocol-2/">part 2</a>. <br></br></li>
 <li> <a id="orgb64aefe"></a> <span class="todo TODO">TODO</span> org-multiple-keymap.  More at  <a href="https://github.com/myuhe/org-multiple-keymap.el">org-multiple-keymap.el</a>. <br></br></li>
 <li> <a id="org4b8cdc8"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/yjwen/org-reveal/tree/stable">org-reveal</a>: Export org to reveal.js. <br></br></li>
 <li> <a id="org60e9ba3"></a> <span class="todo TODO">TODO</span> Practice touch/speed typing:  <a href="https://github.com/hagleitn/speed-type">speedtype</a>. <br></br></li>
 <li> <a id="orgef3b63e"></a> <span class="todo TODO">TODO</span> private configuration:  <a href="https://github.com/cheunghy/private">private</a>. <br></br></li>
 <li> <a id="org56e310e"></a> <span class="todo TODO">TODO</span> project management for C/C++:  <a href="https://github.com/lefterisjp/malinka">malinka</a>. <br></br></li>
 <li> <a id="orgb213118"></a> <span class="todo TODO">TODO</span> Project templates:  <a href="https://github.com/chrisbarrett/skeletor.el">skeletor</a>. <br></br></li>
 <li> <a id="org7db673d"></a> <span class="todo TODO">TODO</span> Rewrite git logs. See  <a href="http://shingofukuyama.github.io/emacs-magit-reword-commit-messages/">emacs magit tutorial | rewrite older commit</a>. <br></br></li>
 <li> <a id="org6dcff49"></a> <span class="todo TODO">TODO</span>  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Selective-Display.html">Selective display</a>: Hide lines longer than. <br></br></li>
 <li> <a id="org6f22150"></a> <span class="todo TODO">TODO</span> shell-command-on-region: Print inline with C-u M-|. <br></br></li>
 <li> <a id="org83758df"></a> <span class="todo TODO">TODO</span> shell-command: Print output inline with C-u M-!. <br></br></li>
 <li> <a id="org2082f27"></a> <span class="todo TODO">TODO</span> Simplify media file transformations:  <a href="https://github.com/abo-abo/make-it-so">make-it-so</a>. <br></br></li>
 <li> <a id="org17b53f5"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/mineo/yatemplate">yatemplate</a>. <br></br></li>
 <li> <a id="org49bbf4a"></a> <span class="todo TODO">TODO</span>  <a href="https://github.com/fujimisakari/emacs-helm-xcdoc">emacs-helm-xcdoc</a>. <br></br></li>
 <li> <a id="org8c59285"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/syohex/emacs-helm-ispell">helm-ispell</a>. <br></br></li>
 <li> <a id="org44e6449"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/HKey/dired-atool">Pack/unpack files with atool on dired</a>. <br></br></li>
 <li> <a id="org3641ad2"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/Alexander-Miller/company-shell">company-shell</a>. <br></br></li>
 <li> <a id="org3325a68"></a> <span class="done DONE">DONE</span> artbollocks-mode and writegood. More at Sacha's  <a href="http://sachachua.com/blog/2011/12/emacs-artbollocks-mode-el-and-writing-more-clearly/">post</a>. <br></br></li>
 <li> <a id="org55118cc"></a> <span class="done DONE">DONE</span> comint-prompt-read-only for making shell prompts read-only. <br></br></li>
 <li> <a id="org31b1d59"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/kelvinh/org-page">org-page</a>: Static blog. <br></br></li>
 <li> <a id="orge952763"></a> <span class="done DONE">DONE</span>  <a href="https://www.reddit.com/r/emacs/comments/43b42y/i_just_realized_emacs_has_a_fast_infix_calculator/">I just realized Emacs has a fast infix calculator that's not calc or quick-calc… (Reddit)</a>. <br></br></li>
 <li> <a id="org213dc07"></a> <span class="done DONE">DONE</span>  <a href="http://promberger.info/linux/2010/02/16/how-to-get-emacs-key-bindings-in-ubuntu/">How to get emacs key bindings in Ubuntu</a>. <br></br></li>
 <li> <a id="org8fb6d24"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/calvinwyoung/org-autolist">org-autolist</a>. <br></br></li>
 <li> <a id="org9ff6340"></a> <span class="done DONE">DONE</span> Move up by parens: More at the  <a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Moving-by-Parens.html">manual</a>. <br></br></li>
 <li> <a id="orgca62519"></a> <span class="done DONE">DONE</span> sunrise-sunset. <br></br></li>
 <li> <a id="org5f21621"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/abo-abo/ace-window">ace-window</a>. <br></br></li>
 <li> <a id="org8b95857"></a> <span class="done DONE">DONE</span> Checkdoc. <br></br></li>
 <li> <a id="org6222b18"></a> <span class="done DONE">DONE</span> Choose magit repo c-u c-x g (magit-status). <br></br></li>
 <li> <a id="org7ccad92"></a> <span class="done DONE">DONE</span> continue comment blocks: m-j (indent-new-comment-line). <br></br></li>
 <li> <a id="org8a517d0"></a> <span class="done DONE">DONE</span> Debug expanded elisp macros: See Wisdom and Wonder's  <a href="http://www.wisdomandwonder.com/link/9316/how-to-debug-expanded-elisp-macros">post</a>. <br></br></li>
 <li> <a id="org8e556d1"></a> <span class="done DONE">DONE</span> delete-duplicate-lines <br></br></li>
 <li> <a id="orge874e28"></a> <span class="done DONE">DONE</span> Describe bindings: C-h b lists all bindings. <br></br></li>
 <li> <a id="org935400d"></a> <span class="done DONE">DONE</span> Disable furniture <br></br> <div class="outline-text-5" id="text-org935400d">
 <div class="org-src-container">
 <pre class="src src-emacs-lisp">(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
</pre>
</div>
</div>
</li>
 <li> <a id="org2848cb6"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/silex/elmacro">elmacro</a> shows keyboard as emacs lisp. <br></br></li>
 <li> <a id="orgee0f8f9"></a> <span class="done DONE">DONE</span> yasnippet mirrors with transformations more at  <a href="https://capitaomorte.github.io/yasnippet/snippet-development.html#sec-3-6">snippet development</a>. <br></br> <div class="outline-text-5" id="text-orgee0f8f9">
 <p>
For example:
</p>
 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #795da3;">-</span> (${ <span style="color: #333333;">1</span>:id})${ <span style="color: #333333;">2</span>:foo}
{
     <span style="color: #a71d5d;">return</span> $ <span style="color: #333333;">2</span>;
}

 <span style="color: #795da3;">-</span> (void) <span style="color: #a71d5d;">set</span>${ <span style="color: #333333;">2</span>:$( <span style="color: #183691;">capitalize</span> yas-text)}:($ <span style="color: #333333;">1</span>)avalue
{
    [$ <span style="color: #333333;">2</span> autorelease];
    $ <span style="color: #333333;">2</span> = [avalue retain];
}
$ <span style="color: #333333;">0</span>
</pre>
</div>
</div>
</li>
 <li> <a id="orgb4c01a7"></a> <span class="done DONE">DONE</span> Emacs regex:  <a href="http://ergoemacs.org/emacs/emacs_regex.html">Emacs: text pattern matching (regex) tutorial</a>. <br></br></li>
 <li> <a id="org5c0a27e"></a> <span class="done DONE">DONE</span> export ascii art:  <a href="http://www.lysator.liu.se/~tab/artist/">artist mode</a> +  <a href="http://ditaa.sourceforge.net">ditaa</a> for uml. demo  <a href="https://www.youtube.com/watch?v=ciux87xo8fc">video</a>. <br></br></li>
 <li> <a id="orgf6d4664"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/abo-abo/lispy">lispy</a>. <br></br></li>
 <li> <a id="org89825d7"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/dandavison/minimal">minimal</a>: minimalist appearance. <br></br></li>
 <li> <a id="orgf2a8ba4"></a> <span class="done DONE">DONE</span> Narrowing regions <br></br> <div class="outline-text-5" id="text-orgf2a8ba4">
 <ul class="org-ul"> <li>c-x n n (narrow-to-region).</li>
 <li>c-x n w (Widen).</li>
</ul></div>
</li>
 <li> <a id="orgc405855"></a> <span class="done DONE">DONE</span>  <a href="https://www.gnu.org/software/emacs/manual/nxml-mode.html">nxml-mode</a>. <br></br></li>
 <li> <a id="org9e28753"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/jonnay/emagicians-starter-kit/blob/master/themes/org-beautify-theme.org">org-beautify-theme</a>: a sub-theme to make org-mode more beautiful. <br></br></li>
 <li> <a id="org0de4a0f"></a> <span class="done DONE">DONE</span> Recursive query/replace <br></br> <div class="outline-text-5" id="text-org0de4a0f">
 <ul class="org-ul"> <li>M-x find-dired RET.</li>
 <li>Navigate to location, RET.</li>
 <li>Add find argument (omit for all files), RET.</li>
 <li>t (select all).</li>
 <li>Q (query-replace).</li>
 <li>Enter search/replace terms.</li>
 <li>y/n for each match.</li>
 <li>C-x s ! (save all).</li>
</ul></div>
</li>
 <li> <a id="orgc44570f"></a> <span class="done DONE">DONE</span> Repeat last command: C-x z (and just z threreafter). <br></br></li>
 <li> <a id="org706c08c"></a> <span class="done DONE">DONE</span> Replace char with a newline <br></br> <div class="outline-text-5" id="text-org706c08c">
 <ul class="org-ul"> <li>M-x replace-string RET ; RET C-q C-j.</li>
 <li>C-q (quoted-insert).</li>
 <li>C-j (newline).</li>
</ul></div>
</li>
 <li> <a id="org216a1fd"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/bruce-connor/smart-mode-line">smart-mode-line</a>,  <a href="http://pages.sachachua.com/.emacs.d/sacha.html">sacha's sample usage</a>. <br></br></li>
 <li> <a id="org0b44cef"></a> <span class="done DONE">DONE</span> Toggling key bingings:  <a href="http://oremacs.com/2014/12/25/ode-to-toggle/">ode to the toggle</a>. <br></br></li>
 <li> <a id="org5a355bf"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/damiencassou/unify-opening">unify-opening</a> <br></br></li>
 <li> <a id="orge057ee5"></a> <span class="done DONE">DONE</span> use-package:  <a href="http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html">lunaryorn</a>. <br></br></li>
 <li> <a id="org3dae59c"></a> <span class="done DONE">DONE</span>  <a href="https://github.com/aaronbieber/sunshine.el">sunshine.el</a>. <br></br></li>
 <li> <a id="orgb75c0a2"></a> <span class="done DONE">DONE</span> youtube-dl:  <a href="http://oremacs.com/2015/01/05/youtube-dl/">or emacs</a>. <br></br></li>
</ul></div>
</div>]]></description>
  <link>http://xenodium.com/emacs-tips-backlog/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-tips-backlog/index.html</guid>
  <pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emacs lisp bookmarks</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org117d0b9" class="outline-2">
 <h2 id="emacs-lisp-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">20 September 2014</span></span> Emacs lisp bookmarks</h2>
 <div class="outline-text-2" id="text-emacs-lisp-bookmarks">
 <span class="modified-timestamp">   <em>updated: 02 February 2020  </em></span>
 <ul class="org-ul"> <li> <a href="https://twitter.com/kaushalmodi/status/1059873868175826946?s=12">(setq search-whitespace-regexp ".*?") isearch "abc ghi" matches "abcdefghi"</a>.</li>
 <li> <a href="https://github.com/kinghom/elisp-guide">A quick guide to Emacs Lisp programming</a>.</li>
 <li> <a href="https://github.com/alphapapa/unpackaged.el#font-compare">A snippet to try out fonts</a>.</li>
 <li>Abo abo's  <a href="https://github.com/abo-abo/elisp-guide">Emacs Lisp Guide</a>.</li>
 <li> <a href="http://www.wilfred.me.uk/blog/2015/03/19/adding-a-new-language-to-emacs/">Adding A New Language to Emacs (ie. writing a new major mode)</a>.</li>
 <li> <a href="https://github.com/alphapapa/emacs-package-dev-handbook">alphapapa's The Emacs Package Developer’s Handbook</a>.</li>
 <li> <a href="https://nullprogram.com/blog/2019/03/10/">An Async / Await Library for Emacs Lisp « null program</a>.</li>
 <li> <a href="http://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html">An introduction to emacs lisp</a>.</li>
 <li> <a href="https://elpa.gnu.org/packages/path-iterator.html">An iterator for traversing a directory path</a>.</li>
 <li> <a href="http://caiorss.github.io/Emacs-Elisp-Programming/Elisp_Snippets.html">Caio Rordrigues's Elisp Snippets</a>.</li>
 <li> <a href="https://github.com/caiorss/Emacs-Elisp-Programming">Caio's Emacs - Programming and Customization</a>.</li>
 <li> <a href="https://rosettacode.org/wiki/Category:Emacs_Lisp">Category:Emacs Lisp - Rosetta Code</a>.</li>
 <li> <a href="http://www.emacswiki.org/emacs/ElDoc">eldoc-mode</a>.</li>
 <li> <a href="https://github.com/alphapapa/elexandria/blob/a22b12f3472baa617545d2f247ea41f5ef70a488/elexandria.el#L103">elexandria/elexandria.el's with-file-buffer macro</a>.</li>
 <li> <a href="https://github.com/alhassy/ElispCheatSheet">ElispCheatSheet: Quick reference to the core language of Emacs —Editor MACroS.</a>.</li>
 <li> <a href="https://github.com/caiorss/Emacs-Elisp-Programming">Emacs - Elisp Programming and Customization</a>.</li>
 <li> <a href="https://github.com/chrisdone/elisp-guide/blob/master/README.md">Emacs Lisp Guide, chrisdone/elisp-guide · GitHub</a>.</li>
 <li> <a href="https://github.com/larsmagne/emacs-sqlite3">Emacs sqlite binding of Emacs Lisp inspired by mruby-sqlite3</a>.</li>
 <li> <a href="http://www.emacswiki.org/emacs/EmacsSymbolNotation">Emacs symbol notation</a>.</li>
 <li> <a href="https://github.com/skeeto/emacs-bencode">emacs-bencode: Bencode package for Emacs Lisp (encoding losely structured data)</a>.</li>
 <li> <a href="https://curiousprogrammer.wordpress.com/2009/06/08/error-handling-in-emacs-lisp/">Error Handling in Emacs Lisp</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/9auzla/example_showing_how_useful_the_ampleregexps/">Example showing how useful the ample-regexps package is : emacs</a>.</li>
 <li> <a href="http://www.emacswiki.org/emacs/find-library.el">find-library</a>.</li>
 <li> <a href="https://github.com/functionreturnfunction/format-table">format-table: Parse and reformat tabular data in emacs (Looks great for converting between org, json, and other RDBMS)</a>.</li>
 <li> <a href="https://github.com/alphapapa/ts.el">GitHub - alphapapa/ts.el: Emacs date-time library</a>.</li>
 <li> <a href="https://github.com/brandelune/nipel">GitHub - brandelune/nipel: New Introduction to Programming in Emacs Lisp</a>.</li>
 <li> <a href="https://github.com/Wilfred/ht.el">GitHub - Wilfred/ht.el: The missing hash table library for Emacs</a>.</li>
 <li> <a href="https://github.com/xuchunyang/elisp-demos/">GitHub - xuchunyang/elisp-demos: Demonstrate Emacs Lisp APIs</a>.</li>
 <li> <a href="https://harryrschwartz.com/2014/04/08/an-introduction-to-emacs-lisp.html">Harry R. Schwartz's An Introduction to Emacs Lisp</a>.</li>
 <li> <a href="https://yoo2080.wordpress.com/2013/09/22/how-to-choose-emacs-lisp-package-namespace-prefix">How to choose Emacs Lisp package namespace prefix</a>.</li>
 <li> <a href="http://nullprogram.com/blog/2013/02/06/">How to Make an Emacs Minor Mode</a>.</li>
 <li> <a href="http://emacslife.com/how-to-read-emacs-lisp.html">How to read emacs lisp</a>.</li>
 <li> <a href="https://yoo2080.wordpress.com/2014/07/20/it-is-not-hard-to-edit-lisp-code/">It's not hard to edit Lisp code</a>.</li>
 <li> <a href="http://bzg.fr/learn-emacs-lisp-in-15-minutes.html">Learn emacs lisp in 15 minutes</a>.</li>
 <li> <a href="http://thewanderingcoder.com/2015/01/emacs-org-mode-links-and-exported-html/">Links and exported HTML</a>.</li>
 <li> <a href="https://yoo2080.wordpress.com/2013/08/07/living-with-emacs-lisp">Living with Emacs Lisp</a>.</li>
 <li> <a href="http://www.gigamonkeys.com/book/loop-for-black-belts.html">LOOP for Black Belts</a>.</li>
 <li> <a href="http://mbork.pl/2018-12-03_looking-back-p">Marcin Borkowski: 2018-12-03 looking-back-p</a>.</li>
 <li> <a href="http://mbork.pl/2019-03-25_Using_benchmark_to_measure_speed_of_Elisp_code">Marcin Borkowski: 2019-03-25 Using benchmark to measure speed of Elisp code</a>.</li>
 <li> <a href="http://www.nongnu.org/emacs-tiny-tools/elisp-coding/">Nongnu elisp guidelines</a>.</li>
 <li> <a href="http://newartisans.com/2016/01/pattern-matching-with-pcase/">Pattern matching with pcase</a>.</li>
 <li> <a href="http://emacslife.com/how-to-read-emacs-lisp.html">Read Lisp, Tweak Emacs</a>.</li>
 <li> <a href="https://joelmccracken.github.io/entries/reading-writing-data-in-emacs-batch-via-stdin-stdout/">Reading from stdin and writing to stdout with Emacs batch</a>.</li>
 <li> <a href="http://thewanderingcoder.com/2015/02/refactoring-beginning-emacs-lisp-i-adding-tests/">Refactoring “Beginning Emacs Lisp”: I: Adding Tests</a>.</li>
 <li> <a href="https://gist.github.com/equwal/89b1ef5ac8d4d737cfd37f66e9ba4895">Selecting and trying out different fonts in Emacs</a>.</li>
 <li> <a href="https://github.com/purcell/elisp-slime-nav">Slime-style navigation for Emacs Lisp</a>.</li>
 <li> <a href="https://zck.me/testing-buffer-modifying-emacs-code">Testing Emacs code that modifies buffers</a>.</li>
 <li> <a href="http://nic.ferrier.me.uk/blog/2012_07/tips-and-tricks-for-emacslisp">Tips on Emacs Lisp programming</a>.</li>
 <li> <a href="http://endlessparentheses.com/understanding-letf-and-how-it-replaces-flet.html">Understanding letf and how it replaces flet · Endless Parentheses</a>.</li>
 <li> <a href="https://github.com/larsmagne/vpt.el/blob/master/vpt.el">Variable Pitch Tables</a>.</li>
 <li> <a href="https://github.com/larsmagne/vpt.el">vpt.el: An Emacs package to display tabular data with variable pitch fonts</a>.</li>
 <li> <a href="https://github.com/larsmagne/watch-directory.el/blob/master/watch-directory.el">Watch a directory using elisp (larsmagne)</a>.</li>
 <li> <a href="https://github.com/larsmagne/watch-directory.el/blob/master/watch-directory.el">watch-directory.el watches a directory for new files</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/43nh3h/whats_the_best_practice_to_write_emacslispat_2016/">What's the best practice to write emacs-lisp (at 2016)? (Reddit)</a>.</li>
 <li> <a href="https://emacs.stackexchange.com/questions/2868/whats-wrong-with-find-file-noselect">What's wrong with `find-file-noselect`? (Emacs Stack Exchange)</a>.</li>
 <li> <a href="http://wikemacs.org/wiki/Emacs_Lisp_Cookbook">Wikemacs's Emacs Lisp Cookbook</a>.</li>
 <li> <a href="https://with-emacs.com/posts/tutorials/almost-all-you-need-to-know-about-variables/">with-emacs · (Almost) All You Need to Know About Variables</a>.</li>
 <li> <a href="https://qiita.com/itiut@github/items/d917eafd6ab255629346">with-suppressed-message macro</a>.</li>
 <li> <a href="https://www.youtube.com/watch?v=XjKtkEMUYGc&feature=youtu.be">Writing a Spotify Client</a>.</li>
 <li> <a href="https://iloveemacs.wordpress.com/2016/02/27/writing-web-apps-in-emacs-lisp/">Writing Web apps in Emacs Lisp (simple-httpd)</a>.</li>
 <li> <a href="http://ergoemacs.org/emacs/elisp_symbol.html">Xah Lee's Emacs Lisp Symbol (tutorial)</a>.</li>
 <li> <a href="http://ergoemacs.org/emacs/elisp_common_functions.html">Xah's Common Emacs Lisp Functions</a>.</li>
 <li> <a href="http://ergoemacs.org/emacs/elisp_idioms_batch.html">Xah's Emacs Lisp idioms for Text Processing in Batch Style</a>.</li>
 <li> <a href="http://ergoemacs.org/emacs/elisp.html">Xah's Emacs Lisp Tutorial</a>.</li>
 <li> <a href="https://github.com/bddean/xml-plus">XML utilities for Emacs lisp</a>.</li>
 <li> <a href="https://github.com/xuchunyang/elisp-demos/blob/master/elisp-demos.org">Xu Chunyang's Elisp demos/examples/snippets </a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-lisp-bookmarks/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-lisp-bookmarks/index.html</guid>
  <pubDate>Sat, 20 Sep 2014 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>gpg/pgp bookmarks</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orgb258484" class="outline-2">
 <h2 id="gpgpgp-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">20 September 2014</span></span> gpg/pgp bookmarks</h2>
 <div class="outline-text-2" id="text-gpgpgp-bookmarks">
 <span class="modified-timestamp">   <em>updated: 06 May 2019  </em></span>
 <ul class="org-ul"> <li> <a href="https://gpgtools.tenderapp.com/kb/gpg-keychain-faq/backup-or-transfer-your-keys">Backup or transfer your keys / GPG Keychain FAQ / Knowledge Base - GPGTools Support</a>.</li>
 <li> <a href="https://alexcabal.com/creating-the-perfect-gpg-keypair">Creating the perfect GPG keypair - Alex Cabal</a>.</li>
 <li> <a href="https://github.com/kensanata/ggg">Gmail, Gnus and GPG guide</a>.</li>
 <li> <a href="https://emacsist.github.io/2019/01/01/gnupg2%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8C%97/">GnuPG2 snippets - emacsist</a>.</li>
 <li> <a href="https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-57pt1r4.pdf">NIST Special Publication: Recommendation for Key Management</a>.</li>
 <li> <a href="https://riseup.net/en/security/message-security/openpgp/best-practices">OpenPGP Best Practices - riseup.net</a>.</li>
 <li> <a href="https://medium.com/@ahawkins/securing-my-digital-life-gpg-yubikey-ssh-on-macos-5f115cb01266">Securing My Digital Life: GPG, Yubikey, & SSH on macOS</a>.</li>
 <li> <a href="https://www.gnupg.org/gph/en/manual.html">The GNU Privacy handbook</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/gpgpgp-bookmarks/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/gpgpgp-bookmarks/index.html</guid>
  <pubDate>Sat, 20 Sep 2014 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Emacs bookmarks</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org453dfa2" class="outline-2">
 <h2 id="emacs-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">19 September 2014</span></span> Emacs bookmarks</h2>
 <div class="outline-text-2" id="text-emacs-bookmarks">
 <span class="modified-timestamp">   <em>updated: 10 March 2020  </em></span>
 <ul class="org-ul"> <li> <a href="https://github.com/junjiemars/.emacs.d/blob/master/config/gud-cdb.el">.emacs.d/gud-cdb.el (supports lldb)</a>.</li>
 <li> <a href="https://github.com/junjiemars/.emacs.d/blob/master/config/gud-lldb.el">.emacs.d/gud-lldb.el at master · junjiemars/.emacs.d · GitHub</a>.</li>
 <li> <a href="https://emacsthemes.com/">A GNU Emacs Themes Gallery (great for previewing)</a>.</li>
 <li> <a href="http://irreal.org/blog/?p=5378">A Reminder About Macro Counters</a>.</li>
 <li> <a href="https://spin.atomicobject.com/2016/05/27/write-emacs-package/">A Simple Guide to Writing & Publishing Emacs Packages</a>.</li>
 <li> <a href="http://blog.aaronbieber.com">Aaron Bieber's blog</a>.</li>
 <li> <a href="https://scripter.co/accessing-devdocs-from-emacs/">Accessing Devdocs from Emacs</a>.</li>
 <li> <a href="https://blog.d46.us/advanced-emacs-startup">Advanced Techniques for Reducing Emacs Startup Time</a>.</li>
 <li> <a href="https://github.com/baohaojun/ajoke">Ajoke</a>.</li>
 <li> <a href="https://amitp.blogspot.com/2019/07/emacs-mode-line-simplified.html">Amit's Thoughts: Emacs mode line simplified</a>.</li>
 <li> <a href="http://www.masteringemacs.org/article/introduction-magit-emacs-mode-git">An introduction to Magit, an Emacs mode for Git</a>.</li>
 <li> <a href="http://m00natic.github.io/emacs/emacs-wiki.html">Andrey's Opionated Emacs Guide</a>.</li>
 <li> <a href="http://danmidwood.com/content/2014/11/21/animated-paredit.html">Animated guide to paredit</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/ehzxhn/any_packagesolution_to_fix_cursor_13_from_top_of/">Any package/solution to fix cursor 1/3 from top of buffer? (ie. alternatives to centered-cursor-mode)</a>.</li>
 <li> <a href="http://blog.binchen.org/posts/aspell-0-60-8-will-have-direct-support-for-camelcase-words.html">Aspell 0.60.8 will have direct support for camelCase words (Update Emacs flyspell setup)</a>.</li>
 <li> <a href="https://vxlabs.com/2018/03/30/asynchronous-rsync-with-emacs-dired-and-tramp/">Asynchronous rsync with Emacs, dired and tramp. – vxlabs</a>.</li>
 <li> <a href="https://oracleyue.github.io/2018/05/13/emacs-setup-md/">Automator to open files in Emacs clients by double-clicks</a>.</li>
 <li> <a href="https://github.com/emacs-tw/awesome-emacs/blob/master/README.org">Awesome Emacs</a>.</li>
 <li> <a href="https://github.com/manateelazycat/aweshell">Awesome shell extension eshell with wonderful features</a>.</li>
 <li> <a href="https://github.com/bzg/emacs-training">Bastien's Emacs training</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/3r9fic/best_practicestip_for_companymode_andor_yasnippet/">Best practices/tip for Companymode and/or YASnippet</a>.</li>
 <li> <a href="https://github.com/walseb/blimp/blob/master/readme.org">Blimp - Bustling Image Manipulation Package (Emacs)</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/969wlv/c_integration_rtags_vs_emacsc=query_vs_ironymode/">C++ Integration: rtags vs emacs-cquery vs irony-mode (Reddit)</a>.</li>
 <li> <a href="http://cachestocaches.com/2015/8/c-completion-emacs/">C/C++ Completion in Emacs</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/66pq04/cant_get_tern_mode_to_work_properly/">Can't get Tern mode to work properly (Reddit)</a>.</li>
 <li> <a href="http://irreal.org/blog/?p=7207">Capturing Code Snippets</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/9dg13i/cclsnavigate_semantic_navigat=ion_for_cc/">ccls-navigate: semantic navigation for C/C++/ObjC </a>.</li>
 <li> <a href="https://github.com/MaskRay/ccls">ccls: C/C++/ObjC language server supporting cross references, hierarchies, completion and semantic highlighting</a>.</li>
 <li> <a href="https://two-wrongs.com/centered-cursor-mode-in-vanilla-emacs">Centered Cursor Mode in Vanilla Emacs</a>.</li>
 <li> <a href="https://ddavis.fyi/blog/2018-07-07-emacs-cpp-ide/">Clangd based Emacs C++ IDE (Doug Davis)</a>.</li>
 <li> <a href="https://people.gnome.org/~federico/blog/compilation-notifications-in-emacs.html">Compilation notifications in Emacs - Federico's Blog</a>.</li>
 <li> <a href="https://medium.com/@suvratapte/configuring-emacs-from-scratch-intro-3157bed9d040">Configuring Emacs from Scratch — Intro - Suvrat Apte - Medium</a>.</li>
 <li> <a href="http://codewinds.com/blog/2015-04-02-emacs-flycheck-eslint-jsx.html">Configuring emacs to use eslint and babel with flycheck for javascript and React.js JSX</a>.</li>
 <li> <a href="http://mbork.pl/Content_AND_Presentation">Content AND Presentation</a>.</li>
 <li> <a href="https://github.com/redguardtoo/counsel-etags#ctags-setup">counsel-etags: Fast, energy-saving, and powerful code navigation solution</a>.</li>
 <li> <a href="https://erick.navarro.io/blog/creating-an-emacs-formatter-the-easy-way/">Creating an emacs formatter the easy way</a>.</li>
 <li> <a href="https://lars.ingebrigtsen.no/2018/11/12/cropping-images-in-emacs/">Cropping Images in Emacs (Lars Ingebrigtsen)</a>.</li>
 <li> <a href="https://emacs.zeef.com/ehartc">Curated list of packages by Ernst de Hart</a>.</li>
 <li> <a href="http://emacs-fu.blogspot.co.uk/2011/08/customizing-mode-line.html">Customizing emacs mode line</a>.</li>
 <li> <a href="https://zhangda.wordpress.com/">Da's recipes on Emacs, IT, and more (Da Zhang's web notes)</a>.</li>
 <li> <a href="http://www.modernemacs.com/post/major-mode-part-1/">Deep diving into a major mode - Part 1 | Modern Emacs</a> (handy for writing a REPL).</li>
 <li> <a href="http://www.modernemacs.com/post/major-mode-part-2/">Deep diving into a major mode - Part 2 (IDE Features) | Modern Emacs</a>.</li>
 <li> <a href="https://gonewest818.github.io/2020/02/dimmer.el-20200227.1712">dimmer.el (highlights active window)</a>.</li>
 <li> <a href="http://irreal.org/blog/?p=5380">Directory-Local Variables</a>.</li>
 <li> <a href="https://github.com/Silex/docker.el/blob/master/README.md">docker.el: Emacs integration for Docker</a>.</li>
 <li> <a href="https://scripter.co/do-ediff-as-i-mean/">Ediff DWIM function by scripter.co</a>.</li>
 <li> <a href="https://emacsnotes.wordpress.com/2018/05/14/editing-html-textareas-with-emacs-bye-bye-its-all-text-hello-textern/">Editing HTML Textareas with Emacs: Bye, bye “It’s All Text! “, Hello “Textern"</a>.</li>
 <li> <a href="https://gleek.github.io/blog/2017/04/11/editing-remote-code-with-emacs/">Editing remote code with Emacs (tramp tips) - Umar Ahmad</a>.</li>
 <li> <a href="https://lgfang.github.io/mynotes/emacs/emacs-xml.html#sec-5">Editing XML in Emacs</a>.</li>
 <li> <a href="http://www.masteringemacs.org/articles/2011/01/14/effective-editing-movement/">Effective editing I:Movement</a></li>
 <li> <a href="http://ergoemacs.org/emacs/effective_emacs.html">Effective emacs tips</a>: From ergoemacs.</li>
 <li> <a href="https://sites.google.com/site/steveyegge2/effective-emacs">Effective emacs</a>: Steve Yegge's effective emacs tips.</li>
 <li> <a href="https://ddavis.io/posts/eglot-cpp-ide/">Eglot based Emacs C++ IDE with clangd (ddavis.io)</a>.</li>
 <li> <a href="https://realpython.com/blog/python/emacs-the-best-python-editor/?utm_content=buffer661a4&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer">Emacs - the Best Python Editor?</a>.</li>
 <li> <a href="https://qiita.com/advent-calendar/2019/emacs">Emacs Advent Calendar 2019 - Qiita</a>.</li>
 <li> <a href="https://twitter.com/sanityinc/status/1182877775746588672">Emacs and macOS Catalina issues (twitter)</a>.</li>
 <li> <a href="https://www.mortens.dev/blog/emacs-and-the-language-server-protocol/">Emacs and the Language Server Protocol - Morten's Dev</a>.</li>
 <li> <a href="https://joshwolfe.ca/post/emacs-for-csharp/">Emacs as a C# development environment - Josh Wolfe</a>.</li>
 <li> <a href="https://forums.unrealengine.com/showthread.php?52891-Emacs-as-my-UE4-IDE-with-intellisense">Emacs as my UE4 IDE with intellisense</a>.</li>
 <li> <a href="https://lars.ingebrigtsen.no/2016/06/28/emacs-can-haz-fancy-meme/">EMACS CAN HAZ FANCY MEME – Random Thoughts</a>.</li>
 <li> <a href="http://www.swaroopch.com/2013/10/17/emacs-configuration-tutorial">Emacs configuration</a>: Simplify package management with cask.</li>
 <li> <a href="http://emacsfodder.github.io/">Emacs Fodder</a>.</li>
 <li> <a href="https://sites.google.com/site/drielsma/xcodeplusemacs">Emacs for Cocoa development</a>.</li>
 <li> <a href="https://github.com/pierre-lecocq/emacs4developers">Emacs for developers</a>.</li>
 <li> <a href="https://patrickskiba.com/emacs/2019/09/07/emacs-for-react-dev.html">Emacs for the React developer (Patrick Skiba)</a>.</li>
 <li> <a href="https://patrickskiba.com/emacs/2019/09/07/emacs-for-react-dev.html">Emacs for the React developer | Patrick Skiba</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/ca6q7v/emacs_for_web_dev_rjsx_webmode_tide_js2etc/">Emacs for Web/Javascript Dev: rjsx, web-mode, tide, js2…..etc?</a>.</li>
 <li> <a href="http://roupam.github.io/">Emacs for Xcode+ios Development</a>.</li>
 <li> <a href="https://punchagan.muse-amuse.in/blog/emacs-frame-as-a-pop-up-input/">Emacs frame as a pop-up input - Noetic Nought</a>.</li>
 <li> <a href="https://huytd.github.io/emacs-from-scratch.html">Emacs from scratch (huytd)</a>.</li>
 <li> <a href="https://www.redbubble.com/shop/emacs">Emacs Gifts & Merchandise | Redbubble</a>.</li>
 <li> <a href="https://arenzana.org/2019/12/emacs-go-mode-revisited/">Emacs Go Mode – Revisited – arenzana.org</a>.</li>
 <li> <a href="http://www.reddit.com/r/emacs/comments/1rck3u/what_do_you_use_to_navigate_code">Emacs goodies</a>: Emacs post with tips for navigating code.</li>
 <li> <a href="http://emacshorrors.com">Emacs horrors</a>.</li>
 <li> <a href="https://github.com/redguardtoo/mastering-emacs-in-one-year-guide/blob/master/guide-en.org">Emacs in one year</a>: Someone's emacs experience over a year.</li>
 <li> <a href="http://emacs.sexy/">Emacs is sexy</a>.</li>
 <li> <a href="https://gist.github.com/avendael/7028579">Emacs keybindings for vimium</a>.</li>
 <li> <a href="http://overtone.github.io/emacs-live/">Emacs live</a>.</li>
 <li> <a href="https://phst.eu/emacs-modules">Emacs modules (Philipp’s documents)</a>.</li>
 <li> <a href="http://www.emacswiki.org/emacs/EmacsNiftyTricks">Emacs Nifty tricks</a>: Another source of emacs goodness.</li>
 <li> <a href="http://emacsnyc.org/videos.html">Emacs NYC videos</a>.</li>
 <li> <a href="https://gitea.petton.fr/DamienCassou/khardel">Emacs package integrating khard, a console cardav client</a>.</li>
 <li> <a href="http://emacsredux.com/">Emacs redux</a>.</li>
 <li> <a href="http://emacsrocks.com">Emacs rocks</a>.</li>
 <li> <a href="https://ubolonton.github.io/emacs-module-rs/0.8.0/">Emacs Rust module</a>.</li>
 <li> <a href="https://gist.github.com/rangeoshun/67cb17392c523579bc6cbd758b2315c1">Emacs snippet: Typescript with CSS in JS, JSX and graphql highlighing.</a>.</li>
 <li> <a href="http://bzg.fr/emacs-strip-tease.html">Emacs striptease (removing furniture)</a>.</li>
 <li> <a href="https://willschenk.com/articles/2020/tramp_tricks/">Emacs Tramp tricks (including docker snippet)</a>.</li>
 <li> <a href="https://forums.freebsd.org/threads/emacs-tramp-very-slow-on-connection.64498/">Emacs Tramp very slow on connection (The FreeBSD Forums)</a>.</li>
 <li> <a href="http://planet.emacsen.org/">Emacs workshop</a>.</li>
 <li> <a href="http://lavnir.be/wp/">Emacs | less</a>.</li>
 <li> <a href="https://realpython.com/emacs-the-best-python-editor/">Emacs – The Best Python Editor? – Real Python</a>.</li>
 <li> <a href="https://idiocy.org/emacs-fonts-and-fontsets.html">Emacs, fonts and fontsets</a>.</li>
 <li> <a href="https://github.com/mathiasdahl/emacs-launcher">emacs-launcher: A launcher for programs, files, folders, web pages and other, using Emacs (supersedes anything-launcher)</a>.</li>
 <li> <a href="https://github.com/emacs-lsp/dap-mode#swift">emacs-lsp/dap-mode: Debug Adapter Protocol for Emacs (Swift included)</a>.</li>
 <li> <a href="https://github.com/emacs-lsp/lsp-ivy/tree/78c1429c62c19006058b89d462657e1448d1e595">emacs-lsp/lsp-ivy: ivy workspace symbols offered by lsp-mode</a>.</li>
 <li> <a href="https://realpython.com/emacs-the-best-python-editor/">Emacs: The Best Python Editor? – Real Python</a>.</li>
 <li> <a href="http://emacslife.com/">Emacslife</a>.</li>
 <li> <a href="https://github.com/cireu/emacsql-sqlite3">emacsql-sqlite3: Yet another EmacSQL backend for SQLite</a>.</li>
 <li> <a href="https://www.emacswiki.org/emacs/CreatingYourOwnCompileErrorRegexp">EmacsWiki: Creating Your Own Compile Error Regexp</a>.</li>
 <li> <a href="https://www.emacswiki.org/emacs/EshellForLoop">EmacsWiki: Eshell For Loop</a>.</li>
 <li> <a href="https://github.com/jonnay/emagicians-starter-kit">Emagicians starter kit</a>.</li>
 <li> <a href="https://github.com/m-parashar/emax64">emax64: 64-bit Emacs for Windows with ImageMagick 7</a>.</li>
 <li> <a href="http://endlessparentheses.com">Endless parenthesis</a>.</li>
 <li> <a href="http://www.skybert.net/emacs/java/">Enterprise Java Development in Emacs</a>.</li>
 <li> <a href="https://ambrevar.xyz/emacs-eshell/">Eshell as a main shell</a>.</li>
 <li> <a href="https://github.com/kaihaosw/eshell-prompt-extras/blob/master/README.md">eshell-prompt-extras: Display extra information and color for your eshell prompt</a>.</li>
 <li> <a href="http://www.misshula.org/category/tutorials.html">Evan Misshula (lots of great tutorials)</a>.</li>
 <li> <a href="http://edkolev.github.io/posts/2017-09-10-travis-for-emacs-packages.html">Evgeni Kolev Blog - Travis CI integration for emacs packages</a>.</li>
 <li> <a href="http://mitchfincher.blogspot.co.uk/2017/03/example-of-syntax-highlighting-with.html">Example of Syntax Highlighting</a>.</li>
 <li> <a href="https://francismurillo.github.io/2017-04-15-Exploring-Emacs-chart-Library/">Exploring Emacs chart Library (chart-bar-quickie)</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/973418/feedbuilderel_an_rss_and_atom=_generator/">feed-builder.el: An RSS (and Atom?) generator : emacs</a>.</li>
 <li> <a href="http://irreal.org/blog/?p=7359">Find Commits Affecting a Function (Irreal)</a>.</li>
 <li> <a href="https://github.com/d11wtq/fiplr">Fiplr</a>: An Emacs Fuzzy Find in Project Package.</li>
 <li> <a href="https://gist.github.com/dive/f64c645a9086afce8e5dd2590071dbf9">Fix Emacs permissions on macOS Catalina</a>.</li>
 <li> <a href="https://github.com/lewang/flx">Flx for emacs</a>: Sublime-style searching for emacs.</li>
 <li> <a href="https://manuel-uberti.github.io//emacs/2019/07/18/reformatter/">Format XML like a pro</a>.</li>
 <li> <a href="https://juanjoalvarez.net/es/detail/2014/sep/19/vim-emacsevil-chaotic-migration-guide/">From Vim to Emacs+Evil chaotic migration guide</a>.</li>
 <li> <a href="http://fukuyama.co">Fukuyama's Emacs/iOS</a>.</li>
 <li> <a href="https://gitlab.com/koral/gcmh">GCMH - the Garbage Collector Magic Hack</a>.</li>
 <li> <a href="https://blog.hoetzel.info/post/eshell-notifications">Get desktop notifications from Emacs shell commands ·</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/e8cm8x/get_stackoverflow_answers_with_completion_without/">Get Stackoverflow answers with completion (without Helm) : emacs</a>.</li>
 <li> <a href="https://github.com/GhostText/GhostText/blob/master/README.md">GhostText: Use Emacs to write in your browser</a>.</li>
 <li> <a href="http://whatworks4me.wordpress.com/2011/04/13/view-git-diffs-in-emacs-using-ediff/">Git diffs using Emacs ediff</a>.</li>
 <li> <a href="https://github.com/alphapapa/yequake">GitHub - alphapapa/yequake: Drop-down Emacs frames, like Yakuake (modal emacs frames)</a>.</li>
 <li> <a href="https://github.com/AndreaCrotti/yasnippet-snippets">GitHub - AndreaCrotti/yasnippet-snippets: a collection of yasnippet</a>.</li>
 <li> <a href="https://github.com/bastibe/annotate.el">GitHub - bastibe/annotate.el: Annotate.el</a>.</li>
 <li> <a href="https://github.com/bzg/emacs-training">GitHub - bzg/emacs-training: Emacs training</a>.</li>
 <li> <a href="https://github.com/CeleritasCelery/company-async-files">GitHub - CeleritasCelery/company-async-files: company-files with an async banckend</a>.</li>
 <li> <a href="https://github.com/chuntaro/epaint">GitHub - chuntaro/epaint: A simple paint tool for Emacs</a>.</li>
 <li> <a href="https://github.com/dieggsy/esh-autosuggest">GitHub - dieggsy/esh-autosuggest: Fish-like autosuggestions in eshell.</a>.</li>
 <li> <a href="https://github.com/joaotavora/eglot">GitHub - joaotavora/eglot: A client for Language Server Protocol servers</a>.</li>
 <li> <a href="https://github.com/mmontone/template-overlays">GitHub - mmontone/template-overlays: Emacs overlays for template files</a>.</li>
 <li> <a href="https://github.com/politza/pdf-tools">GitHub - politza/pdf-tools: Emacs support library for PDF files.</a>.</li>
 <li> <a href="https://github.com/sebastiencs/company-box">GitHub - sebastiencs/company-box: A company front-end with icons</a>.</li>
 <li> <a href="https://github.com/takaxp/moom">GitHub - takaxp/moom: A Moom port to Emacs - Make your dominant hand FREE from your mouse (easily move frames)</a>.</li>
 <li> <a href="https://github.com/wbolster/emacs-direnv">GitHub - wbolster/emacs-direnv: direnv integration for emacs</a>.</li>
 <li> <a href="https://github.com/yyoncho/dap-mode/">GitHub - yyoncho/dap-mode: Debug Adapter Protocol for Emacs (Java/Python)</a>.</li>
 <li> <a href="https://github.com/zk-phi/electric-case">GitHub - zk-phi/electric-case: automatic foo-bar to fooBar and foo_bar</a>.</li>
 <li> <a href="https://github.com/rememberYou/.emacs.d/blob/b00402c2b51d0435ca8b0267ef71f5fa3558d41a/config.org#gnuplot">gnuplot Emacs config</a>.</li>
 <li> <a href="https://github.com/benma/go-dlv.el">Go Delve - Debug Go programs interactively with the GUD</a>.</li>
 <li> <a href="http://doc.rix.si/org/fsem.html">Hardcore Freestyle Emacs</a>.</li>
 <li> <a href="https://github.com/bbatsov/projectile">Helm Projectile</a>: Is awesome for finding files in emacs.</li>
 <li> <a href="https://www.emacswiki.org/emacs/HelpPlus">Help Plus: Enhancing Emacs help functions</a>.</li>
 <li> <a href="https://hotair.tech/blog/goodbye-vscode">Hot Air - Goodbye VSCode, Hello Emacs (Again) has handy JavaScript tips</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/efsg0t/how_i_enqueue_online_videos_in_mpv_with_emacs/">How I enqueue online videos in mpv with Emacs : emacs</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/f3ed3r/how_is_doom_emacs_so_damn_fast/">How is Doom Emacs so damn fast? : emacs</a>.</li>
 <li> <a href="https://github.com/hlissner/doom-emacs/wiki/FAQ#how-is-dooms-startup-so-fast">How is Doom’s startup so fast?</a></li>
 <li> <a href="http://blog.yitang.uk/2015/09/24/how-to-create-a-screencast-gif-in-emacs/">How to Create a Screencast GIF in Emacs</a>.</li>
 <li> <a href="https://sixty-north.com/blog/series/how-to-write-company-mode-backends.html">How to write company-mode backends</a>.</li>
 <li> <a href="http://tim.hibal.org/blog/how-we-wrote-a-textbook">How We Wrote a Textbook & (Tim Wheeler)</a>.</li>
 <li> <a href="http://www.howardism.org/Technical/Emacs/piper-presentation-transcript.html">Howard Abrams's Death to the Shell presentation</a>.</li>
 <li> <a href="https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org">Howard Abrams's eshell config</a>.</li>
 <li> <a href="https://github.com/chrisbarrett/swift-mode">hrisbarrett/swift-mode</a>.</li>
 <li> <a href="https://github.com/iamleeg/swift-mode">iamleeg/swift-mode</a>.</li>
 <li> <a href="https://vxlabs.com/2019/08/25/format-flowed-with-long-lines/">Improve the plaintext email experience through format=flowed with long lines. - vxlabs (mu4e)</a>.</li>
 <li> <a href="https://github.com/mkcms/interactive-align">interactive-align: Interactively align by regular expression in emacs</a>.</li>
 <li> <a href="http://skybert.net/emacs/investigating-emacs-cpu-usage/">investigating Emacs CPU usage</a>.</li>
 <li> <a href="http://ivanmalison.github.io/dotfiles/#go">Ivan Malison's Go config </a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/57fnar/ivy_completion_at_point_in_an_overlay/">Ivy completion at point in an overlay : emacs</a>.</li>
 <li> <a href="https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html">Ivy, Counsel and Swiper (writequit.org)</a>.</li>
 <li> <a href="https://github.com/Yevgnen/ivy-rich/">ivy-rich: An ivy wrapper providing additional customizations </a>.</li>
 <li> <a href="https://github.com/squiter/ivy-youtube">ivy-youtube: Search for an Youtube video inside Emacs with Ivy</a>.</li>
 <li> <a href="https://github.com/skeeto/javadoc-lookup">javadoc-lookup</a>.</li>
 <li> <a href="http://blog.binchen.org/posts/javascript-code-navigation-in-counsel-etags.html">Javascript code navigation in counsel-etags (Chen's blog)</a>.</li>
 <li> <a href="http://truongtx.me/2014/02/23/set-up-javascript-development-environment-in-emacs/">Javascript development environment</a>.</li>
 <li> <a href="https://github.com/jcs-elpa/parse-it">jcs-elpa/parse-it: Basic Parser in Emacs Lisp (Swift and ObjC included)</a>.</li>
 <li> <a href="http://www.xiangji.me/">JI Xiang</a>.</li>
 <li> <a href="https://gitlab.com/jjzmajic/handle">jjzmajic / handle: A handle for major-mode generic functions.</a>.</li>
 <li> <a href="https://hackr.io/tutorials/learn-emacs">Learn Emacs - 2019 Most Recommended Emacs Tutorials | Hackr.io</a>.</li>
 <li> <a href="https://github.com/rememberYou/.emacs.d/blob/b00402c2b51d0435ca8b0267ef71f5fa3558d41a/config.org#ledger">Ledger Emacs config</a>.</li>
 <li> <a href="http://www.lunaryorn.com/">Lunarsite</a>.</li>
 <li> <a href="https://spin.atomicobject.com/2019/12/12/fixing-emacs-macos-catalina/">macOS Catalina: Fixing Emacs After an Upgrade</a>.</li>
 <li> <a href="https://magit.vc/manual/magit/Wip-Modes.html">Magit User Manual: Wip Modes</a>.</li>
 <li> <a href="https://github.com/legoscia/messages-are-flowing">Make it easier to send "flowed" email messages from Emacs (mu4e)</a>.</li>
 <li> <a href="http://www.lunaryorn.com/posts/make-your-emacs-mode-line-more-useful.html">Make your Emacs Mode Line more useful - Sebastian Wiesner</a>.</li>
 <li> <a href="http://zeekat.nl/articles/making-emacs-work-for-me.html">Making Emacs work for me</a>.</li>
 <li> <a href="https://ebzzry.io/en/emacs-dired/">Managing Directories with Emacs (dired)</a>.</li>
 <li> <a href="http://mbork.pl/2019-03-18_Free_Emacs_key_bindings">Marcin Borkowski: 2019-03-18 Free Emacs key bindings</a>.</li>
 <li> <a href="http://mbork.pl/2019-07-08_Pausing_an_Emacs_keyboard_macro">Marcin Borkowski: 2019-07-08 Pausing an Emacs keyboard macro</a>.</li>
 <li> <a href="http://mbork.pl/2015-07-04_C-x_4_bindings">Marcin Borkowski: C-x 4 bindings</a>.</li>
 <li> <a href="https://github.com/elpa-host/marquee-header">Marquee header (scrolling text header/notification)</a>.</li>
 <li> <a href="http://www.masteringemacs.org">Mastering Emacs</a>.</li>
 <li> <a href="https://github.com/mopemope/meghanada-emacs">Meghanada-Mode: A Better Java Development Environment for Emacs</a>.</li>
 <li> <a href="https://lars.ingebrigtsen.no/2017/10/15/meme-x-giffy/">meme x giffy – Random Thoughts</a>.</li>
 <li> <a href="https://two-wrongs.com/migrating-away-from-use-package.html">Migrating Away From Use-Package</a>.</li>
 <li> <a href="http://truongtx.me/2013/03/10/emacs-setting-up-perfect-environment-for-cc-programming">More emacs C++ goodness</a>: More emacs dev environment tips.</li>
 <li> <a href="https://groups.google.com/forum/m/#!topic/mu-discuss/JqHEGycEyKI">mu4e & xwidget / webkit snippet</a>.</li>
 <li> <a href="http://www.macs.hw.ac.uk/~rs46/posts/2014-11-16-mu4e-signatures.html">Multiple Email Signatures with mu4e</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/e79l6c/my_companyposframe_configuration_displaying/">My company-posframe configuration displaying backend names</a>.</li>
 <li> <a href="http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html">My Emacs Configuration with use-package</a>.</li>
 <li> <a href="https://gridsome.netlify.com/blog/2018/11/18/my-emacs-development-workflow/">My emacs development workflow</a>.</li>
 <li> <a href="http://www.pygopar.com/my-java-android-and-eclim-setup/">My Java, Android and Eclim Setup</a>.</li>
 <li> <a href="https://admiralakber.github.io/2018/09/20/myos-email/">myOS / email - Building the perfect email setup (Emacs/notmuch/mbsync)</a>.</li>
 <li> <a href="https://joelmccracken.github.io/entries/name-emacs-daemons-with-the-daemon-equals-option/">Name Emacs Daemons With the '–daemon=' Option</a>.</li>
 <li> <a href="https://github.com/DamienCassou/navigel">navigel: Emacs library to facilitate the creation of tabulated-list based UIs</a>.</li>
 <li> <a href="http://bbbscarter.wordpress.com/category/coding/emacs/">Nerdgasms's Emacs tips</a>.</li>
 <li> <a href="https://github.com/codesuki/bazel-mode">Neri Marschik's bazel-mode: Basic Bazel support for Emacs</a>.</li>
 <li> <a href="http://was.tl/projects/nimble/">Nimble (markdown replacement)</a>.</li>
 <li> <a href="http://angelic-sedition.github.io/">Nocturnal Artifice</a>.</li>
 <li> <a href="https://github.com/danielmartin/ns-playgrounds">ns-playgrounds: Execute Swift and Objective C code snippets in Emacs (Extended org babel support)</a>.</li>
 <li> <a href="https://sam217pa.github.io/2016/09/11/nuclear-power-editing-via-ivy-and-ag/">Nuclear weapon multi-editing via Ivy and Ag · Samuel Barreto</a>.</li>
 <li> <a href="http://renard.github.io/o-blog-v2/">o-blog</a>.</li>
 <li> <a href="https://github.com/al-skobelev/objc-yassnippets/tree/master/objc-mode">Objective-C snippets #1</a>.</li>
 <li> <a href="https://github.com/altschuler/yas-objc">Objective-C snippets #2</a>.</li>
 <li> <a href="https://github.com/al-skobelev/objc-yassnippets">Objective-C snippets #3</a>.</li>
 <li> <a href="https://github.com/bodil/ohai-emacs">Ohai Emacs</a>.</li>
 <li> <a href="http://oremacs.com/">Or Emacs</a>.</li>
 <li> <a href="https://karl-voit.at/orgmode/">Organize Your Life With Org-Mode</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/c0bg27/outlookstyle_html_replies_with_mu4e/">Outlook-style HTML replies with mu4e</a>.</li>
 <li> <a href="https://patrickskiba.com/unix/tools/2019/09/18/password-management-with-pass.html">Password Management with Pass and Emacs (Patrick Skiba)</a>.</li>
 <li> <a href="https://peach-melpa.org/">PeachMelpa (Browse Emacs themes from MELPA)</a>.</li>
 <li> <a href="https://stuff.mit.edu/iap/2007/emacs/emacs-slides-1.pdf">Phil Sung's Emacs slides</a>.</li>
 <li> <a href="http://www.philandstuff.com/">Philip Potter Emacs blog</a>.</li>
 <li> <a href="https://github.com/jcaw/porthole">Porthole: RPC servers for Emacs</a>.</li>
 <li> <a href="https://github.com/bbatsov/prelude">Prelude emacs distribution</a>.</li>
 <li> <a href="https://github.com/raxod502/prescient.el/blob/master/README.md">prescient.el: simple but effective sorting and filtering for Emacs (ivy and company).</a>.</li>
 <li> <a href="http://www.howardism.org/Technical/Emacs/eshell-present.html">Presenting the Eshell</a>.</li>
 <li> <a href="https://www.projectile.mx/en/latest/projects/">Projects - Projectile: The Project Interaction Library for Emacs</a>.</li>
 <li> <a href="http://punchagan.muse-amuse.in/posts/index.html">Punchagan's blog</a>.</li>
 <li> <a href="http://justinhj.github.io/2018/10/24/radix-trees-dash-and-company-mode.html">Radix trees, Dash and Company mode</a>.</li>
 <li> <a href="https://github.com/syl20bnr/spacemacs/blob/master/layers/%2Bframeworks/react/README.org">React contribution layer for Spacemacs</a>.</li>
 <li> <a href="http://emacslife.com/how-to-read-emacs-lisp.html">Read Lisp, Tweak Emacs: How to read Emacs Lisp so that you can customize Emacs</a>.</li>
 <li> <a href="http://draketo.de/light/english/free-software/read-your-python-module-documentation-emacs">Read your python module documentation from Emacs</a>.</li>
 <li> <a href="http://pragmaticemacs.com/category/elfeed/">Read your RSS feeds in emacs with elfeed</a>.</li>
 <li> <a href="https://github.com/purcell/reformatter.el/blob/master/README.md">reformatter.el: Define commands which run reformatters on the current Emacs buffer</a>.</li>
 <li> <a href="https://emacsredux.com/blog/2013/09/25/removing-key-bindings-from-minor-mode-keymaps/">Removing/Altering Key Bindings from Minor Mode Keymaps · Emacs Redux</a>.</li>
 <li> <a href="https://github.com/brown/bazel-mode">Robert Brown's bazel-mode: GNU Emacs mode for editing Bazel BUILD files</a>.</li>
 <li> <a href="https://github.com/Andersbakken/rtags/commit/ad3026cdd1d6c1e0a2728fb4992addcb76605487">rtags: Implement 'rename with multiple cursors'</a>.</li>
 <li> <a href="http://rubikitch.com/">Rubikitch</a>.</li>
 <li> <a href="http://sachachua.com">Sachua Chua</a>.</li>
 <li> <a href="http://sakito.jp/emacs/emacsobjectivec.html">Sakito's Emacs Objective-C</a>.</li>
 <li> <a href="https://lars.ingebrigtsen.no/2019/08/26/setting-up-gpg-for-emacs/">Setting up GPG for Emacs (Random Thoughts)</a>.</li>
 <li> <a href="https://superuser.com/questions/432160/slow-tramp-mode-in-emacs">Slow TRAMP mode in Emacs (Super User)</a>.</li>
 <li> <a href="https://ebzzry.io/en/emacs-pairs/">Smartparens: Emacs and Pairs article</a>.</li>
 <li> <a href="http://stackoverflow.com/questions/673554/how-can-i-refactor-c-source-code-using-emacs">SO: How can I refactor C++ source code using emacs?</a>.</li>
 <li> <a href="http://psung.blogspot.co.uk/2010/03/some-emacs-macro-tricks.html">Some Emacs macro tricks</a>.</li>
 <li> <a href="https://www.baty.net/2019/spaceline-for-emacs/">Spaceline for Emacs (Jack Baty's weblog)</a>.</li>
 <li> <a href="https://www.draketo.de/english/emacs/staying-sane-drudge-work">Staying sane with Emacs (when facing drudge work) (Zwillingssterns Weltenwald)</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/370k9p/stock_emacs_tips/">Stock Emacs tips (Reddit)</a>.</li>
 <li> <a href="http://pragmaticemacs.com/emacs/super-spotlight-search-with-counsel/">Super spotlight search with ivy/counsel (Pragmatic Emacs)</a>.</li>
 <li> <a href="https://github.com/danielmartin/swift-helpful">swift-helpful: A Self-Documenting Emacs Programming Environment for Swift</a>.</li>
 <li> <a href="https://www.wisdomandwonder.com/article/10474/techne-emacs-friendly-keyboard-operations-keys">Techne (Emacs Friendly Keyboard): Operations Keys | Wisdom and Wonder</a>.</li>
 <li> <a href="http://www.wilfred.me.uk/blog/2018/01/06/the-emacs-guru-guide-to-key-bindings/">The Emacs Guru Guide to Key Bindings – Wilfred Hughes::Blog</a>.</li>
 <li> <a href="https://github.com/alphapapa/emacs-package-dev-handbook">The Emacs Package Developer's Handbook</a>.</li>
 <li> <a href="http://batsov.com/articles/2011/11/30/the-ultimate-collection-of-emacs-resources/">The Ultimate Collection of Emacs Resources</a>.</li>
 <li> <a href="https://github.com/thierryvolpiatto/emacs-tv-config/blob/master/mu4e-config.el">thierryvolpiatto's mu4e config </a>.</li>
 <li> <a href="https://github.com/ananthakumaran/tide">Tide: TypeScript Interactive Development Environment for Emacs</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/audffp/tip_how_to_use_a_stable_and_fast_environment_to/">TIP: How to use a stable and fast environment to develop in C++ : emacs</a>.</li>
 <li> <a href="https://emacs.stackexchange.com/questions/16489/tramp-is-unbearably-slow-osx-ssh">TRAMP is unbearably slow (OSX, ssh) - Emacs Stack Exchange</a>.</li>
 <li> <a href="https://stackoverflow.com/a/16408592">Tramp: Open file via SSH and Sudo with Emacs - Stack Overflow</a>.</li>
 <li> <a href="http://truongtx.me/categories.html#emacs-ref">Trần Xuân Trường's Emacs posts</a>.</li>
 <li> <a href="https://github.com/MetroWind/dotfiles-mac/blob/6c5af32349edb2764876ed6c1392fe5fc5a6f6ca/emacs/files/.emacs-pkgs/tsmanip.el">tsmanip.el manipulate timestamps/dates anywhere like org shift up/down</a>.</li>
 <li> <a href="http://tuhdo.github.io/c-ide.html">Tuhdo's C/C++ dev on Emacs</a>.</li>
 <li> <a href="https://tuhdo.github.io/emacs-tutor3.html">Tuhdo's Emacs Mini Manual (PART 3) - CUSTOMIZING AND EXTENDING EMACS</a>.</li>
 <li> <a href="http://tv.uvigo.es/gl/serial/513.html">Universidad de Vigo's Emacs course</a>.</li>
 <li> <a href="https://karl-voit.at/2018/07/08/emacs-key-bindings/">UOMF: My Emacs Key Binding Strategy</a>.</li>
 <li> <a href="https://www.johndcook.com/blog/2018/01/27/emacs-features-that-use-regular-expressions/">Uses of regular expressions in Emacs (John D. Cook)</a>.</li>
 <li> <a href="https://www.johndcook.com/blog/2018/01/27/emacs-features-that-use-regular-expressions/">Uses of regular expressions in Emacs</a>.</li>
 <li> <a href="http://dance.computer.dance/posts/2015/04/using-ctags-on-modern-javascript.html">Using ctags on modern Javascript (handy for Emacs)</a>.</li>
 <li> <a href="http://www.pygopar.com/using-emacs-and-eclim-for-android-development/">Using Emacs and Eclim for Android Development</a>.</li>
 <li> <a href="https://github.com/DamienCassou/vdirel">vdirel vdir (calendars and contacts) for Emacs</a>.</li>
 <li> <a href="http://pragmaticemacs.com/emacs/view-and-annotate-pdfs-in-emacs-with-pdf-tools/">View and annotate PDFs in Emacs with PDF-tools (Pragmatic Emacs)</a>.</li>
 <li> <a href="https://www.reddit.com/r/emacs/comments/eeyhdz/weekly_tipstricketc_thread/">Weekly tips/trick/etc/ thread : multiple-cursors-mode using helm/counsel</a>.</li>
 <li> <a href="http://emacs.stackexchange.com/questions/2571/what-emacs-communities-exist">What Emacs communities exist?</a></li>
 <li> <a href="http://whattheemacsd.com/">What the Emacsd</a>.</li>
 <li> <a href="https://github.com/yanghaoxie/which-key-posframe">which-key-posframe: Let emacs-which-key use posframe to show its popup.</a>.</li>
 <li> <a href="http://wikemacs.org/wiki/TRAMP">WikEmacs - TRAMP</a>.</li>
 <li> <a href="http://www.wisdomandwonder.com/">Wisdom and Wonder</a>.</li>
 <li> <a href="https://emacs.stackexchange.com/questions/22306/working-with-tramp-mode-on-slow-connection-emacs-does-network-trip-when-i-start/22307">Working with tramp mode on slow connection</a>.</li>
 <li> <a href="https://github.com/company-mode/company-mode/wiki/Writing-backends">Writing company backends</a>.</li>
 <li> <a href="https://joaotavora.github.io/yasnippet/snippet-development.html">Writing yasnippets</a>.</li>
 <li> <a href="http://ergoemacs.org/emacs/emacs_list_and_set_font.html">Xah Lee's Emacs: Set Font</a>.</li>
 <li> <a href="http://www.xref.sk/xrefactory/main.html">Xrefactory: A C/C++ Refactoring Browser for Emacs and XEmacs</a>.</li>
 <li> <a href="https://github.com/Kungsgeten/yankpad">yankpad: Paste yasnippets from an org-mode file</a>.</li>
 <li> <a href="https://github.com/zegal/yasobjc">Yasnippet generator for Cocoa iphone SDK</a>.</li>
 <li> <a href="https://plomlompom.com/guides/emacs.html">Yet another introduction to Emacs</a>.</li>
 <li> <a href="http://emacs.readthedocs.io/en/latest/">Yi Tang's road to emacs documentation on readthedocs.io</a>.</li>
 <li> <a href="https://github.com/yurikhan/yk-color">yk-color: Elisp library for linear RGB color manipulation</a>.</li>
 <li> <a href="https://yoo2080.wordpress.com/category/emacs/">Yoo Box's Emacs category</a>.</li>
 <li> <a href="http://ericscrosson.wordpress.com">Zen in the Art of Emacs</a>.</li>
 <li> <a href="http://akrl.sdf.org/">‎The Emacs Garbage Collection Magic Hack</a>.</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/emacs-bookmarks/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/emacs-bookmarks/index.html</guid>
  <pubDate>Fri, 19 Sep 2014 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Resetting gnome-terminal preferences</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org284d42d" class="outline-2">
 <h2 id="resetting-gnome-terminal-preferences"> <span class="timestamp-wrapper"> <span class="timestamp">11 September 2014</span></span> Resetting gnome-terminal preferences</h2>
 <div class="outline-text-2" id="text-resetting-gnome-terminal-preferences">
</div>
 <div id="outline-container-org0cf9d4e" class="outline-3">
 <h3 id="org0cf9d4e">Resetting preferences</h3>
 <div class="outline-text-3" id="text-org0cf9d4e">
 <div class="org-src-container">
 <pre class="src src-sh">gconftool --recursive-unset /apps/gnome-terminal
</pre>
</div>
</div>
</div>
 <div id="outline-container-org6df8a69" class="outline-3">
 <h3 id="org6df8a69">Want 256 colors?</h3>
 <div class="outline-text-3" id="text-org6df8a69">
 <p>
Edit .bash_profile
</p>
 <div class="org-src-container">
 <pre class="src src-sh"> <span style="color: #a71d5d;">export</span>  <span style="color: #333333;">TERM</span>= <span style="color: #183691;">"screen-256color"</span>
</pre>
</div>
</div>
</div>
 <div id="outline-container-orgc35f352" class="outline-3">
 <h3 id="orgc35f352">Ensure .bash_profile is loaded</h3>
 <div class="outline-text-3" id="text-orgc35f352">
 <p>
From gnome-terminal window:
</p>
 <blockquote>
 <p>
gnome-terminal
  Edit
    Profiles…
      Edit
        Title and Command
          X Run command as login shell
</p>
</blockquote>
</div>
</div>
 <div id="outline-container-org270119b" class="outline-3">
 <h3 id="org270119b">Solarized</h3>
 <div class="outline-text-3" id="text-org270119b">
 <p>
Bonus: See  <a href="http://codefork.com/blog/index.php/2011/11/27/getting-the-solarized-theme-to-work-in-emacs">post</a> to get solarized on gnome-terminal.
</p>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/resetting-gnome-terminal-preferences/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/resetting-gnome-terminal-preferences/index.html</guid>
  <pubDate>Thu, 11 Sep 2014 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Python bookmarks</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org77cff1a" class="outline-2">
 <h2 id="python-bookmarks"> <span class="timestamp-wrapper"> <span class="timestamp">13 July 2014</span></span> Python bookmarks</h2>
 <div class="outline-text-2" id="text-python-bookmarks">
 <span class="modified-timestamp">   <em>updated: 12 August 2019  </em></span>
 <ul class="org-ul"> <li> <a href="https://docs.python.org/3/tutorial/venv.html">12. Virtual Environments and Packages — Python 3.7.4 documentation (pipenv)</a>.</li>
 <li> <a href="https://github.com/mkaz/termgraph">A python command-line tool which draws basic graphs/charts in the terminal</a>.</li>
 <li> <a href="https://www.continuum.io/why-anaconda">Anaconda Python sandbox</a>.</li>
 <li> <a href="http://mkaz.com/2014/07/26/python-argparse-cookbook/">Argparse cookbook</a>: For simple python scripts.</li>
 <li> <a href="https://linuxhint.com/best_50_python_books/">Best 50 Python Books for Programmers with All Skill Sets</a>.</li>
 <li> <a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html">Code Like a Pythonista: Idiomatic Python</a>.</li>
 <li> <a href="https://github.com/pudo/dataset">Dataset: databases for lazy people</a>.</li>
 <li> <a href="http://www.diveintopython3.net/">Dive Into Python 3 book</a>.</li>
 <li> <a href="http://www.diveintopython.net/">Dive Into Python book</a>.</li>
 <li> <a href="https://github.com/asciimoo/drawille/">Drawille</a>: Python drawing in ascii/unicode braille characters.</li>
 <li> <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html">Pandas visualization</a>.</li>
 <li> <a href="https://www.python.org/dev/peps/pep-0020/">PEP 20 – The Zen of Python</a>.</li>
 <li> <a href="https://pypi.python.org/pypi/pudb">Pudb</a>: A tui python debugger.</li>
 <li> <a href="http://pycoders.com/">Pycoders weekly mailing list</a>.</li>
 <li> <a href="https://books.google.co.uk/books?id=9_AXCmGDiz8C&hl=en&redir_esc=y">Python Algorithms book</a>.</li>
 <li> <a href="https://news.ycombinator.com/item?id=11240729">Python patterns, Take One (Hacker News)</a>.</li>
 <li> <a href="https://taoofmac.com/space/blog/2013/08/11/2300">Python patterns, Take One</a>.</li>
 <li> <a href="https://www.airpair.com/python/posts/python-tips-and-traps">Python Tips and Traps</a>.</li>
 <li> <a href="http://irreal.org/blog/?p=3860">Python tools for Emacs</a>.</li>
 <li> <a href="http://tech.blog.aknin.name/tag/internals/page/2/">Python’s Innards: Hello, ceval.c!</a>.</li>
 <li> <a href="https://twitter.com/python_tip/status/1111349676106833920">Read Excel sheet with Python/Pandas (Twitter)</a>.</li>
 <li> <a href="http://www.johndcook.com/blog/python_regex/">Regular expressions in Python and Perl</a>.</li>
 <li> <a href="https://www.johndcook.com/blog/2019/01/24/reversing-an-md5-hash/">Reversing an MD5 hash (python)</a>.</li>
 <li> <a href="https://github.com/deanmalmgren/textract">Textract</a>: Python util extracting text from a handful of document types.</li>
 <li> <a href="https://julien.danjou.info/blog/2013/guide-python-static-class-abstract-methods">The definitive guide on how to use static, class or abstract methods in Python</a>.</li>
 <li> <a href="https://julien.danjou.info/books/the-hacker-guide-to-python">The Hacker's guide to python</a>.</li>
 <li> <a href="http://docs.quantifiedcode.com/python-anti-patterns/">The Little Book of Python Anti-Patterns</a>.</li>
 <li> <a href="http://blog.instavest.com/three-useful-python-libraries-for-startups">Three Useful Python Libraries for Startups</a>.</li>
 <li> <a href="http://effbot.org/zone/python-with-statement.htm">Understanding Python's "with" statement</a>.</li>
 <li> <a href="https://github.com/gorakhargosh/watchdog">Watchdog</a> (monitor filesystem in python).</li>
</ul></div>
</div>
</div>]]></description>
  <link>http://xenodium.com/python-bookmarks/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/python-bookmarks/index.html</guid>
  <pubDate>Sun, 13 Jul 2014 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Installing Emacs 24.4 on Mac OS X</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-orge44d8ec" class="outline-2">
 <h2 id="installing-emacs-24-4-on-mac-os-x"> <span class="timestamp-wrapper"> <span class="timestamp">09 July 2014</span></span> Installing Emacs 24.4 on Mac OS X</h2>
 <div class="outline-text-2" id="text-installing-emacs-24-4-on-mac-os-x">
 <p>
See Yamamoto's Mac OS X  <a href="https://github.com/railwaycat/emacs-mac-port">port</a>. To install:
</p>
 <div class="org-src-container">
 <pre class="src src-sh">$ brew tap railwaycat/emacsmacport
$ brew install emacs-mac
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/installing-emacs-24-4-on-mac-os-x/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/installing-emacs-24-4-on-mac-os-x/index.html</guid>
  <pubDate>Wed, 09 Jul 2014 00:00:00 +0100</pubDate>
</item>
<item>
  <author>Álvaro Ramírez</author>
  <title>Installing Emacs 24.4 on Linux</title>
  <description><![CDATA[<div id="content">

 <div id="outline-container-org4c3b850" class="outline-2">
 <h2 id="installing-emacs--on-linux"> <span class="timestamp-wrapper"> <span class="timestamp">09 July 2014</span></span> Installing Emacs 24.4 on Linux</h2>
 <div class="outline-text-2" id="text-installing-emacs--on-linux">
 <div class="org-src-container">
 <pre class="src src-sh">sudo apt-get install texinfo build-essential xorg-dev libgtk-3-dev libjpeg-dev libncurses5-dev libgif-dev libtiff-dev libm17n-dev libpng12-dev librsvg2-dev libotf-dev
</pre>
</div>
</div>
</div>
</div>]]></description>
  <link>http://xenodium.com/installing-emacs--on-linux/index.html</link>
  <guid isPermaLink="false">http://xenodium.com/installing-emacs--on-linux/index.html</guid>
  <pubDate>Wed, 09 Jul 2014 00:00:00 +0100</pubDate>
</item>
</channel>
</rss>
